# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Jarry Shaw <jarryshaw@icloud.com>, 2018
# Freesand Leo <yuqinju@163.com>, 2018
# walkinrain <walkinrain2008@163.com>, 2019
# 刘玉龙 <banbooliu@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-01 10:14+0900\n"
"PO-Revision-Date: 2017-02-16 23:03+0000\n"
"Last-Translator: 刘玉龙 <banbooliu@gmail.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/collections.abc.rst:2
msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ":mod:`collections.abc` --- 容器的抽象基类"

#: ../../library/collections.abc.rst:10
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr "该模块曾是 :mod:`collections` 模块的组成部分。"

#: ../../library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr "**源代码：** :source:`Lib/_collections_abc.py`"

#: ../../library/collections.abc.rst:23
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is hashable or whether it is a mapping."
msgstr ""
"该模块定义了一些 :term:`抽象基类 <abstract base "
"class>`，它们可用于判断一个具体类是否具有某一特定的接口；例如，这个类是否可哈希，或其是否为映射类。"

#: ../../library/collections.abc.rst:31
msgid "Collections Abstract Base Classes"
msgstr "容器抽象基类"

#: ../../library/collections.abc.rst:33
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr "这个容器模块提供了以下 :term:`ABCs <abstract base class>`:"

#: ../../library/collections.abc.rst:38
msgid "ABC"
msgstr ""

#: ../../library/collections.abc.rst:38
msgid "Inherits from"
msgstr "继承自"

#: ../../library/collections.abc.rst:38
msgid "Abstract Methods"
msgstr "抽象方法"

#: ../../library/collections.abc.rst:38
msgid "Mixin Methods"
msgstr "Mixin 方法"

#: ../../library/collections.abc.rst:40
msgid ":class:`Container`"
msgstr ":class:`Container`"

#: ../../library/collections.abc.rst:40
msgid "``__contains__``"
msgstr "``__contains__``"

#: ../../library/collections.abc.rst:41
msgid ":class:`Hashable`"
msgstr ":class:`Hashable`"

#: ../../library/collections.abc.rst:41
msgid "``__hash__``"
msgstr "``__hash__``"

#: ../../library/collections.abc.rst:42 ../../library/collections.abc.rst:43
#: ../../library/collections.abc.rst:44
msgid ":class:`Iterable`"
msgstr ":class:`Iterable`"

#: ../../library/collections.abc.rst:42 ../../library/collections.abc.rst:43
msgid "``__iter__``"
msgstr ""

#: ../../library/collections.abc.rst:43 ../../library/collections.abc.rst:45
msgid ":class:`Iterator`"
msgstr ":class:`Iterator`"

#: ../../library/collections.abc.rst:43
msgid "``__next__``"
msgstr "``__next__``"

#: ../../library/collections.abc.rst:44
msgid ":class:`Reversible`"
msgstr ":class:`Reversible`"

#: ../../library/collections.abc.rst:44
msgid "``__reversed__``"
msgstr "``__reversed__``"

#: ../../library/collections.abc.rst:45
msgid ":class:`Generator`"
msgstr ":class:`Generator`"

#: ../../library/collections.abc.rst:45 ../../library/collections.abc.rst:93
msgid "``send``, ``throw``"
msgstr "``send``, ``throw``"

#: ../../library/collections.abc.rst:45
msgid "``close``, ``__iter__``, ``__next__``"
msgstr "``close``, ``__iter__``, ``__next__``"

#: ../../library/collections.abc.rst:46 ../../library/collections.abc.rst:85
msgid ":class:`Sized`"
msgstr ":class:`Sized`"

#: ../../library/collections.abc.rst:46 ../../library/collections.abc.rst:85
msgid "``__len__``"
msgstr "``__len__``"

#: ../../library/collections.abc.rst:47
msgid ":class:`Callable`"
msgstr ":class:`Callable`"

#: ../../library/collections.abc.rst:47
msgid "``__call__``"
msgstr "``__call__``"

#: ../../library/collections.abc.rst:48 ../../library/collections.abc.rst:64
#: ../../library/collections.abc.rst:74
msgid ":class:`Collection`"
msgstr ":class:`Collection`"

#: ../../library/collections.abc.rst:48
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ":class:`Sized`, :class:`Iterable`, :class:`Container`"

#: ../../library/collections.abc.rst:48 ../../library/collections.abc.rst:64
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr "``__contains__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:52 ../../library/collections.abc.rst:55
#: ../../library/collections.abc.rst:61
msgid ":class:`Sequence`"
msgstr ":class:`Sequence`"

#: ../../library/collections.abc.rst:52
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ":class:`Reversible`, :class:`Collection`"

#: ../../library/collections.abc.rst:52 ../../library/collections.abc.rst:61
msgid "``__getitem__``, ``__len__``"
msgstr "``__getitem__``, ``__len__``"

#: ../../library/collections.abc.rst:52
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"

#: ../../library/collections.abc.rst:55
msgid ":class:`MutableSequence`"
msgstr ":class:`MutableSequence`"

#: ../../library/collections.abc.rst:55
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"

#: ../../library/collections.abc.rst:55
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``reverse``, ``extend``,"
" ``pop``, ``remove``, and ``__iadd__``"
msgstr ""
"继承自 :class:`Sequence` 的方法，以及 ``append``, ``reverse``, ``extend``, ``pop``, "
"``remove``，和 ``__iadd__``"

#: ../../library/collections.abc.rst:61
msgid ":class:`ByteString`"
msgstr ":class:`ByteString`"

#: ../../library/collections.abc.rst:61
msgid "Inherited :class:`Sequence` methods"
msgstr "继承自 :class:`Sequence` 的方法"

#: ../../library/collections.abc.rst:64 ../../library/collections.abc.rst:68
msgid ":class:`Set`"
msgstr ":class:`Set`"

#: ../../library/collections.abc.rst:64
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"

#: ../../library/collections.abc.rst:68
msgid ":class:`MutableSet`"
msgstr ":class:`MutableSet`"

#: ../../library/collections.abc.rst:68
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr ""

#: ../../library/collections.abc.rst:68
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""
"继承自 :class:`Set` 的方法以及 ``clear``, ``pop``, ``remove``, ``__ior__``, "
"``__iand__``, ``__ixor__``，和  ``__isub__``"

#: ../../library/collections.abc.rst:74 ../../library/collections.abc.rst:78
msgid ":class:`Mapping`"
msgstr ":class:`Mapping`"

#: ../../library/collections.abc.rst:74
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr "``__getitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:74
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"

#: ../../library/collections.abc.rst:78
msgid ":class:`MutableMapping`"
msgstr ":class:`MutableMapping`"

#: ../../library/collections.abc.rst:78
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:78
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""
"继承自 :class:`Mapping` 的方法以及 ``pop``, ``popitem``, ``clear``, ``update``，和 "
"``setdefault``"

#: ../../library/collections.abc.rst:85
msgid ":class:`MappingView`"
msgstr ":class:`MappingView`"

#: ../../library/collections.abc.rst:86
msgid ":class:`ItemsView`"
msgstr ":class:`ItemsView`"

#: ../../library/collections.abc.rst:86 ../../library/collections.abc.rst:88
msgid ":class:`MappingView`, :class:`Set`"
msgstr ":class:`MappingView`, :class:`Set`"

#: ../../library/collections.abc.rst:86 ../../library/collections.abc.rst:88
#: ../../library/collections.abc.rst:90
msgid "``__contains__``, ``__iter__``"
msgstr "``__contains__``, ``__iter__``"

#: ../../library/collections.abc.rst:88
msgid ":class:`KeysView`"
msgstr ":class:`KeysView`"

#: ../../library/collections.abc.rst:90
msgid ":class:`ValuesView`"
msgstr ":class:`ValuesView`"

#: ../../library/collections.abc.rst:90
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ":class:`MappingView`, :class:`Collection`"

#: ../../library/collections.abc.rst:92 ../../library/collections.abc.rst:93
msgid ":class:`Awaitable`"
msgstr ":class:`Awaitable`"

#: ../../library/collections.abc.rst:92
msgid "``__await__``"
msgstr "``__await__``"

#: ../../library/collections.abc.rst:93
msgid ":class:`Coroutine`"
msgstr ":class:`Coroutine`"

#: ../../library/collections.abc.rst:93
msgid "``close``"
msgstr "``close``"

#: ../../library/collections.abc.rst:94 ../../library/collections.abc.rst:95
msgid ":class:`AsyncIterable`"
msgstr ":class:`AsyncIterable`"

#: ../../library/collections.abc.rst:94 ../../library/collections.abc.rst:95
msgid "``__aiter__``"
msgstr "``__aiter__``"

#: ../../library/collections.abc.rst:95 ../../library/collections.abc.rst:96
msgid ":class:`AsyncIterator`"
msgstr ":class:`AsyncIterator`"

#: ../../library/collections.abc.rst:95
msgid "``__anext__``"
msgstr "``__anext__``"

#: ../../library/collections.abc.rst:96
msgid ":class:`AsyncGenerator`"
msgstr ":class:`AsyncGenerator`"

#: ../../library/collections.abc.rst:96
msgid "``asend``, ``athrow``"
msgstr ""

#: ../../library/collections.abc.rst:96
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr ""

#: ../../library/collections.abc.rst:105
msgid ""
"ABCs for classes that provide respectively the methods :meth:`__contains__`,"
" :meth:`__hash__`, :meth:`__len__`, and :meth:`__call__`."
msgstr ""
"分别提供了 :meth:`__contains__`, :meth:`__hash__`, :meth:`__len__` 和 "
":meth:`__call__` 方法的抽象基类。"

#: ../../library/collections.abc.rst:110
msgid "ABC for classes that provide the :meth:`__iter__` method."
msgstr "提供了 :meth:`__iter__` 方法的抽象基类。"

#: ../../library/collections.abc.rst:112
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`__iter__` method, but it does "
"not detect classes that iterate with the :meth:`__getitem__` method. The "
"only reliable way to determine whether an object is :term:`iterable` is to "
"call ``iter(obj)``."
msgstr ""
"使用 ``isinstance(obj, Iterable)`` 可以检测一个类是否已经注册到了 :class:`Iterable` 或者实现了 "
":meth:`__iter__` 函数，但是无法检测这个类是否能够使用 :meth:`__getitem__` 方法进行迭代。检测一个对象是否是 "
":term:`iterable` 的唯一可信赖的方法是调用 ``iter(obj)``。"

#: ../../library/collections.abc.rst:120
msgid "ABC for sized iterable container classes."
msgstr "集合了 Sized 和 Iterable 类的抽象基类。"

#: ../../library/collections.abc.rst:126
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and "
":meth:`~iterator.__next__` methods.  See also the definition of "
":term:`iterator`."
msgstr ""
"提供了 :meth:`~iterator.__iter__` 和 :meth:`~iterator.__next__` 方法的抽象基类。参见 "
":term:`iterator` 的定义。"

#: ../../library/collections.abc.rst:132
msgid ""
"ABC for iterable classes that also provide the :meth:`__reversed__` method."
msgstr "为可迭代类提供了 :meth:`__reversed__` 方法的抽象基类。"

#: ../../library/collections.abc.rst:139
msgid ""
"ABC for generator classes that implement the protocol defined in :pep:`342` "
"that extends iterators with the :meth:`~generator.send`, "
":meth:`~generator.throw` and :meth:`~generator.close` methods. See also the "
"definition of :term:`generator`."
msgstr ""
"生成器类，实现了 :pep:`342` 中定义的协议，继承并扩展了迭代器，提供了 :meth:`~generator.send`, "
":meth:`~generator.throw` 和 :meth:`~generator.close` 方法。参见 :term:`generator` "
"的定义。"

#: ../../library/collections.abc.rst:150
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr ""

#: ../../library/collections.abc.rst:152
msgid ""
"Implementation note: Some of the mixin methods, such as :meth:`__iter__`, "
":meth:`__reversed__` and :meth:`index`, make repeated calls to the "
"underlying :meth:`__getitem__` method. Consequently, if :meth:`__getitem__` "
"is implemented with constant access speed, the mixin methods will have "
"linear performance; however, if the underlying method is linear (as it would"
" be with a linked list), the mixins will have quadratic performance and will"
" likely need to be overridden."
msgstr ""

#: ../../library/collections.abc.rst:161
msgid "The index() method added support for *stop* and *start* arguments."
msgstr ""

#: ../../library/collections.abc.rst:168
msgid "ABCs for read-only and mutable sets."
msgstr ""

#: ../../library/collections.abc.rst:173
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr ""

#: ../../library/collections.abc.rst:180
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr ""

#: ../../library/collections.abc.rst:184
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the :meth:`__await__` "
"method."
msgstr ""

#: ../../library/collections.abc.rst:188
msgid ""
":term:`Coroutine` objects and instances of the "
":class:`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""

#: ../../library/collections.abc.rst:192
msgid ""
"In CPython, generator-based coroutines (generators decorated with "
":func:`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, even"
" though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Awaitable)`` for them will return ``False``. Use "
":func:`inspect.isawaitable` to detect them."
msgstr ""

#: ../../library/collections.abc.rst:202
msgid ""
"ABC for coroutine compatible classes.  These implement the following "
"methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, "
":meth:`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom "
"implementations must also implement :meth:`__await__`.  All "
":class:`Coroutine` instances are also instances of :class:`Awaitable`.  See "
"also the definition of :term:`coroutine`."
msgstr ""

#: ../../library/collections.abc.rst:210
msgid ""
"In CPython, generator-based coroutines (generators decorated with "
":func:`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, even"
" though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Coroutine)`` for them will return ``False``. Use "
":func:`inspect.isawaitable` to detect them."
msgstr ""

#: ../../library/collections.abc.rst:220
msgid ""
"ABC for classes that provide ``__aiter__`` method.  See also the definition "
"of :term:`asynchronous iterable`."
msgstr ""

#: ../../library/collections.abc.rst:227
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""

#: ../../library/collections.abc.rst:234
msgid ""
"ABC for asynchronous generator classes that implement the protocol defined "
"in :pep:`525` and :pep:`492`."
msgstr ""

#: ../../library/collections.abc.rst:240
msgid ""
"These ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr ""

#: ../../library/collections.abc.rst:247
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop"
" classes supporting container APIs.  For example, to write a class "
"supporting the full :class:`Set` API, it is only necessary to supply the "
"three underlying abstract methods: :meth:`__contains__`, :meth:`__iter__`, "
"and :meth:`__len__`. The ABC supplies the remaining methods such as "
":meth:`__and__` and :meth:`isdisjoint`::"
msgstr ""

#: ../../library/collections.abc.rst:276
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr ""

#: ../../library/collections.abc.rst:279
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an iterable. The class constructor is "
"assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal classmethod called "
":meth:`_from_iterable` which calls ``cls(iterable)`` to produce a new set. "
"If the :class:`Set` mixin is being used in a class with a different "
"constructor signature, you will need to override :meth:`_from_iterable` with"
" a classmethod that can construct new instances from an iterable argument."
msgstr ""

#: ../../library/collections.abc.rst:290
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`__le__` and :meth:`__ge__`, then the other "
"operations will automatically follow suit."
msgstr ""

#: ../../library/collections.abc.rst:295
msgid ""
"The :class:`Set` mixin provides a :meth:`_hash` method to compute a hash "
"value for the set; however, :meth:`__hash__` is not defined because not all "
"sets are hashable or immutable.  To add set hashability using mixins, "
"inherit from both :meth:`Set` and :meth:`Hashable`, then define ``__hash__ ="
" Set._hash``."
msgstr ""

#: ../../library/collections.abc.rst:303
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""

#: ../../library/collections.abc.rst:306
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr ""
