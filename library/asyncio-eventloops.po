# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# ww song <sww4718168@gmail.com>, 2018
# Pan Felix <tinylambda@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-30 05:56+0900\n"
"PO-Revision-Date: 2017-02-16 17:48+0000\n"
"Last-Translator: Pan Felix <tinylambda@gmail.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-eventloops.rst:4
msgid "Event loops"
msgstr "事件循环"

#: ../../library/asyncio-eventloops.rst:6
msgid "**Source code:** :source:`Lib/asyncio/events.py`"
msgstr "**源码:** :source:`Lib/asyncio/events.py`"

#: ../../library/asyncio-eventloops.rst:9
msgid "Event loop functions"
msgstr "事件循环函数"

#: ../../library/asyncio-eventloops.rst:11
msgid ""
"The following functions are convenient shortcuts to accessing the methods of"
" the global policy. Note that this provides access to the default policy, "
"unless an alternative policy was set by calling "
":func:`set_event_loop_policy` earlier in the execution of the process."
msgstr "下面的函数是访问全局策略方法的便利快捷方式。注意这只是提供了对默认策略的访问，除非要在进程开始之前设置替代的策略。"

#: ../../library/asyncio-eventloops.rst:18
msgid "Equivalent to calling ``get_event_loop_policy().get_event_loop()``."
msgstr "与调用 ``get_event_loop_policy().get_event_loop()`` 等价。"

#: ../../library/asyncio-eventloops.rst:22
msgid ""
"Equivalent to calling ``get_event_loop_policy().set_event_loop(loop)``."
msgstr "等价于调用 ``get_event_loop_policy().set_event_loop(loop)``。"

#: ../../library/asyncio-eventloops.rst:26
msgid "Equivalent to calling ``get_event_loop_policy().new_event_loop()``."
msgstr "等价于调用 ``get_event_loop_policy().new_event_loop()``。"

#: ../../library/asyncio-eventloops.rst:30
msgid ""
"Return the running event loop in the current OS thread.  If there is no "
"running event loop a :exc:`RuntimeError` is raised."
msgstr ""

#: ../../library/asyncio-eventloops.rst:39
msgid "Available event loops"
msgstr "可用的事件循环"

#: ../../library/asyncio-eventloops.rst:41
msgid ""
"asyncio currently provides two implementations of event loops: "
":class:`SelectorEventLoop` and :class:`ProactorEventLoop`."
msgstr ""
"asyncio当前提供两种事件循环实现： :class:`SelectorEventLoop` 和 :class:`ProactorEventLoop`"
" 。"

#: ../../library/asyncio-eventloops.rst:46
msgid ""
"Event loop based on the :mod:`selectors` module. Subclass of "
":class:`AbstractEventLoop`."
msgstr "基于 :mod:`selectors` 模块的事件循环。 :class:`AbstractEventLoop` 的子类。"

#: ../../library/asyncio-eventloops.rst:49
msgid "Use the most efficient selector available on the platform."
msgstr "使用对应平台上最高效的选择器。"

#: ../../library/asyncio-eventloops.rst:51
msgid ""
"On Windows, only sockets are supported (ex: pipes are not supported): see "
"the `MSDN documentation of select <https://msdn.microsoft.com/en-"
"us/library/windows/desktop/ms740141%28v=vs.85%29.aspx>`_."
msgstr ""
"在Windows上，只支持套接字（举例：不支持管线）：参见 `MSDN关于select的文档 <https://msdn.microsoft.com"
"/en-us/library/windows/desktop/ms740141%28v=vs.85%29.aspx>` _ 。"

#: ../../library/asyncio-eventloops.rst:57
msgid ""
"Proactor event loop for Windows using \"I/O Completion Ports\" aka IOCP. "
"Subclass of :class:`AbstractEventLoop`."
msgstr ""
"Windows上的 Proactor 事件循环，使用的是 “I/O 完成端口”，也叫做 IOCP。为 "
":class:`AbstractEventLoop` 的子类。"

#: ../../library/asyncio-eventloops.rst:60
msgid "Availability: Windows."
msgstr "可用性：Windows。"

#: ../../library/asyncio-eventloops.rst:64
msgid ""
"`MSDN documentation on I/O Completion Ports <https://msdn.microsoft.com/en-"
"us/library/windows/desktop/aa365198%28v=vs.85%29.aspx>`_."
msgstr ""
"`MSDN上关于 I/O完成端口的文档 <https://msdn.microsoft.com/en-"
"us/library/windows/desktop/aa365198%28v=vs.85%29.aspx>`_ 。"

#: ../../library/asyncio-eventloops.rst:67
msgid "Example to use a :class:`ProactorEventLoop` on Windows::"
msgstr "在Windows上使用 :class:`ProactorEventLoop` 的例子::"

#: ../../library/asyncio-eventloops.rst:78
msgid "Platform support"
msgstr "平台支持"

#: ../../library/asyncio-eventloops.rst:80
msgid ""
"The :mod:`asyncio` module has been designed to be portable, but each "
"platform still has subtle differences and may not support all :mod:`asyncio`"
" features."
msgstr ""
":mod:`asyncio` 模块被设计为可移植的，但是每个平台仍旧有细微的不同，而且不一定支持 :mod:`asyncio` 的所有特性。"

#: ../../library/asyncio-eventloops.rst:84
msgid "Windows"
msgstr "Windows"

#: ../../library/asyncio-eventloops.rst:86
msgid "Common limits of Windows event loops:"
msgstr "Windows事件循环的一般限制："

#: ../../library/asyncio-eventloops.rst:88
msgid ""
":meth:`~AbstractEventLoop.create_unix_connection` and "
":meth:`~AbstractEventLoop.create_unix_server` are not supported: the socket "
"family :data:`socket.AF_UNIX` is specific to UNIX"
msgstr ""
"不支持 :meth:`~AbstractEventLoop.create_unix_connection` 和 "
":meth:`~AbstractEventLoop.create_unix_server`：:data:`socket.AF_UNIX` "
"套接字族只在UNIX上可用"

#: ../../library/asyncio-eventloops.rst:91
msgid ""
":meth:`~AbstractEventLoop.add_signal_handler` and "
":meth:`~AbstractEventLoop.remove_signal_handler` are not supported"
msgstr ""
"不支持 :meth:`~AbstractEventLoop.add_signal_handler` 和 "
":meth:`~AbstractEventLoop.remove_signal_handler` "

#: ../../library/asyncio-eventloops.rst:93
msgid ""
":meth:`EventLoopPolicy.set_child_watcher` is not supported. "
":class:`ProactorEventLoop` supports subprocesses. It has only one "
"implementation to watch child processes, there is no need to configure it."
msgstr ""
"不支持 :meth:`EventLoopPolicy.set_child_watcher` 。:class:`ProactorEventLoop` "
"支持子进程。监控子进程的实现只有一种，不需要对其进行设置。"

#: ../../library/asyncio-eventloops.rst:97
msgid ":class:`SelectorEventLoop` specific limits:"
msgstr "特定于 :class:`SelectorEventLoop` 的限制："

#: ../../library/asyncio-eventloops.rst:99
msgid ""
":class:`~selectors.SelectSelector` is used which only supports sockets and "
"is limited to 512 sockets."
msgstr ":class:`~selectors.SelectSelector` 只被用于支持套接字，并且最多支持512个套接字。"

#: ../../library/asyncio-eventloops.rst:101
msgid ""
":meth:`~AbstractEventLoop.add_reader` and "
":meth:`~AbstractEventLoop.add_writer` only accept file descriptors of "
"sockets"
msgstr ""
":meth:`~AbstractEventLoop.add_reader` 和 "
":meth:`~AbstractEventLoop.add_writer` 只接受套接字的文件描述符"

#: ../../library/asyncio-eventloops.rst:103
msgid ""
"Pipes are not supported (ex: :meth:`~AbstractEventLoop.connect_read_pipe`, "
":meth:`~AbstractEventLoop.connect_write_pipe`)"
msgstr ""
"不支持管线（示例：:meth:`~AbstractEventLoop.connect_read_pipe`, "
":meth:`~AbstractEventLoop.connect_write_pipe`）"

#: ../../library/asyncio-eventloops.rst:106
msgid ""
":ref:`Subprocesses <asyncio-subprocess>` are not supported (ex: "
":meth:`~AbstractEventLoop.subprocess_exec`, "
":meth:`~AbstractEventLoop.subprocess_shell`)"
msgstr ""
"不支持 :ref:`Subprocesses <asyncio-subprocess>`  （示例: "
":meth:`~AbstractEventLoop.subprocess_exec`, "
":meth:`~AbstractEventLoop.subprocess_shell`）"

#: ../../library/asyncio-eventloops.rst:110
msgid ":class:`ProactorEventLoop` specific limits:"
msgstr "特定于 :class:`ProactorEventLoop` 的限制："

#: ../../library/asyncio-eventloops.rst:112
msgid ""
":meth:`~AbstractEventLoop.create_datagram_endpoint` (UDP) is not supported"
msgstr "不支持 :meth:`~AbstractEventLoop.create_datagram_endpoint` (UDP)"

#: ../../library/asyncio-eventloops.rst:113
msgid ""
":meth:`~AbstractEventLoop.add_reader` and "
":meth:`~AbstractEventLoop.add_writer` are not supported"
msgstr ""
"不支持 :meth:`~AbstractEventLoop.add_reader` 和 "
":meth:`~AbstractEventLoop.add_writer`"

#: ../../library/asyncio-eventloops.rst:116
msgid ""
"The resolution of the monotonic clock on Windows is usually around 15.6 "
"msec. The best resolution is 0.5 msec. The resolution depends on the "
"hardware (availability of `HPET "
"<https://en.wikipedia.org/wiki/High_Precision_Event_Timer>`_) and on the "
"Windows configuration. See :ref:`asyncio delayed calls <asyncio-delayed-"
"calls>`."
msgstr ""
"Windows上单调时钟的分辨率大约为 15.6 毫秒。最佳的分辨率是 0.5 毫秒。分辨率依赖于具体的硬件（`HPET "
"<https://en.wikipedia.org/wiki/High_Precision_Event_Timer>`_ "
"的可用性）和Windows的设置。参见:ref:`asyncio delayed calls <asyncio-delayed-calls>` 。"

#: ../../library/asyncio-eventloops.rst:124
msgid ":class:`ProactorEventLoop` now supports SSL."
msgstr ":class:`ProactorEventLoop`  现在支持SSL了。"

#: ../../library/asyncio-eventloops.rst:128
msgid "Mac OS X"
msgstr "Mac OS X"

#: ../../library/asyncio-eventloops.rst:130
msgid ""
"Character devices like PTY are only well supported since Mavericks (Mac OS "
"10.9). They are not supported at all on Mac OS 10.5 and older."
msgstr ""
"类似于PTY的字符设备在Mavericks （Mac OS 10.9）之前并未有很好的支持。在 Mac OS 10.5以及更老的版本上则根本不支持。"

#: ../../library/asyncio-eventloops.rst:133
msgid ""
"On Mac OS 10.6, 10.7 and 10.8, the default event loop is "
":class:`SelectorEventLoop` which uses :class:`selectors.KqueueSelector`. "
":class:`selectors.KqueueSelector` does not support character devices on "
"these versions.  The :class:`SelectorEventLoop` can be used with "
":class:`~selectors.SelectSelector` or :class:`~selectors.PollSelector` to "
"support character devices on these versions of Mac OS X. Example::"
msgstr ""
"在Mac OS 10.6、10.7和10.8上，默认的事件循环是 :class:`SelectorEventLoop` ，其使用了 "
":class:`selectors.KqueueSelector` 。 :class:`selectors.KqueueSelector` "
"在这些版本上并不支持字符设备。:class:`SelectorEventLoop` 可用同 "
":class:`~selectors.SelectSelector` 或者 :class:`~selectors.PollSelector` "
"一同使用来在这些版本的Mac OS X上支持块设备。 例如::"

#: ../../library/asyncio-eventloops.rst:149
msgid "Event loop policies and the default policy"
msgstr "事件循环策略和默认策略"

#: ../../library/asyncio-eventloops.rst:151
msgid ""
"Event loop management is abstracted with a *policy* pattern, to provide "
"maximal flexibility for custom platforms and frameworks. Throughout the "
"execution of a process, a single global policy object manages the event "
"loops available to the process based on the calling context. A policy is an "
"object implementing the :class:`AbstractEventLoopPolicy` interface."
msgstr ""
"使用一个 *策略* "
"模式对事件循环进行管理，用以为特定平台和框架提供最大限度的灵活性。在一个进程的执行中，唯一的全局策略对象，基于调用的上下文，管理着此进程所有可用的事件循环。一个策略就是一个实现了"
" :class:`AbstractEventLoopPolicy` 的对象。"

#: ../../library/asyncio-eventloops.rst:157
msgid ""
"For most users of :mod:`asyncio`, policies never have to be dealt with "
"explicitly, since the default global policy is sufficient (see below)."
msgstr "对于 :mod:`asyncio` 的多数使用者来说，从来都不需要显式地处理策略，因为默认的全局策略就已经足够了（看下面）。"

#: ../../library/asyncio-eventloops.rst:160
msgid ""
"The module-level functions :func:`get_event_loop` and :func:`set_event_loop`"
" provide convenient access to event loops managed by the default policy."
msgstr ""
"模块级别的函数 :func:`get_event_loop` 和 :func:`set_event_loop` "
"对于默认策略管理的事件循环的便利访问方式。"

#: ../../library/asyncio-eventloops.rst:166
msgid "Event loop policy interface"
msgstr "事件循环策略接口"

#: ../../library/asyncio-eventloops.rst:168
msgid "An event loop policy must implement the following interface:"
msgstr "一个事件循环必须实现如下的接口："

#: ../../library/asyncio-eventloops.rst:172
msgid "Event loop policy."
msgstr "事件循环策略。"

#: ../../library/asyncio-eventloops.rst:176
msgid "Get the event loop for the current context."
msgstr "为当前上下文获取事件循环。"

#: ../../library/asyncio-eventloops.rst:178
msgid ""
"Returns an event loop object implementing the :class:`AbstractEventLoop` "
"interface. In case called from coroutine, it returns the currently running "
"event loop."
msgstr ""
"返回一个实现了 :class:`AbstractEventLoop` 接口的事件循环对象。如果是从一个协程中调用，就会返回当前正在运行的事件循环。"

#: ../../library/asyncio-eventloops.rst:182
msgid ""
"Raises an exception in case no event loop has been set for the current "
"context and the current policy does not specify to create one. It must never"
" return ``None``."
msgstr "如果没有为当前上下文设置一个事件循环，并且当前策略不能创建一个事件循环，就会抛出一个错误。其务必不能返回 ``None`` 。"

#: ../../library/asyncio-eventloops.rst:190
msgid "Set the event loop for the current context to *loop*."
msgstr "将当前上下文的事件循环设置为  *loop* 。"

#: ../../library/asyncio-eventloops.rst:194
msgid ""
"Create and return a new event loop object according to this policy's rules."
msgstr "根据策略的规则，创建并返回一个新的事件循环对象。"

#: ../../library/asyncio-eventloops.rst:197
msgid ""
"If there's need to set this loop as the event loop for the current context, "
":meth:`set_event_loop` must be called explicitly."
msgstr "如果有需要设置这个循环作为当前上下文的事件循环，就必须显式调用 :meth:`set_event_loop`  。"

#: ../../library/asyncio-eventloops.rst:201
msgid ""
"The default policy defines context as the current thread, and manages an "
"event loop per thread that interacts with :mod:`asyncio`. An exception to "
"this rule happens when :meth:`~AbstractEventLoopPolicy.get_event_loop` is "
"called from a running future/coroutine, in which case it will return the "
"current loop running that future/coroutine."
msgstr ""

#: ../../library/asyncio-eventloops.rst:207
msgid ""
"If the current thread doesn't already have an event loop associated with it,"
" the default policy's :meth:`~AbstractEventLoopPolicy.get_event_loop` method"
" creates one when called from the main thread, but raises "
":exc:`RuntimeError` otherwise."
msgstr ""

#: ../../library/asyncio-eventloops.rst:214
msgid "Access to the global loop policy"
msgstr "访问全局循环策略"

#: ../../library/asyncio-eventloops.rst:218
msgid "Get the current event loop policy."
msgstr "获取当前事件循环策略。"

#: ../../library/asyncio-eventloops.rst:222
msgid ""
"Set the current event loop policy. If *policy* is ``None``, the default "
"policy is restored."
msgstr "设置当前事件循环策略。 如果 *policy* 为 ``None`` ，就会恢复使用默认的策略。"

#: ../../library/asyncio-eventloops.rst:227
msgid "Customizing the event loop policy"
msgstr "自定义事件循环策略"

#: ../../library/asyncio-eventloops.rst:229
msgid ""
"To implement a new event loop policy, it is recommended you subclass the "
"concrete default event loop policy :class:`DefaultEventLoopPolicy` and "
"override the methods for which you want to change behavior, for example::"
msgstr ""
"要实现一个新的事件循环策略，推荐你继承具体的默认事件循环策略 :class:`DefaultEventLoopPolicy` "
"并且重写你想要改变行为的方法，例如::"
