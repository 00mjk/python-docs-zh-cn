# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Arisaka97 <solitaire2312@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 12:40+0000\n"
"PO-Revision-Date: 2020-05-30 11:57+0000\n"
"Last-Translator: Arisaka97 <solitaire2312@gmail.com>, 2020\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/audioop.rst:2
msgid ":mod:`audioop` --- Manipulate raw audio data"
msgstr ":mod:`audioop` --- 处理原始音频数据"

#: ../../library/audioop.rst:9
msgid ""
"The :mod:`audioop` module contains some useful operations on sound "
"fragments. It operates on sound fragments consisting of signed integer "
"samples 8, 16, 24 or 32 bits wide, stored in :term:`bytes-like objects "
"<bytes-like object>`.  All scalar items are integers, unless specified "
"otherwise."
msgstr ""
":mod:`audioop` 模块包含针对声音片段的一些有用操作。它操作的声音片段由 8、16、24 或 32 位宽的有符号整型样本组成，存储在 "
":term:`类字节串对象 <bytes-like object>` 中。除非特别说明，否则所有标量项目均为整数。"

#: ../../library/audioop.rst:14
msgid ""
"Support for 24-bit samples was added. All functions now accept any :term"
":`bytes-like object`. String input now results in an immediate error."
msgstr ""
"增加了对 24 位样本的支持。现在，所有函数都接受任何 :term:`类字节串对象 <bytes-like "
"object>`。而传入字符串会立即导致错误。"

#: ../../library/audioop.rst:25
msgid ""
"This module provides support for a-LAW, u-LAW and Intel/DVI ADPCM encodings."
msgstr "本模块提供对 a-LAW、u-LAW 和 Intel/DVI ADPCM 编码的支持。"

#: ../../library/audioop.rst:29
msgid ""
"A few of the more complicated operations only take 16-bit samples, otherwise"
" the sample size (in bytes) is always a parameter of the operation."
msgstr "部分更复杂的操作仅接受 16 位样本，而其他操作始终需要样本大小（以字节为单位）作为该操作的参数。"

#: ../../library/audioop.rst:32
msgid "The module defines the following variables and functions:"
msgstr "此模块定义了下列变量和函数："

#: ../../library/audioop.rst:37
msgid ""
"This exception is raised on all errors, such as unknown number of bytes per "
"sample, etc."
msgstr "所有错误都会抛出此异常，比如样本的字节数未知等等。"

#: ../../library/audioop.rst:43
msgid ""
"Return a fragment which is the addition of the two samples passed as "
"parameters. *width* is the sample width in bytes, either ``1``, ``2``, ``3``"
" or ``4``.  Both fragments should have the same length.  Samples are "
"truncated in case of overflow."
msgstr ""
"两个样本作为参数传入，返回一个片段，该片段是两个样本的和。*width* 是样本宽度（以字节为单位），可以取 ``1``, ``2``, ``3`` 或"
" ``4``。两个片段的长度应相同。如果发生溢出，较长的样本将被截断。"

#: ../../library/audioop.rst:50
msgid ""
"Decode an Intel/DVI ADPCM coded fragment to a linear fragment.  See the "
"description of :func:`lin2adpcm` for details on ADPCM coding. Return a tuple"
" ``(sample, newstate)`` where the sample has the width specified in *width*."
msgstr ""
"将 Intel/DVI ADPCM 编码的片段解码为线性片段。关于 ADPCM 编码的详情请参阅 :func:`lin2adpcm` "
"的描述。返回一个元组 ``(sample, newstate)``，其中 sample 的位宽由 *width* 指定。"

#: ../../library/audioop.rst:57
msgid ""
"Convert sound fragments in a-LAW encoding to linearly encoded sound "
"fragments. a-LAW encoding always uses 8 bits samples, so *width* refers only"
" to the sample width of the output fragment here."
msgstr ""
"将 a-LAW 编码的声音片段转换为线性编码声音片段。由于 a-LAW 编码样本始终为 8 位，因此这里的 *width* 仅指输出片段的样本位宽。"

#: ../../library/audioop.rst:64
msgid "Return the average over all samples in the fragment."
msgstr ""

#: ../../library/audioop.rst:69
msgid ""
"Return the average peak-peak value over all samples in the fragment. No "
"filtering is done, so the usefulness of this routine is questionable."
msgstr ""

#: ../../library/audioop.rst:75
msgid ""
"Return a fragment that is the original fragment with a bias added to each "
"sample.  Samples wrap around in case of overflow."
msgstr ""

#: ../../library/audioop.rst:81
msgid ""
"\"Byteswap\" all samples in a fragment and returns the modified fragment. "
"Converts big-endian samples to little-endian and vice versa."
msgstr ""

#: ../../library/audioop.rst:89
msgid ""
"Return the number of zero crossings in the fragment passed as an argument."
msgstr ""

#: ../../library/audioop.rst:94
msgid ""
"Return a factor *F* such that ``rms(add(fragment, mul(reference, -F)))`` is "
"minimal, i.e., return the factor with which you should multiply *reference* "
"to make it match as well as possible to *fragment*.  The fragments should "
"both contain 2-byte samples."
msgstr ""

#: ../../library/audioop.rst:99
msgid "The time taken by this routine is proportional to ``len(fragment)``."
msgstr ""

#: ../../library/audioop.rst:104
msgid ""
"Try to match *reference* as well as possible to a portion of *fragment* "
"(which should be the longer fragment).  This is (conceptually) done by "
"taking slices out of *fragment*, using :func:`findfactor` to compute the "
"best match, and minimizing the result.  The fragments should both contain "
"2-byte samples. Return a tuple ``(offset, factor)`` where *offset* is the "
"(integer) offset into *fragment* where the optimal match started and "
"*factor* is the (floating-point) factor as per :func:`findfactor`."
msgstr ""

#: ../../library/audioop.rst:115
msgid ""
"Search *fragment* for a slice of length *length* samples (not bytes!) with "
"maximum energy, i.e., return *i* for which "
"``rms(fragment[i*2:(i+length)*2])`` is maximal.  The fragments should both "
"contain 2-byte samples."
msgstr ""

#: ../../library/audioop.rst:119
msgid "The routine takes time proportional to ``len(fragment)``."
msgstr ""

#: ../../library/audioop.rst:124
msgid "Return the value of sample *index* from the fragment."
msgstr ""

#: ../../library/audioop.rst:129
msgid ""
"Convert samples to 4 bit Intel/DVI ADPCM encoding.  ADPCM coding is an "
"adaptive coding scheme, whereby each 4 bit number is the difference between "
"one sample and the next, divided by a (varying) step.  The Intel/DVI ADPCM "
"algorithm has been selected for use by the IMA, so it may well become a "
"standard."
msgstr ""

#: ../../library/audioop.rst:134
msgid ""
"*state* is a tuple containing the state of the coder.  The coder returns a "
"tuple ``(adpcmfrag, newstate)``, and the *newstate* should be passed to the "
"next call of :func:`lin2adpcm`.  In the initial call, ``None`` can be passed"
" as the state. *adpcmfrag* is the ADPCM coded fragment packed 2 4-bit values"
" per byte."
msgstr ""

#: ../../library/audioop.rst:142
msgid ""
"Convert samples in the audio fragment to a-LAW encoding and return this as a"
" bytes object.  a-LAW is an audio encoding format whereby you get a dynamic "
"range of about 13 bits using only 8 bit samples.  It is used by the Sun "
"audio hardware, among others."
msgstr ""

#: ../../library/audioop.rst:150
msgid "Convert samples between 1-, 2-, 3- and 4-byte formats."
msgstr ""

#: ../../library/audioop.rst:154
msgid ""
"In some audio formats, such as .WAV files, 16, 24 and 32 bit samples are "
"signed, but 8 bit samples are unsigned.  So when converting to 8 bit wide "
"samples for these formats, you need to also add 128 to the result::"
msgstr ""

#: ../../library/audioop.rst:161
msgid ""
"The same, in reverse, has to be applied when converting from 8 to 16, 24 or "
"32 bit width samples."
msgstr ""

#: ../../library/audioop.rst:167
msgid ""
"Convert samples in the audio fragment to u-LAW encoding and return this as a"
" bytes object.  u-LAW is an audio encoding format whereby you get a dynamic "
"range of about 14 bits using only 8 bit samples.  It is used by the Sun "
"audio hardware, among others."
msgstr ""

#: ../../library/audioop.rst:175
msgid ""
"Return the maximum of the *absolute value* of all samples in a fragment."
msgstr ""

#: ../../library/audioop.rst:180
msgid "Return the maximum peak-peak value in the sound fragment."
msgstr ""

#: ../../library/audioop.rst:185
msgid ""
"Return a tuple consisting of the minimum and maximum values of all samples "
"in the sound fragment."
msgstr ""

#: ../../library/audioop.rst:191
msgid ""
"Return a fragment that has all samples in the original fragment multiplied "
"by the floating-point value *factor*.  Samples are truncated in case of "
"overflow."
msgstr ""

#: ../../library/audioop.rst:197
msgid "Convert the frame rate of the input fragment."
msgstr ""

#: ../../library/audioop.rst:199
msgid ""
"*state* is a tuple containing the state of the converter.  The converter "
"returns a tuple ``(newfragment, newstate)``, and *newstate* should be passed"
" to the next call of :func:`ratecv`.  The initial call should pass ``None`` "
"as the state."
msgstr ""

#: ../../library/audioop.rst:203
msgid ""
"The *weightA* and *weightB* arguments are parameters for a simple digital "
"filter and default to ``1`` and ``0`` respectively."
msgstr ""

#: ../../library/audioop.rst:209
msgid "Reverse the samples in a fragment and returns the modified fragment."
msgstr ""

#: ../../library/audioop.rst:214
msgid ""
"Return the root-mean-square of the fragment, i.e. ``sqrt(sum(S_i^2)/n)``."
msgstr ""

#: ../../library/audioop.rst:216
msgid "This is a measure of the power in an audio signal."
msgstr ""

#: ../../library/audioop.rst:221
msgid ""
"Convert a stereo fragment to a mono fragment.  The left channel is "
"multiplied by *lfactor* and the right channel by *rfactor* before adding the"
" two channels to give a mono signal."
msgstr ""

#: ../../library/audioop.rst:228
msgid ""
"Generate a stereo fragment from a mono fragment.  Each pair of samples in "
"the stereo fragment are computed from the mono sample, whereby left channel "
"samples are multiplied by *lfactor* and right channel samples by *rfactor*."
msgstr ""

#: ../../library/audioop.rst:235
msgid ""
"Convert sound fragments in u-LAW encoding to linearly encoded sound "
"fragments. u-LAW encoding always uses 8 bits samples, so *width* refers only"
" to the sample width of the output fragment here."
msgstr ""

#: ../../library/audioop.rst:239
msgid ""
"Note that operations such as :func:`.mul` or :func:`.max` make no "
"distinction between mono and stereo fragments, i.e. all samples are treated "
"equal.  If this is a problem the stereo fragment should be split into two "
"mono fragments first and recombined later.  Here is an example of how to do "
"that::"
msgstr ""

#: ../../library/audioop.rst:253
msgid ""
"If you use the ADPCM coder to build network packets and you want your "
"protocol to be stateless (i.e. to be able to tolerate packet loss) you "
"should not only transmit the data but also the state.  Note that you should "
"send the *initial* state (the one you passed to :func:`lin2adpcm`) along to "
"the decoder, not the final state (as returned by the coder).  If you want to"
" use :class:`struct.Struct` to store the state in binary you can code the "
"first element (the predicted value) in 16 bits and the second (the delta "
"index) in 8."
msgstr ""

#: ../../library/audioop.rst:261
msgid ""
"The ADPCM coders have never been tried against other ADPCM coders, only "
"against themselves.  It could well be that I misinterpreted the standards in"
" which case they will not be interoperable with the respective standards."
msgstr ""

#: ../../library/audioop.rst:265
msgid ""
"The :func:`find\\*` routines might look a bit funny at first sight. They are"
" primarily meant to do echo cancellation.  A reasonably fast way to do this "
"is to pick the most energetic piece of the output sample, locate that in the"
" input sample and subtract the whole output sample from the input sample::"
msgstr ""
