# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Freesand Leo <yuqinju@163.com>, 2018
# Meng Du <alphanow@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-01 10:14+0900\n"
"PO-Revision-Date: 2017-02-16 23:25+0000\n"
"Last-Translator: Meng Du <alphanow@gmail.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sched.rst:2
msgid ":mod:`sched` --- Event scheduler"
msgstr ":mod:`sched` —— 事件调度器"

#: ../../library/sched.rst:9
msgid "**Source code:** :source:`Lib/sched.py`"
msgstr "**源码：** :source:`Lib/sched.py`"

#: ../../library/sched.rst:15
msgid ""
"The :mod:`sched` module defines a class which implements a general purpose "
"event scheduler:"
msgstr ":mod:`sched` 模块定义了一个实现通用事件调度程序的类："

#: ../../library/sched.rst:20
msgid ""
"The :class:`scheduler` class defines a generic interface to scheduling "
"events. It needs two functions to actually deal with the \"outside world\" "
"--- *timefunc* should be callable without arguments, and return  a number "
"(the \"time\", in any units whatsoever). If time.monotonic is not available,"
" the *timefunc* default is time.time instead. The *delayfunc* function "
"should be callable with one argument, compatible with the output of "
"*timefunc*, and should delay that many time units. *delayfunc* will also be "
"called with the argument ``0`` after each event is run to allow other "
"threads an opportunity to run in multi-threaded applications."
msgstr ""
":class:`scheduler` 类定义了一个调度事件的通用接口。 "
"它需要两个函数来实际处理“外部世界”——*timefunc*应该可以在没有参数的情况下可调用，并返回一个数字（“时间”，以任何单位表示）。 "
"如果time.monotonic不可用，则*timefunc*默认为time.time。 "
"*delayfunc*函数应该用一个参数可调用，与*timefunc*的输出兼容，并且应该延迟那么多时间单位。 "
"每个事件运行后，还会使用参数``0``调用*delayfunc* ，以允许其他线程有机会在多线程应用程序中运行。"

#: ../../library/sched.rst:30
msgid "*timefunc* and *delayfunc* parameters are optional."
msgstr "*timefunc* 和 *delayfunc* 参数是可选的。"

#: ../../library/sched.rst:33
msgid ""
":class:`scheduler` class can be safely used in multi-threaded environments."
msgstr ":class:`scheduler` 类可以安全的在多线程环境中使用。"

#: ../../library/sched.rst:37
msgid "Example::"
msgstr "示例::"

#: ../../library/sched.rst:62
msgid "Scheduler Objects"
msgstr "调度器对象"

#: ../../library/sched.rst:64
msgid ""
":class:`scheduler` instances have the following methods and attributes:"
msgstr ":class:`scheduler` 实例拥有以下方法和属性："

#: ../../library/sched.rst:69
msgid ""
"Schedule a new event. The *time* argument should be a numeric type "
"compatible with the return value of the *timefunc* function passed  to the "
"constructor. Events scheduled for the same *time* will be executed in the "
"order of their *priority*. A lower number represents a higher priority."
msgstr ""

#: ../../library/sched.rst:74
msgid ""
"Executing the event means executing ``action(*argument, **kwargs)``. "
"*argument* is a sequence holding the positional arguments for *action*. "
"*kwargs* is a dictionary holding the keyword arguments for *action*."
msgstr ""

#: ../../library/sched.rst:78
msgid ""
"Return value is an event which may be used for later cancellation of the "
"event (see :meth:`cancel`)."
msgstr ""

#: ../../library/sched.rst:81 ../../library/sched.rst:94
msgid "*argument* parameter is optional."
msgstr ""

#: ../../library/sched.rst:84 ../../library/sched.rst:97
msgid "*kwargs* parameter was added."
msgstr ""

#: ../../library/sched.rst:90
msgid ""
"Schedule an event for *delay* more time units. Other than the relative time,"
" the other arguments, the effect and the return value are the same as those "
"for :meth:`enterabs`."
msgstr ""

#: ../../library/sched.rst:102
msgid ""
"Remove the event from the queue. If *event* is not an event currently in the"
" queue, this method will raise a :exc:`ValueError`."
msgstr ""

#: ../../library/sched.rst:108
msgid "Return true if the event queue is empty."
msgstr ""

#: ../../library/sched.rst:113
msgid ""
"Run all scheduled events. This method will wait  (using the "
":func:`delayfunc` function passed to the constructor) for the next event, "
"then execute it and so on until there are no more scheduled events."
msgstr ""

#: ../../library/sched.rst:117
msgid ""
"If *blocking* is false executes the scheduled events due to expire soonest "
"(if any) and then return the deadline of the next scheduled call in the "
"scheduler (if any)."
msgstr ""

#: ../../library/sched.rst:121
msgid ""
"Either *action* or *delayfunc* can raise an exception.  In either case, the "
"scheduler will maintain a consistent state and propagate the exception.  If "
"an exception is raised by *action*, the event will not be attempted in "
"future calls to :meth:`run`."
msgstr ""

#: ../../library/sched.rst:126
msgid ""
"If a sequence of events takes longer to run than the time available before "
"the next event, the scheduler will simply fall behind.  No events will be "
"dropped; the calling code is responsible for canceling  events which are no "
"longer pertinent."
msgstr ""

#: ../../library/sched.rst:131
msgid "*blocking* parameter was added."
msgstr ""

#: ../../library/sched.rst:136
msgid ""
"Read-only attribute returning a list of upcoming events in the order they "
"will be run.  Each event is shown as a :term:`named tuple` with the "
"following fields:  time, priority, action, argument, kwargs."
msgstr ""
