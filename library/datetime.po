# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Jerry Chen <jerrychen9657@gmail.com>, 2017
# 操旭 <caoxu3000@126.com>, 2017
# isaced <isaced@163.com>, 2018
# Menghua Xiao <arieshout@gmail.com>, 2018
# dannyvi <dannyvis@icloud.com>, 2018
# Pandaaaa906 <ye.pandaaaa906@gmail.com>, 2019
# Hanxi Fu <hfudev@gmail.com>, 2019
# Jack Wu <bitlabwzh@gmail.com>, 2019
# Trim21 <i@trim21.me>, 2019
# walkinrain <walkinrain2008@163.com>, 2019
# Zombie110year <zombie110year@gmail.com>, 2019
# Meng Du <alphanow@gmail.com>, 2019
# MuSheng Chen <sheng.2179@gmail.com>, 2019
# 1lin24 <1lin24@sina.com>, 2019
# emrich <emrich3@163.com>, 2019
# nick <2330458484@qq.com>, 2019
# dogn he <hedogn@163.com>, 2019
# ppcfish <ppcfish@gmail.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-24 12:15+0000\n"
"PO-Revision-Date: 2017-02-16 23:06+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2
msgid ":mod:`datetime` --- Basic date and time types"
msgstr ":mod:`datetime` --- 基本的日期和时间类型"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:11
msgid "**Source code:** :source:`Lib/datetime.py`"
msgstr "**源代码：** :source:`Lib/datetime.py`"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:17
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and "
"times."
msgstr ":mod:`datetime` 模块提供用于处理日期和时间的类。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:19
msgid ""
"While date and time arithmetic is supported, the focus of the implementation"
" is on efficient attribute extraction for output formatting and "
"manipulation."
msgstr "在支持日期时间数学运算的同时，实现的关注点更着重于如何能够更有效地解析其属性用于格式化输出和数据操作。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:25
msgid "Module :mod:`calendar`"
msgstr "模块 :mod:`calendar` "

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:25
msgid "General calendar related functions."
msgstr "通用日历相关函数"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:28
msgid "Module :mod:`time`"
msgstr "模块 :mod:`time`"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:28
msgid "Time access and conversions."
msgstr "时间的访问和转换"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:30
msgid "Package `dateutil <https://dateutil.readthedocs.io/en/stable/>`_"
msgstr "`dateutil <https://dateutil.readthedocs.io/en/stable/>`_ 包"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:31
msgid "Third-party library with expanded time zone and parsing support."
msgstr "具有扩展时区和解析支持的第三方库。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:36
msgid "Aware and Naive Objects"
msgstr "感知型对象和简单型对象"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:38
msgid "Date and time objects may be categorized as \"aware\" or \"naive.\""
msgstr "日期和时间对象可以分为“感知型”或“简单型”两类。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:40
msgid ""
"With sufficient knowledge of applicable algorithmic and political time "
"adjustments, such as time zone and daylight saving time information, an "
"**aware** object can locate itself relative to other aware objects. An aware"
" object represents a specific moment in time that is not open to "
"interpretation. [#]_"
msgstr ""
"充分掌握应用性算法和政治性时间调整信息例如时区和夏令时的情况下，一个 **感知型** 对象就能相对于其他感知型对象来精确定位自身时间点。 "
"感知型对象是用来表示一个没有解释空间的固定时间点。 [#]_"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:46
msgid ""
"A **naive** object does not contain enough information to unambiguously "
"locate itself relative to other date/time objects. Whether a naive object "
"represents Coordinated Universal Time (UTC), local time, or time in some "
"other timezone is purely up to the program, just like it is up to the "
"program whether a particular number represents metres, miles, or mass. Naive"
" objects are easy to understand and to work with, at the cost of ignoring "
"some aspects of reality."
msgstr ""
"**简单型** 对象没有包含足够多的信息来无歧义地相对于其他 date/time 对象来定位自身时间点。 "
"不论一个简单型对象所代表的是世界标准时间（UTC）、当地时间还是某个其他时区的时间完全取决于具体程序，就像一个特定数字所代表的是米、英里还是质量完全取决于具体程序一样。"
" 简单型对象更易于理解和使用，代价则是忽略了某些现实性考量。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:53
msgid ""
"For applications requiring aware objects, :class:`.datetime` and "
":class:`.time` objects have an optional time zone information attribute, "
":attr:`!tzinfo`, that can be set to an instance of a subclass of the "
"abstract :class:`tzinfo` class. These :class:`tzinfo` objects capture "
"information about the offset from UTC time, the time zone name, and whether "
"daylight saving time is in effect."
msgstr ""
"对于要求感知型对象的应用，:class:`.datetime` 和 :class:`.time` 对象具有一个可选的时区信息属性 "
":attr:`!tzinfo`，它可被设为抽象类 :class:`tzinfo` 的子类的一个实例。 这些 :class:`tzinfo` 对象会捕获与"
" UTC 时间的差值、时区名称以及夏令时是否生效等信息。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:59
msgid ""
"Only one concrete :class:`tzinfo` class, the :class:`timezone` class, is "
"supplied by the :mod:`datetime` module. The :class:`timezone` class can "
"represent simple timezones with fixed offsets from UTC, such as UTC itself "
"or North American EST and EDT timezones. Supporting timezones at deeper "
"levels of detail is up to the application. The rules for time adjustment "
"across the world are more political than rational, change frequently, and "
"there is no standard suitable for every application aside from UTC."
msgstr ""
":mod:`datetime` 模块只提供了一个具体的 :class:`tzinfo` 类，即 :class:`timezone` 类。 "
":class:`timezone` 类可以表示具有相对于 UTC 的固定时差的简单时区，例如 UTC 本身或北美的 EST 和 EDT 时区等。 "
"支持时间的详细程度取决于具体的应用。 世界各地的时间调整规则往往是政治性多于合理性，经常会发生变化，除了 UTC 之外并没有一个能适合所有应用的标准。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:68
msgid "Constants"
msgstr "常量"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:70
msgid "The :mod:`datetime` module exports the following constants:"
msgstr " :mod:`datetime` 模块包含了以下常量："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:74
msgid ""
"The smallest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MINYEAR` is ``1``."
msgstr ""
":class:`date` 或者 :class:`datetime` 对象允许的最小年份。 常量 :const:`MINYEAR` 是 ``1`` 。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:80
msgid ""
"The largest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MAXYEAR` is ``9999``."
msgstr ""
":class:`date` 或 :class:`datetime` 对象允许最大的年份。常量 :const:`MAXYEAR` 是 ``9999`` 。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:84
msgid "Available Types"
msgstr "有效的类型"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:89
msgid ""
"An idealized naive date, assuming the current Gregorian calendar always was,"
" and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and"
" :attr:`day`."
msgstr ""
"一个理想化的简单型日期，它假设当今的公历在过去和未来永远有效。 属性: :attr:`year`, :attr:`month`, and "
":attr:`day`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:97
msgid ""
"An idealized time, independent of any particular day, assuming that every "
"day has exactly 24\\*60\\*60 seconds.  (There is no notion of \"leap "
"seconds\" here.) Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, "
":attr:`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"一个独立于任何特定日期的理想化时间，它假设每一天都恰好等于 24\\*60\\*60 秒。 （这里没有“闰秒”的概念。） 包含属性: "
":attr:`hour`, :attr:`minute`, :attr:`second`, :attr:`microsecond` 和 "
":attr:`.tzinfo`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:106
msgid ""
"A combination of a date and a time. Attributes: :attr:`year`, :attr:`month`,"
" :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, "
":attr:`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"日期和时间的结合。属性：:attr:`year`, :attr:`month`, :attr:`day`, :attr:`hour`, "
":attr:`minute`, :attr:`second`, :attr:`microsecond`, and :attr:`.tzinfo`."

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:114
msgid ""
"A duration expressing the difference between two :class:`date`, "
":class:`.time`, or :class:`.datetime` instances to microsecond resolution."
msgstr ""
"表示两个 :class:`date` 对象或者 :class:`.time` 对象,或者 :class:`.datetime` "
"对象之间的时间间隔，精确到微秒。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:121
msgid ""
"An abstract base class for time zone information objects. These are used by "
"the :class:`.datetime` and :class:`.time` classes to provide a customizable "
"notion of time adjustment (for example, to account for time zone and/or "
"daylight saving time)."
msgstr ""
"一个描述时区信息对象的抽象基类。 用来给 :class:`.datetime` 和 :class:`.time` "
"类提供自定义的时间调整概念（例如处理时区和/或夏令时）。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:129
msgid ""
"A class that implements the :class:`tzinfo` abstract base class as a fixed "
"offset from the UTC."
msgstr "一个实现了 :class:`tzinfo` 抽象基类的子类，用于表示相对于 世界标准时间（UTC）的偏移量。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:134
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:152
msgid "Objects of these types are immutable."
msgstr "这些类型的对象都是不可变的。 "

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:136
msgid "Subclass relationships::"
msgstr "子类关系 ::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:147
msgid "Common Properties"
msgstr "通用的特征属性"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:149
msgid ""
"The :class:`date`, :class:`.datetime`, :class:`.time`, and :class:`timezone`"
" types share these common features:"
msgstr ""
":class:`date`, :class:`.datetime`, :class:`.time` 和 :class:`timezone` "
"类型共享这些通用特性:"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:153
msgid ""
"Objects of these types are hashable, meaning that they can be used as "
"dictionary keys."
msgstr "这些类型的对象是可哈希的，这意味着它们可被作为字典的键。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:155
msgid ""
"Objects of these types support efficient pickling via the :mod:`pickle` "
"module."
msgstr "这些类型的对象支持通过 :mod:`pickle` 模块进行高效的封存。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:158
msgid "Determining if an Object is Aware or Naive"
msgstr "确定一个对象是感知型还是简单型"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:160
msgid "Objects of the :class:`date` type are always naive."
msgstr ":class:`date`  类型的对象都是简单型的。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:162
msgid ""
"An object of type :class:`.time` or :class:`.datetime` may be aware or "
"naive."
msgstr ":class:`.time` 或 :class:`.datetime` 类型的对象可以是感知型或者简单型。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:164
msgid ""
"A :class:`.datetime` object *d* is aware if both of the following hold:"
msgstr "一个 :class:`.datetime` 对象 *d* 在以下条件同时成立时将是感知型的："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:166
msgid "``d.tzinfo`` is not ``None``"
msgstr "``d.tzinfo`` 不为 ``None``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:167
msgid "``d.tzinfo.utcoffset(d)`` does not return ``None``"
msgstr "``d.tzinfo.utcoffset(d)`` 不返回 ``None``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:169
msgid "Otherwise, *d* is naive."
msgstr "在其他情况下，*d* 将是简单型的。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:171
msgid "A :class:`.time` object *t* is aware if both of the following hold:"
msgstr "一个 :class:`.time` 对象 *t* 在以下条件同时成立时将是感知型的："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:173
msgid "``t.tzinfo`` is not ``None``"
msgstr "``t.tzinfo`` 不为 ``None``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:174
msgid "``t.tzinfo.utcoffset(None)`` does not return ``None``."
msgstr "``t.tzinfo.utcoffset(None)`` 不返回 ``None``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:176
msgid "Otherwise, *t* is naive."
msgstr "在其他情况下，*t* 将是简单型的。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:178
msgid ""
"The distinction between aware and naive doesn't apply to :class:`timedelta` "
"objects."
msgstr "感知型和简单型之间的区别不适用于 :class:`timedelta` 对象。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:184
msgid ":class:`timedelta` Objects"
msgstr ":class:`timedelta` 类对象"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:186
msgid ""
"A :class:`timedelta` object represents a duration, the difference between "
"two dates or times."
msgstr ":class:`timedelta` 对象表示两个 date 或者 time 的时间间隔。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:191
msgid ""
"All arguments are optional and default to ``0``. Arguments may be integers "
"or floats, and may be positive or negative."
msgstr "所有参数都是可选的并且默认为 ``0``。 这些参数可以是整数或者浮点数，也可以是正数或者负数。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:194
msgid ""
"Only *days*, *seconds* and *microseconds* are stored internally. Arguments "
"are converted to those units:"
msgstr "只有 *days*, *seconds* 和 *microseconds* 会存储在内部。 参数单位的换算规则如下："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:197
msgid "A millisecond is converted to 1000 microseconds."
msgstr "1毫秒会转换成1000微秒。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:198
msgid "A minute is converted to 60 seconds."
msgstr "1分钟会转换成60秒。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:199
msgid "An hour is converted to 3600 seconds."
msgstr "1小时会转换成3600秒。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:200
msgid "A week is converted to 7 days."
msgstr "1星期会转换成7天。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:202
msgid ""
"and days, seconds and microseconds are then normalized so that the "
"representation is unique, with"
msgstr "并且 days, seconds, microseconds 会经标准化处理以保证表达方式的唯一性，即："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:205
msgid "``0 <= microseconds < 1000000``"
msgstr "``0 <= microseconds < 1000000``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:206
msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr "``0 <= seconds < 3600*24`` (一天的秒数)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:207
msgid "``-999999999 <= days <= 999999999``"
msgstr "``-999999999 <= days <= 999999999``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:209
msgid ""
"The following example illustrates how any arguments besides *days*, "
"*seconds* and *microseconds* are \"merged\" and normalized into those three "
"resulting attributes::"
msgstr ""
"下面的例子演示了如何对 *days*, *seconds* 和 *microseconds* "
"以外的任意参数执行“合并”操作并标准化为以上三个结果属性::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:227
msgid ""
"If any argument is a float and there are fractional microseconds, the "
"fractional microseconds left over from all arguments are combined and their "
"sum is rounded to the nearest microsecond using round-half-to-even "
"tiebreaker. If no argument is a float, the conversion and normalization "
"processes are exact (no information is lost)."
msgstr ""
"在有任何参数为浮点型并且 microseconds "
"值为小数的情况下，从所有参数中余下的微秒数将被合并，并使用四舍五入偶不入奇的规则将总计值舍入到最接近的整数微秒值。 "
"如果没有任何参数为浮点型的情况下，则转换和标准化过程将是完全精确的（不会丢失信息）。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:234
msgid ""
"If the normalized value of days lies outside the indicated range, "
":exc:`OverflowError` is raised."
msgstr "如果标准化后的 days 数值超过了指定范围，将会抛出 :exc:`OverflowError` 异常。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:237
msgid ""
"Note that normalization of negative values may be surprising at first. For "
"example::"
msgstr "请注意对负数值进行标准化的结果可能会令人感到惊讶。 例如::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:246
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:540
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1043
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1661
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2255
msgid "Class attributes:"
msgstr "类属性："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:250
msgid ""
"The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr " :class:`timedelta` 类对象的最小值为 ``timedelta(-999999999)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:255
msgid ""
"The most positive :class:`timedelta` object, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""
" :class:`timedelta` 类对象的最大值为 ``timedelta(days=999999999, hours=23, "
"minutes=59, seconds=59, microseconds=999999)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:261
msgid ""
"The smallest possible difference between non-equal :class:`timedelta` "
"objects, ``timedelta(microseconds=1)``."
msgstr "两个不相等的 :class:`timedelta` 类对象最小的间隔为 ``timedelta(microseconds=1)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:264
msgid ""
"Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``."
" ``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""
"需要注意的是，因为标准化的缘故，``timedelta.max`` > ``-timedelta.min``，``-timedelta.max`` "
"不可以表示一个 :class:`timedelta` 类对象。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:267
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:558
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1063
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1681
msgid "Instance attributes (read-only):"
msgstr "实例属性（只读）："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:270
msgid "Attribute"
msgstr "属性"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:270
msgid "Value"
msgstr "值"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:272
msgid "``days``"
msgstr "``days``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:272
msgid "Between -999999999 and 999999999 inclusive"
msgstr "-999999999 至 999999999 ，含999999999 "

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:274
msgid "``seconds``"
msgstr "``seconds``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:274
msgid "Between 0 and 86399 inclusive"
msgstr "0 至 86399，包含86399"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:276
msgid "``microseconds``"
msgstr "``microseconds``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:276
msgid "Between 0 and 999999 inclusive"
msgstr "0 至 999999，包含999999"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:279
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:575
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1116
msgid "Supported operations:"
msgstr "支持的运算："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:284
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:578
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1119
msgid "Operation"
msgstr "运算"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:284
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:578
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1119
msgid "Result"
msgstr "结果"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:286
msgid "``t1 = t2 + t3``"
msgstr "``t1 = t2 + t3``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:286
msgid ""
"Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are"
" true. (1)"
msgstr "*t2* 和 *t3* 的和。 运算后 *t1*-*t2* == *t3* and *t1*-*t3* == *t2* 必为真值。(1)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:289
msgid "``t1 = t2 - t3``"
msgstr "``t1 = t2 - t3``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:289
msgid ""
"Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1*"
" + *t3* are true. (1)(6)"
msgstr ""
"*t2* 减 *t3* 的差。 运算后 *t1* == *t2* - *t3* and *t2* == *t1* + *t3* 必为真值。 (1)(6)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:293
msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr "``t1 = t2 * i or t1 = i * t2``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:293
msgid ""
"Delta multiplied by an integer. Afterwards *t1* // i == *t2* is true, "
"provided ``i != 0``."
msgstr "乘以一个整数。运算后假如 ``i != 0`` 则 *t1* // i == *t2* 必为真值。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:297
msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr " 通常情况下， *t1* \\* i == *t1* \\* (i-1) + *t1* 为真值。 (1)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:300
msgid "``t1 = t2 * f or t1 = f * t2``"
msgstr "``t1 = t2 * f or t1 = f * t2``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:300
msgid ""
"Delta multiplied by a float. The result is rounded to the nearest multiple "
"of timedelta.resolution using round-half-to-even."
msgstr "乘以一个浮点数，结果会被舍入到 timedelta 最接近的整数倍。 精度使用四舍五偶入奇不入规则。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:304
msgid "``f = t2 / t3``"
msgstr "``f = t2 / t3``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:304
msgid ""
"Division (3) of overall duration *t2* by interval unit *t3*. Returns a "
":class:`float` object."
msgstr "总时间 *t2* 除以间隔单位 *t3* (3)。 返回一个 :class:`float` 对象。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:308
msgid "``t1 = t2 / f or t1 = t2 / i``"
msgstr "``t1 = t2 / f or t1 = t2 / i``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:308
msgid ""
"Delta divided by a float or an int. The result is rounded to the nearest "
"multiple of timedelta.resolution using round-half-to-even."
msgstr "除以一个浮点数或整数。 结果会被舍入到 timedelta 最接近的整数倍。 精度使用四舍五偶入奇不入规则。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:312
msgid "``t1 = t2 // i`` or ``t1 = t2 // t3``"
msgstr "``t1 = t2 // i`` or ``t1 = t2 // t3``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:312
msgid ""
"The floor is computed and the remainder (if any) is thrown away. In the "
"second case, an integer is returned. (3)"
msgstr "计算底数，其余部分（如果有）将被丢弃。在第二种情况下，将返回整数。 （3）"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:316
msgid "``t1 = t2 % t3``"
msgstr "``t1 = t2 % t3``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:316
msgid "The remainder is computed as a :class:`timedelta` object. (3)"
msgstr "余数为一个 :class:`timedelta` 对象。(3)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:319
msgid "``q, r = divmod(t1, t2)``"
msgstr "``q, r = divmod(t1, t2)``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:319
msgid ""
"Computes the quotient and the remainder: ``q = t1 // t2`` (3) and ``r = t1 %"
" t2``. q is an integer and r is a :class:`timedelta` object."
msgstr ""
"通过 : ``q = t1 // t2`` (3) and ``r = t1 % t2`` 计算出商和余数。q是一个整数，r是一个 "
":class:`timedelta` 对象。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:324
msgid "``+t1``"
msgstr "``+t1``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:324
msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr "返回一个相同数值的 :class:`timedelta` 对象。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:327
msgid "``-t1``"
msgstr "``-t1``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:327
msgid ""
"equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, "
"-*t1.microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""
"等价于 :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1.microseconds*), 和 "
"*t1*\\* -1. (1)(4)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:332
msgid "``abs(t)``"
msgstr "``abs(t)``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:332
msgid ""
"equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``."
" (2)"
msgstr "当 ``t.days >= 0``时等于 +\\ *t*, 当 ``t.days < 0`` 时 -*t* 。 (2)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:335
msgid "``str(t)``"
msgstr "``str(t)``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:335
msgid ""
"Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is"
" negative for negative ``t``. (5)"
msgstr ""
"返回一个形如 ``[D day[s], ][H]H:MM:SS[.UUUUUU]`` 的字符串，当 ``t`` 为负数的时候，  D 也为负数。 (5)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:339
msgid "``repr(t)``"
msgstr "``repr(t)``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:339
msgid ""
"Returns a string representation of the :class:`timedelta` object as a "
"constructor call with canonical attribute values."
msgstr "返回一个 :class:`timedelta` 对象的字符串表示形式，作为附带正规属性值的构造器调用。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:345
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:592
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2467
msgid "Notes:"
msgstr "注释:"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:348
msgid "This is exact but may overflow."
msgstr "结果正确，但可能会溢出。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:351
msgid "This is exact and cannot overflow."
msgstr "结果正确，不会溢出。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:354
msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr "除以0将会抛出异常  :exc:`ZeroDivisionError` 。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:357
msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr "-*timedelta.max* 不是一个 :class:`timedelta` 类对象。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:360
msgid ""
"String representations of :class:`timedelta` objects are normalized "
"similarly to their internal representation. This leads to somewhat unusual "
"results for negative timedeltas. For example::"
msgstr ":class:`timedelta` 对象的字符串表示形式类似于其内部表示形式被规范化。对于负时间增量，这会导致一些不寻常的结果。例如::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:370
msgid ""
"The expression ``t2 - t3`` will always be equal to the expression ``t2 + "
"(-t3)`` except when t3 is equal to ``timedelta.max``; in that case the "
"former will produce a result while the latter will overflow."
msgstr ""
"表达式 ``t2 - t3`` 通常与 ``t2 + (-t3)`` 是等价的，除非 t3 等于 ``timedelta.max``; "
"在这种情况下前者会返回结果，而后者则会溢出。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:374
msgid ""
"In addition to the operations listed above, :class:`timedelta` objects "
"support certain additions and subtractions with :class:`date` and "
":class:`.datetime` objects (see below)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:378
msgid ""
"Floor division and true division of a :class:`timedelta` object by another "
":class:`timedelta` object are now supported, as are remainder operations and"
" the :func:`divmod` function. True division and multiplication of a "
":class:`timedelta` object by a :class:`float` object are now supported."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:385
msgid ""
"Comparisons of :class:`timedelta` objects are supported, with some caveats."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:387
msgid ""
"The comparisons ``==`` or ``!=`` *always* return a :class:`bool`, no matter "
"the type of the compared object::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:398
msgid ""
"For all other comparisons (such as ``<`` and ``>``), when a "
":class:`timedelta` object is compared to an object of a different type, "
":exc:`TypeError` is raised::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:409
msgid ""
"In Boolean contexts, a :class:`timedelta` object is considered to be true if"
" and only if it isn't equal to ``timedelta(0)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:412
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:621
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1190
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1778
msgid "Instance methods:"
msgstr "实例方法："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:416
msgid ""
"Return the total number of seconds contained in the duration. Equivalent to "
"``td / timedelta(seconds=1)``. For interval units other than seconds, use "
"the division form directly (e.g. ``td / timedelta(microseconds=1)``)."
msgstr ""
"返回时间间隔包含了多少秒。造价于 ``td / timedelta(seconds=1)``。对于其它单位可以直接使用除法的形式 (例如  ``td /"
" timedelta(microseconds=1)``)。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:420
msgid ""
"Note that for very large time intervals (greater than 270 years on most "
"platforms) this method will lose microsecond accuracy."
msgstr "需要注意的是，时间间隔较大时，这个方法的结果中的微秒将会失真（大多数平台上大于270年视为一个较大的时间间隔）。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:426
msgid "Examples of usage: :class:`timedelta`"
msgstr "class:`timedelta` 用法示例"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:428
msgid "An additional example of normalization::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:440
msgid "Examples of :class:`timedelta` arithmetic::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:459
msgid ":class:`date` Objects"
msgstr ":class:`date` 对象"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:461
msgid ""
"A :class:`date` object represents a date (year, month and day) in an "
"idealized calendar, the current Gregorian calendar indefinitely extended in "
"both directions."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:465
msgid ""
"January 1 of year 1 is called day number 1, January 2 of year 1 is called "
"day number 2, and so on. [#]_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:470
msgid ""
"All arguments are required. Arguments must be integers, in the following "
"ranges:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:473
msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr "``MINYEAR <= year <= MAXYEAR``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:474
msgid "``1 <= month <= 12``"
msgstr "``1 <= month <= 12``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:475
msgid "``1 <= day <= number of days in the given month and year``"
msgstr "``1 <= 日期 <= 给定年月对应的天数``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:477
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:835
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr "如果参数不在这些范围内，则抛出 :exc:`ValueError` 异常。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:480
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:840
msgid "Other constructors, all class methods:"
msgstr "其它构造器，所有的类方法："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:484
msgid "Return the current local date."
msgstr "返回当前的本地日期。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:486
msgid "This is equivalent to ``date.fromtimestamp(time.time())``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:490
msgid ""
"Return the local date corresponding to the POSIX timestamp, such as is "
"returned by :func:`time.time`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:493
msgid ""
"This may raise :exc:`OverflowError`, if the timestamp is out of the range of"
" values supported by the platform C :c:func:`localtime` function, and "
":exc:`OSError` on :c:func:`localtime` failure. It's common for this to be "
"restricted to years from 1970 through 2038. Note that on non-POSIX systems "
"that include leap seconds in their notion of a timestamp, leap seconds are "
"ignored by :meth:`fromtimestamp`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:500
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on "
":c:func:`localtime` failure."
msgstr ""
"引发 :exc:`OverflowError` 而不是 :exc:`ValueError`，如果时间戳数值超出所在平台 C "
":c:func:`localtime` 函数的支持范围的话，并会在 :c:func:`localtime` 出错时引发 :exc:`OSError` "
"而不是 :exc:`ValueError`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:509
msgid ""
"Return the date corresponding to the proleptic Gregorian ordinal, where "
"January 1 of year 1 has ordinal 1."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:512
msgid ""
":exc:`ValueError` is raised unless ``1 <= ordinal <= date.max.toordinal()``."
" For any date *d*, ``date.fromordinal(d.toordinal()) == d``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:519
msgid ""
"Return a :class:`date` corresponding to a *date_string* given in the format "
"``YYYY-MM-DD``::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:526
msgid ""
"This is the inverse of :meth:`date.isoformat`. It only supports the format "
"``YYYY-MM-DD``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:534
msgid ""
"Return a :class:`date` corresponding to the ISO calendar date specified by "
"year, week and day. This is the inverse of the function "
":meth:`date.isocalendar`."
msgstr ""
"返回指定 year, week 和 day 所对应 ISO 历法日期的 :class:`date`。 这是函数 "
":meth:`date.isocalendar` 的逆操作。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:544
msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr "最小的日期 ``date(MINYEAR, 1, 1)`` 。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:549
msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr "最大的日期 ，``date(MAXYEAR, 12, 31)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:554
msgid ""
"The smallest possible difference between non-equal date objects, "
"``timedelta(days=1)``."
msgstr "两个日期对象的最小间隔，``timedelta(days=1)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:562
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1067
msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr "在 :const:`MINYEAR` 和 :const:`MAXYEAR` 之间，包含边界。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:567
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1072
msgid "Between 1 and 12 inclusive."
msgstr "1 至 12（含）"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:572
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1077
msgid "Between 1 and the number of days in the given month of the given year."
msgstr "返回1到指定年月的天数间的数字。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:580
msgid "``date2 = date1 + timedelta``"
msgstr "``date2 = date1 + timedelta``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:580
msgid "*date2* is ``timedelta.days`` days removed from *date1*. (1)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:583
msgid "``date2 = date1 - timedelta``"
msgstr "``date2 = date1 - timedelta``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:583
msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr "计算 *date2* 的值使得 ``date2 + timedelta == date1``。 (2)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:586
msgid "``timedelta = date1 - date2``"
msgstr "``timedelta = date1 - date2``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:586
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1125
msgid "\\(3)"
msgstr "\\(3)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:588
msgid "``date1 < date2``"
msgstr "``date1 < date2``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:588
msgid ""
"*date1* is considered less than *date2* when *date1* precedes *date2* in "
"time. (4)"
msgstr "如果 *date1* 的时间在 *date2* 之前则认为 *date1* 小于 *date2* 。 (4)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:595
msgid ""
"*date2* is moved forward in time if ``timedelta.days > 0``, or backward if "
"``timedelta.days < 0``. Afterward ``date2 - date1 == timedelta.days``. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. "
":exc:`OverflowError` is raised if ``date2.year`` would be smaller than "
":const:`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:602
msgid "``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr "``timedelta.seconds`` 和 ``timedelta.microseconds`` 会被忽略。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:605
msgid ""
"This is exact, and cannot overflow. timedelta.seconds and "
"timedelta.microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:609
msgid ""
"In other words, ``date1 < date2`` if and only if ``date1.toordinal() < "
"date2.toordinal()``. Date comparison raises :exc:`TypeError` if the other "
"comparand isn't also a :class:`date` object. However, ``NotImplemented`` is "
"returned instead if the other comparand has a :meth:`timetuple` attribute. "
"This hook gives other kinds of date objects a chance at implementing mixed-"
"type comparison. If not, when a :class:`date` object is compared to an "
"object of a different type, :exc:`TypeError` is raised unless the comparison"
" is ``==`` or ``!=``. The latter cases return :const:`False` or "
":const:`True`, respectively."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:619
msgid ""
"In Boolean contexts, all :class:`date` objects are considered to be true."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:625
msgid ""
"Return a date with the same value, except for those parameters given new "
"values by whichever keyword arguments are specified."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:628
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1821
msgid "Example::"
msgstr "示例::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:638
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1303
msgid ""
"Return a :class:`time.struct_time` such as returned by "
":func:`time.localtime`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:640
msgid "The hours, minutes and seconds are 0, and the DST flag is -1."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:642
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1305
msgid "``d.timetuple()`` is equivalent to::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:646
msgid ""
"where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the "
"day number within the current year starting with ``1`` for January 1st."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:652
msgid ""
"Return the proleptic Gregorian ordinal of the date, where January 1 of year "
"1 has ordinal 1. For any :class:`date` object *d*, "
"``date.fromordinal(d.toordinal()) == d``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:659
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6."
" For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also "
":meth:`isoweekday`."
msgstr ""
"返回一个整数代表星期几，星期一为0，星期天为6。例如， ``date(2002, 12, 4).weekday() == 2``，表示的是星期三。参阅 "
":meth:`isoweekday`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:666
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7."
" For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also"
" :meth:`weekday`, :meth:`isocalendar`."
msgstr ""
"返回一个整数代表星期几，星期一为1，星期天为7。例如：``date(2002, 12, 4).isoweekday() == 3``,表示星期三。参见 "
":meth:`weekday`, :meth:`isocalendar`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:673
msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday)."
msgstr "返回一个三元元组，(ISO year, ISO week number, ISO weekday) 。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:675
msgid ""
"The ISO calendar is a widely used variant of the Gregorian calendar. [#]_"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:677
msgid ""
"The ISO year consists of 52 or 53 full weeks, and where a week starts on a "
"Monday and ends on a Sunday. The first week of an ISO year is the first "
"(Gregorian) calendar week of a year containing a Thursday. This is called "
"week number 1, and the ISO year of that Thursday is the same as its "
"Gregorian year."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:682
msgid ""
"For example, 2004 begins on a Thursday, so the first week of ISO year 2004 "
"begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:693
msgid ""
"Return a string representing the date in ISO 8601 format, ``YYYY-MM-DD``::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:699
msgid "This is the inverse of :meth:`date.fromisoformat`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:703
msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr "对于日期对象 *d*, ``str(d)`` 等价于 ``d.isoformat()`` 。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:708
msgid "Return a string representing the date::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:714
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1489
msgid "``d.ctime()`` is equivalent to::"
msgstr "``d.ctime()`` 等效于::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:718
msgid ""
"on platforms where the native C :c:func:`ctime` function (which "
":func:`time.ctime` invokes, but which :meth:`date.ctime` does not invoke) "
"conforms to the C standard."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:725
msgid ""
"Return a string representing the date, controlled by an explicit format "
"string. Format codes referring to hours, minutes or seconds will see 0 "
"values. For a complete list of formatting directives, see :ref:`strftime-"
"strptime-behavior`."
msgstr ""
"返回一个由显式格式字符串所指明的代表日期的字符串。 表示时、分或秒的格式代码值将为 0。 要获取格式指令的完整列表请参阅 :ref:`strftime-"
"strptime-behavior`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:733
msgid ""
"Same as :meth:`.date.strftime`. This makes it possible to specify a format "
"string for a :class:`.date` object in :ref:`formatted string literals "
"<f-strings>` and when using :meth:`str.format`. For a complete list of "
"formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""
"与 :meth:`.date.strftime` 相同。 此方法使得为 :class:`.date` 对象指定以 :ref:`格式化字符串字面值 "
"<f-strings>` 表示的格式化字符串以及使用 :meth:`str.format` 进行格式化成为可能。 要获取格式指令的完整列表，请参阅 "
":ref:`strftime-strptime-behavior`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:740
msgid "Examples of Usage: :class:`date`"
msgstr "class:`date` 用法示例"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:742
msgid "Example of counting days to an event::"
msgstr "计算距离特定事件天数的例子::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:760
msgid "More examples of working with :class:`date`:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:809
msgid ":class:`.datetime` Objects"
msgstr ":class:`.datetime` 对象"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:811
msgid ""
"A :class:`.datetime` object is a single object containing all the "
"information from a :class:`date` object and a :class:`.time` object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:814
msgid ""
"Like a :class:`date` object, :class:`.datetime` assumes the current "
"Gregorian calendar extended in both directions; like a :class:`.time` "
"object, :class:`.datetime` assumes there are exactly 3600\\*24 seconds in "
"every day."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:818
msgid "Constructor:"
msgstr "构造器 ："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:822
msgid ""
"The *year*, *month* and *day* arguments are required. *tzinfo* may be "
"``None``, or an instance of a :class:`tzinfo` subclass. The remaining "
"arguments must be integers in the following ranges:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:826
msgid "``MINYEAR <= year <= MAXYEAR``,"
msgstr "``MINYEAR <= year <= MAXYEAR``,"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:827
msgid "``1 <= month <= 12``,"
msgstr "``1 <= month <= 12``,"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:828
msgid "``1 <= day <= number of days in the given month and year``,"
msgstr "``1 <= day <= 指定年月的天数``,"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:829
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1652
msgid "``0 <= hour < 24``,"
msgstr "``0 <= hour < 24``,"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:830
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1653
msgid "``0 <= minute < 60``,"
msgstr "``0 <= minute < 60``,"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:831
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1654
msgid "``0 <= second < 60``,"
msgstr "``0 <= second < 60``,"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:832
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1655
msgid "``0 <= microsecond < 1000000``,"
msgstr "``0 <= microsecond < 1000000``,"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:833
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1656
msgid "``fold in [0, 1]``."
msgstr "``fold in [0, 1]``."

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:837
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1224
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1788
msgid "Added the ``fold`` argument."
msgstr "增加了 ``fold`` 参数。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:844
msgid "Return the current local datetime, with :attr:`.tzinfo` ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:846
msgid "Equivalent to::"
msgstr "等价于::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:850
msgid "See also :meth:`now`, :meth:`fromtimestamp`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:852
msgid ""
"This method is functionally equivalent to :meth:`now`, but without a ``tz`` "
"parameter."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:857
msgid "Return the current local date and time."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:859
msgid ""
"If optional argument *tz* is ``None`` or not specified, this is like "
":meth:`today`, but, if possible, supplies more precision than can be gotten "
"from going through a :func:`time.time` timestamp (for example, this may be "
"possible on platforms supplying the C :c:func:`gettimeofday` function)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:865
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the current date and time are converted to *tz*’s time zone."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:868
msgid "This function is preferred over :meth:`today` and :meth:`utcnow`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:873
msgid "Return the current UTC date and time, with :attr:`.tzinfo` ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:875
msgid ""
"This is like :meth:`now`, but returns the current UTC date and time, as a "
"naive :class:`.datetime` object. An aware current UTC datetime can be "
"obtained by calling ``datetime.now(timezone.utc)``. See also :meth:`now`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:881
msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in"
" UTC. As such, the recommended way to create an object representing the "
"current time in UTC is by calling ``datetime.now(timezone.utc)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:889
msgid ""
"Return the local date and time corresponding to the POSIX timestamp, such as"
" is returned by :func:`time.time`. If optional argument *tz* is ``None`` or "
"not specified, the timestamp is converted to the platform's local date and "
"time, and the returned :class:`.datetime` object is naive."
msgstr ""
"返回对应于 POSIX 时间戳例如 :func:`time.time` 的返回值的本地日期和时间。 如果可选参数 *tz* 为 ``None`` "
"或未指定，时间戳会被转换为所在平台的本地日期和时间，返回的 :class:`.datetime` 对象将为天真型。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:894
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the timestamp is converted to *tz*’s time zone."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:897
msgid ""
":meth:`fromtimestamp` may raise :exc:`OverflowError`, if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions, and :exc:`OSError` on :c:func:`localtime` or "
":c:func:`gmtime` failure. It's common for this to be restricted to years in "
"1970 through 2038. Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by "
":meth:`fromtimestamp`, and then it's possible to have two timestamps "
"differing by a second that yield identical :class:`.datetime` objects. This "
"method is preferred over :meth:`utcfromtimestamp`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:908
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions. Raise :exc:`OSError` instead of "
":exc:`ValueError` on :c:func:`localtime` or :c:func:`gmtime` failure."
msgstr ""
"引发 :exc:`OverflowError` 而不是 :exc:`ValueError`，如果时间戳数值超出所在平台 C "
":c:func:`localtime` 或 :c:func:`gmtime` 函数的支持范围的话。 并会在 :c:func:`localtime` 或 "
":c:func:`gmtime` 出错时引发 :exc:`OSError` 而不是 :exc:`ValueError`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:915
msgid ""
":meth:`fromtimestamp` may return instances with :attr:`.fold` set to 1."
msgstr ":meth:`fromtimestamp` 可能返回 :attr:`.fold` 值设为 1 的实例。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:920
msgid ""
"Return the UTC :class:`.datetime` corresponding to the POSIX timestamp, with"
" :attr:`.tzinfo` ``None``.  (The resulting object is naive.)"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:923
msgid ""
"This may raise :exc:`OverflowError`, if the timestamp is out of the range of"
" values supported by the platform C :c:func:`gmtime` function, and "
":exc:`OSError` on :c:func:`gmtime` failure. It's common for this to be "
"restricted to years in 1970 through 2038."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:928
msgid ""
"To get an aware :class:`.datetime` object, call :meth:`fromtimestamp`::"
msgstr "要得到一个感知型 :class:`.datetime` 对象，应调用 :meth:`fromtimestamp`::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:932
msgid ""
"On the POSIX compliant platforms, it is equivalent to the following "
"expression::"
msgstr "在 POSIX 兼容的平台上，它等价于以下表达式::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:937
msgid ""
"except the latter formula always supports the full years range: between "
":const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr "不同之处在于后一种形式总是支持完整年份范围：从 :const:`MINYEAR` 到 :const:`MAXYEAR` 的开区间。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:942
msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in"
" UTC. As such, the recommended way to create an object representing a "
"specific timestamp in UTC is by calling ``datetime.fromtimestamp(timestamp, "
"tz=timezone.utc)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:948
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`gmtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on "
":c:func:`gmtime` failure."
msgstr ""
"引发 :exc:`OverflowError` 而不是 :exc:`ValueError`，如果时间戳数值超出所在平台 C "
":c:func:`gmtime` 函数的支持范围的话。 并会在 :c:func:`gmtime` 出错时引发 :exc:`OSError` 而不是 "
":exc:`ValueError`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:957
msgid ""
"Return the :class:`.datetime` corresponding to the proleptic Gregorian "
"ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is "
"raised unless ``1 <= ordinal <= datetime.max.toordinal()``. The hour, "
"minute, second and microsecond of the result are all 0, and :attr:`.tzinfo` "
"is ``None``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:965
msgid ""
"Return a new :class:`.datetime` object whose date components are equal to "
"the given :class:`date` object's, and whose time components are equal to the"
" given :class:`.time` object's. If the *tzinfo* argument is provided, its "
"value is used to set the :attr:`.tzinfo` attribute of the result, otherwise "
"the :attr:`~.time.tzinfo` attribute of the *time* argument is used."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:972
msgid ""
"For any :class:`.datetime` object *d*, ``d == datetime.combine(d.date(), "
"d.time(), d.tzinfo)``. If date is a :class:`.datetime` object, its time "
"components and :attr:`.tzinfo` attributes are ignored."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:977
msgid "Added the *tzinfo* argument."
msgstr "增加了 *tzinfo* 参数。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:983
msgid ""
"Return a :class:`.datetime` corresponding to a *date_string* in one of the "
"formats emitted by :meth:`date.isoformat` and :meth:`datetime.isoformat`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:986
msgid "Specifically, this function supports strings in the format:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:992
msgid "where ``*`` can match any single character."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:996
msgid ""
"This does *not* support parsing arbitrary ISO 8601 strings - it is only "
"intended as the inverse operation of :meth:`datetime.isoformat`. A more "
"full-featured ISO 8601 parser, ``dateutil.parser.isoparse`` is available in "
"the third-party package `dateutil "
"<https://dateutil.readthedocs.io/en/stable/parser.html#dateutil.parser.isoparse>`__."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1001
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1418
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1765
msgid "Examples::"
msgstr "示例::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1020
msgid ""
"Return a :class:`.datetime` corresponding to the ISO calendar date specified"
" by year, week and day. The non-date components of the datetime are "
"populated with their normal default values. This is the inverse of the "
"function :meth:`datetime.isocalendar`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1029
msgid ""
"Return a :class:`.datetime` corresponding to *date_string*, parsed according"
" to *format*."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1032
msgid "This is equivalent to::"
msgstr "这相当于::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1036
msgid ""
":exc:`ValueError` is raised if the date_string and format can't be parsed by"
" :func:`time.strptime` or if it returns a value which isn't a time tuple. "
"For a complete list of formatting directives, see :ref:`strftime-strptime-"
"behavior`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1047
msgid ""
"The earliest representable :class:`.datetime`, ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)``."
msgstr "最早的可表示 :class:`.datetime`，``datetime(MINYEAR, 1, 1, tzinfo=None)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1053
msgid ""
"The latest representable :class:`.datetime`, ``datetime(MAXYEAR, 12, 31, 23,"
" 59, 59, 999999, tzinfo=None)``."
msgstr ""
"最晚的可表示 :class:`.datetime`，``datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, "
"tzinfo=None)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1059
msgid ""
"The smallest possible difference between non-equal :class:`.datetime` "
"objects, ``timedelta(microseconds=1)``."
msgstr "两个不相等的 :class:`.datetime` 对象之间可能的最小间隔，``timedelta(microseconds=1)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1082
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1685
msgid "In ``range(24)``."
msgstr "取值范围是 ``range(24)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1087
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1092
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1690
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1695
msgid "In ``range(60)``."
msgstr "取值范围是 ``range(60)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1097
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1700
msgid "In ``range(1000000)``."
msgstr "取值范围是 ``range(1000000)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1102
msgid ""
"The object passed as the *tzinfo* argument to the :class:`.datetime` "
"constructor, or ``None`` if none was passed."
msgstr "作为 *tzinfo* 参数被传给 :class:`.datetime` 构造器的对象，如果没有传入值则为 ``None``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1108
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1711
msgid ""
"In ``[0, 1]``. Used to disambiguate wall times during a repeated interval. "
"(A repeated interval occurs when clocks are rolled back at the end of "
"daylight saving time or when the UTC offset for the current zone is "
"decreased for political reasons.) The value 0 (1) represents the earlier "
"(later) of the two moments with the same wall time representation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1121
msgid "``datetime2 = datetime1 + timedelta``"
msgstr "``datetime2 = datetime1 + timedelta``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1121
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2303
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2308
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2320
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2325
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2385
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2390
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2394
msgid "\\(1)"
msgstr "\\(1)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1123
msgid "``datetime2 = datetime1 - timedelta``"
msgstr "``datetime2 = datetime1 - timedelta``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1123
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2336
msgid "\\(2)"
msgstr "\\(2)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1125
msgid "``timedelta = datetime1 - datetime2``"
msgstr "``timedelta = datetime1 - datetime2``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1127
msgid "``datetime1 < datetime2``"
msgstr "``datetime1 < datetime2``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1127
msgid "Compares :class:`.datetime` to :class:`.datetime`. (4)"
msgstr "比较 :class:`.datetime` 与 :class:`.datetime`。 (4)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1132
msgid ""
"datetime2 is a duration of timedelta removed from datetime1, moving forward "
"in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0. "
"The result has the same :attr:`~.datetime.tzinfo` attribute as the input "
"datetime, and datetime2 - datetime1 == timedelta after. :exc:`OverflowError`"
" is raised if datetime2.year would be smaller than :const:`MINYEAR` or "
"larger than :const:`MAXYEAR`. Note that no time zone adjustments are done "
"even if the input is an aware object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1141
msgid ""
"Computes the datetime2 such that datetime2 + timedelta == datetime1. As for "
"addition, the result has the same :attr:`~.datetime.tzinfo` attribute as the"
" input datetime, and no time zone adjustments are done even if the input is "
"aware."
msgstr ""
"计算 datetime2 使得 datetime2 + timedelta == datetime1。 与相加操作一样，结果具有与输入的 "
"datetime 相同的 :attr:`~.datetime.tzinfo` 属性，即使输入的是一个感知型对象，该方法也不会进行时区调整。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1146
msgid ""
"Subtraction of a :class:`.datetime` from a :class:`.datetime` is defined "
"only if both operands are naive, or if both are aware. If one is aware and "
"the other is naive, :exc:`TypeError` is raised."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1150
msgid ""
"If both are naive, or both are aware and have the same "
":attr:`~.datetime.tzinfo` attribute, the :attr:`~.datetime.tzinfo` "
"attributes are ignored, and the result is a :class:`timedelta` object *t* "
"such that ``datetime2 + t == datetime1``. No time zone adjustments are done "
"in this case."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1155
msgid ""
"If both are aware and have different :attr:`~.datetime.tzinfo` attributes, "
"``a-b`` acts as if *a* and *b* were first converted to naive UTC datetimes "
"first. The result is ``(a.replace(tzinfo=None) - a.utcoffset()) - "
"(b.replace(tzinfo=None) - b.utcoffset())`` except that the implementation "
"never overflows."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1161
msgid ""
"*datetime1* is considered less than *datetime2* when *datetime1* precedes "
"*datetime2* in time."
msgstr "当 *datetime1* 的时间在 *datetime2* 之前则认为 *datetime1* 小于 *datetime2*。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1164
msgid ""
"If one comparand is naive and the other is aware, :exc:`TypeError` is raised"
" if an order comparison is attempted. For equality comparisons, naive "
"instances are never equal to aware instances."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1168
msgid ""
"If both comparands are aware, and have the same :attr:`~.datetime.tzinfo` "
"attribute, the common :attr:`~.datetime.tzinfo` attribute is ignored and the"
" base datetimes are compared. If both comparands are aware and have "
"different :attr:`~.datetime.tzinfo` attributes, the comparands are first "
"adjusted by subtracting their UTC offsets (obtained from "
"``self.utcoffset()``)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1174
msgid ""
"Equality comparisons between aware and naive :class:`.datetime` instances "
"don't raise :exc:`TypeError`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1180
msgid ""
"In order to stop comparison from falling back to the default scheme of "
"comparing object addresses, datetime comparison normally raises "
":exc:`TypeError` if the other comparand isn't also a :class:`.datetime` "
"object. However, ``NotImplemented`` is returned instead if the other "
"comparand has a :meth:`timetuple` attribute. This hook gives other kinds of "
"date objects a chance at implementing mixed-type comparison. If not, when a "
":class:`.datetime` object is compared to an object of a different type, "
":exc:`TypeError` is raised unless the comparison is ``==`` or ``!=``. The "
"latter cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1194
msgid "Return :class:`date` object with same year, month and day."
msgstr "返回具有同样 year, month 和 day 值的 :class:`date` 对象。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1199
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond and"
" fold. :attr:`.tzinfo` is ``None``. See also method :meth:`timetz`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1202
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1211
msgid "The fold value is copied to the returned :class:`.time` object."
msgstr "fold 值会被复制给返回的 :class:`.time` 对象。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1208
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond, "
"fold, and tzinfo attributes. See also method :meth:`time`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1219
msgid ""
"Return a datetime with the same attributes, except for those attributes "
"given new values by whichever keyword arguments are specified. Note that "
"``tzinfo=None`` can be specified to create a naive datetime from an aware "
"datetime with no conversion of date and time data."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1230
msgid ""
"Return a :class:`.datetime` object with new :attr:`.tzinfo` attribute *tz*, "
"adjusting the date and time data so the result is the same UTC time as "
"*self*, but in *tz*'s local time."
msgstr ""
"返回一个具有新的 :attr:`.tzinfo` 属性 *tz* 的 :class:`.datetime` 对象，并会调整日期和时间数据使得结果对应的 "
"UTC 时间与 *self* 相同，但为 *tz* 时区的本地时间。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1234
msgid ""
"If provided, *tz* must be an instance of a :class:`tzinfo` subclass, and its"
" :meth:`utcoffset` and :meth:`dst` methods must not return ``None``. If "
"*self* is naive, it is presumed to represent time in the system timezone."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1238
msgid ""
"If called without arguments (or with ``tz=None``) the system local timezone "
"is assumed for the target timezone. The ``.tzinfo`` attribute of the "
"converted datetime instance will be set to an instance of :class:`timezone` "
"with the zone name and offset obtained from the OS."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1243
msgid ""
"If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no "
"adjustment of date or time data is performed. Else the result is local time "
"in the timezone *tz*, representing the same UTC time as *self*:  after "
"``astz = dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will have the same"
" date and time data as ``dt - dt.utcoffset()``."
msgstr ""
"如果 ``self.tzinfo`` 为 *tz*，``self.astimezone(tz)`` 等于 *self*: 不会对日期或时间数据进行调整。"
" 否则结果为 *tz* 时区的本地时间，代表的 UTC 时间与 *self* 相同：在 ``astz = dt.astimezone(tz)`` "
"之后，``astz - astz.utcoffset()`` 将具有与 ``dt - dt.utcoffset()`` 相同的日期和时间数据。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1249
msgid ""
"If you merely want to attach a time zone object *tz* to a datetime *dt* "
"without adjustment of date and time data, use ``dt.replace(tzinfo=tz)``. If "
"you merely want to remove the time zone object from an aware datetime *dt* "
"without conversion of date and time data, use ``dt.replace(tzinfo=None)``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1254
msgid ""
"Note that the default :meth:`tzinfo.fromutc` method can be overridden in a "
":class:`tzinfo` subclass to affect the result returned by "
":meth:`astimezone`. Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""
"请注意默认的 :meth:`tzinfo.fromutc` 方法在 :class:`tzinfo` 的子类中可以被重载，从而影响 "
":meth:`astimezone` 的返回结果。 如果忽略出错的情况，:meth:`astimezone` 的行为就类似于::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1266
msgid "*tz* now can be omitted."
msgstr "*tz* 现在可以被省略。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1269
msgid ""
"The :meth:`astimezone` method can now be called on naive instances that are "
"presumed to represent system local time."
msgstr ":meth:`astimezone` 方法可以由简单型实例调用，这将假定其表示本地时间。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1276
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns "
"``self.tzinfo.utcoffset(self)``, and raises an exception if the latter "
"doesn't return ``None`` or a :class:`timedelta` object with magnitude less "
"than one day."
msgstr ""
"如果 :attr:`.tzinfo` 为 ``None``，则返回 ``None``，否则返回 "
"``self.tzinfo.utcoffset(self)``，并且在后者不返回 ``None`` 或者一个幅度小于一天的 "
":class:`timedelta` 对象时将引发异常。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1280
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1863
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1969
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2215
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2227
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2523
msgid "The UTC offset is not restricted to a whole number of minutes."
msgstr "UTC 时差不再限制为一个整数分钟值。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1286
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns "
"``self.tzinfo.dst(self)``, and raises an exception if the latter doesn't "
"return ``None`` or a :class:`timedelta` object with magnitude less than one "
"day."
msgstr ""
"如果 :attr:`.tzinfo` 为 ``None``，则返回 ``None``，否则返回 "
"``self.tzinfo.dst(self)``，并且在后者不返回 ``None`` 或者一个幅度小于一天的 :class:`timedelta` "
"对象时将引发异常。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1290
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1873
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2023
msgid "The DST offset is not restricted to a whole number of minutes."
msgstr "DST 差值不再限制为一个整数分钟值。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1296
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns "
"``self.tzinfo.tzname(self)``, raises an exception if the latter doesn't "
"return ``None`` or a string object,"
msgstr ""
"如果 :attr:`.tzinfo` 为 ``None``，则返回 ``None``，否则返回 "
"``self.tzinfo.tzname(self)``，如果后者不返回 ``None`` 或者一个字符串对象则将引发异常。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1311
msgid ""
"where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the "
"day number within the current year starting with ``1`` for January 1st. The "
":attr:`tm_isdst` flag of the result is set according to the :meth:`dst` "
"method: :attr:`.tzinfo` is ``None`` or :meth:`dst` returns ``None``, "
":attr:`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero "
"value, :attr:`tm_isdst` is set to ``1``; else :attr:`tm_isdst` is set to "
"``0``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1322
msgid ""
"If :class:`.datetime` instance *d* is naive, this is the same as "
"``d.timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of "
"what ``d.dst()`` returns. DST is never in effect for a UTC time."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1326
msgid ""
"If *d* is aware, *d* is normalized to UTC time, by subtracting "
"``d.utcoffset()``, and a :class:`time.struct_time` for the normalized time "
"is returned. :attr:`tm_isdst` is forced to 0. Note that an "
":exc:`OverflowError` may be raised if *d*.year was ``MINYEAR`` or "
"``MAXYEAR`` and UTC adjustment spills over a year boundary."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1335
msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in"
" UTC; as a result, using ``utcfromtimetuple`` may give misleading results. "
"If you have a naive ``datetime`` representing UTC, use "
"``datetime.replace(tzinfo=timezone.utc)`` to make it aware, at which point "
"you can use :meth:`.datetime.timetuple`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1344
msgid ""
"Return the proleptic Gregorian ordinal of the date. The same as "
"``self.date().toordinal()``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1349
msgid ""
"Return POSIX timestamp corresponding to the :class:`.datetime` instance. The"
" return value is a :class:`float` similar to that returned by "
":func:`time.time`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1353
msgid ""
"Naive :class:`.datetime` instances are assumed to represent local time and "
"this method relies on the platform C :c:func:`mktime` function to perform "
"the conversion. Since :class:`.datetime` supports wider range of values than"
" :c:func:`mktime` on many platforms, this method may raise "
":exc:`OverflowError` for times far in the past or far in the future."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1360
msgid ""
"For aware :class:`.datetime` instances, the return value is computed as::"
msgstr "对于感知型 :class:`.datetime` 实例，返回值的计算方式为::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1367
msgid ""
"The :meth:`timestamp` method uses the :attr:`.fold` attribute to "
"disambiguate the times during a repeated interval."
msgstr ":meth:`timestamp` 方法使用 :attr:`.fold` 属性来消除重复间隔中的时间歧义。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1373
msgid ""
"There is no method to obtain the POSIX timestamp directly from a naive "
":class:`.datetime` instance representing UTC time. If your application uses "
"this convention and your system timezone is not set to UTC, you can obtain "
"the POSIX timestamp by supplying ``tzinfo=timezone.utc``::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1381
msgid "or by calculating the timestamp directly::"
msgstr "或者通过直接计算时间戳::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1387
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6."
" The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""
"返回一个整数代表星期几，星期一为 0，星期天为 6。 相当于 ``self.date().weekday()``。 另请参阅 "
":meth:`isoweekday`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1393
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7."
" The same as ``self.date().isoweekday()``. See also :meth:`weekday`, "
":meth:`isocalendar`."
msgstr ""
"返回一个整数代表星期几，星期一为 1，星期天为 7。 相当于 ``self.date().isoweekday()``。 另请参阅 "
":meth:`weekday`, :meth:`isocalendar`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1400
msgid ""
"Return a 3-tuple, (ISO year, ISO week number, ISO weekday). The same as "
"``self.date().isocalendar()``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1406
msgid "Return a string representing the date and time in ISO 8601 format:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1408
msgid "``YYYY-MM-DDTHH:MM:SS.ffffff``, if :attr:`microsecond` is not 0"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1409
msgid "``YYYY-MM-DDTHH:MM:SS``, if :attr:`microsecond` is 0"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1411
msgid ""
"If :meth:`utcoffset` does not return ``None``, a string is appended, giving "
"the UTC offset:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1414
msgid ""
"``YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]``, if :attr:`microsecond` "
"is not 0"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1416
msgid ""
"``YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]``,  if :attr:`microsecond` is 0"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1426
msgid ""
"The optional argument *sep* (default ``'T'``) is a one-character separator, "
"placed between the date and time portions of the result. For example::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1440
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1801
msgid ""
"The optional argument *timespec* specifies the number of additional "
"components of the time to include (the default is ``'auto'``). It can be one"
" of the following:"
msgstr "可选参数 *timespec* 要包含的额外时间组件值 (默认为 ``'auto'``)。它可以是以下值之一："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1444
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1805
msgid ""
"``'auto'``: Same as ``'seconds'`` if :attr:`microsecond` is 0, same as "
"``'microseconds'`` otherwise."
msgstr ""
"``'auto'``: 如果 :attr:`microsecond` 为 0 则与 ``'seconds'`` 相同，否则与 "
"``'microseconds'`` 相同。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1446
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1807
msgid "``'hours'``: Include the :attr:`hour` in the two-digit ``HH`` format."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1447
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1808
msgid ""
"``'minutes'``: Include :attr:`hour` and :attr:`minute` in ``HH:MM`` format."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1448
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1809
msgid ""
"``'seconds'``: Include :attr:`hour`, :attr:`minute`, and :attr:`second` in "
"``HH:MM:SS`` format."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1450
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1811
msgid ""
"``'milliseconds'``: Include full time, but truncate fractional second part "
"to milliseconds. ``HH:MM:SS.sss`` format."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1452
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1813
msgid "``'microseconds'``: Include full time in ``HH:MM:SS.ffffff`` format."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1456
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1817
msgid "Excluded time components are truncated, not rounded."
msgstr "排除掉的时间部分将被截断，而不是被舍入。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1458
msgid ":exc:`ValueError` will be raised on an invalid *timespec* argument::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1468
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1832
msgid "Added the *timespec* argument."
msgstr "增加了 *timespec* 参数。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1474
msgid ""
"For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to "
"``d.isoformat(' ')``."
msgstr "对于 :class:`.datetime` 实例 *d*，``str(d)`` 等价于 ``d.isoformat(' ')``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1480
msgid "Return a string representing the date and time::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1486
msgid ""
"The output string will *not* include time zone information, regardless of "
"whether the input is aware or naive."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1493
msgid ""
"on platforms where the native C :c:func:`ctime` function (which "
":func:`time.ctime` invokes, but which :meth:`datetime.ctime` does not "
"invoke) conforms to the C standard."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1499
msgid ""
"Return a string representing the date and time, controlled by an explicit "
"format string. For a complete list of formatting directives, see :ref"
":`strftime-strptime-behavior`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1506
msgid ""
"Same as :meth:`.datetime.strftime`. This makes it possible to specify a "
"format string for a :class:`.datetime` object in :ref:`formatted string "
"literals <f-strings>` and when using :meth:`str.format`. For a complete list"
" of formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1513
msgid "Examples of Usage: :class:`.datetime`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1515
msgid "Examples of working with :class:`~datetime.datetime` objects:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1568
msgid ""
"The example below defines a :class:`tzinfo` subclass capturing time zone "
"information for Kabul, Afghanistan, which used +4 UTC until 1945 and then "
"+4:30 UTC thereafter::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1615
msgid "Usage of ``KabulTz`` from above::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1641
msgid ":class:`.time` Objects"
msgstr ":class:`.time` 对象"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1643
msgid ""
"A :class:`time` object represents a (local) time of day, independent of any "
"particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1648
msgid ""
"All arguments are optional. *tzinfo* may be ``None``, or an instance of a "
":class:`tzinfo` subclass. The remaining arguments must be integers in the "
"following ranges:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1658
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised. "
"All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1666
msgid "The earliest representable :class:`.time`, ``time(0, 0, 0, 0)``."
msgstr "早最的可表示 :class:`.time`, ``time(0, 0, 0, 0)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1671
msgid "The latest representable :class:`.time`, ``time(23, 59, 59, 999999)``."
msgstr "最晚的可表示 :class:`.time`, ``time(23, 59, 59, 999999)``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1676
msgid ""
"The smallest possible difference between non-equal :class:`.time` objects, "
"``timedelta(microseconds=1)``, although note that arithmetic on "
":class:`.time` objects is not supported."
msgstr ""
"两个不相等的 :class:`.time` 对象之间可能的最小间隔，``timedelta(microseconds=1)``，但是请注意 "
":class:`.time` 对象并不支持算术运算。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1705
msgid ""
"The object passed as the tzinfo argument to the :class:`.time` constructor, "
"or ``None`` if none was passed."
msgstr "作为 tzinfo 参数被传给 :class:`.time` 构造器的对象，如果没有传入值则为 ``None``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1719
msgid ""
":class:`.time` objects support comparison of :class:`.time` to "
":class:`.time`, where *a* is considered less than *b* when *a* precedes *b* "
"in time. If one comparand is naive and the other is aware, :exc:`TypeError` "
"is raised if an order comparison is attempted. For equality comparisons, "
"naive instances are never equal to aware instances."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1725
msgid ""
"If both comparands are aware, and have the same :attr:`~time.tzinfo` "
"attribute, the common :attr:`~time.tzinfo` attribute is ignored and the base"
" times are compared. If both comparands are aware and have different "
":attr:`~time.tzinfo` attributes, the comparands are first adjusted by "
"subtracting their UTC offsets (obtained from ``self.utcoffset()``). In order"
" to stop mixed-type comparisons from falling back to the default comparison "
"by object address, when a :class:`.time` object is compared to an object of "
"a different type, :exc:`TypeError` is raised unless the comparison is ``==``"
" or ``!=``. The latter cases return :const:`False` or :const:`True`, "
"respectively."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1735
msgid ""
"Equality comparisons between aware and naive :class:`~datetime.time` "
"instances don't raise :exc:`TypeError`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1739
msgid ""
"In Boolean contexts, a :class:`.time` object is always considered to be "
"true."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1741
msgid ""
"Before Python 3.5, a :class:`.time` object was considered to be false if it "
"represented midnight in UTC. This behavior was considered obscure and error-"
"prone and has been removed in Python 3.5. See :issue:`13936` for full "
"details."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1748
msgid "Other constructor:"
msgstr "其他构造方法："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1752
msgid ""
"Return a :class:`.time` corresponding to a *time_string* in one of the "
"formats emitted by :meth:`time.isoformat`. Specifically, this function "
"supports strings in the format:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1762
msgid ""
"This does *not* support parsing arbitrary ISO 8601 strings. It is only "
"intended as the inverse operation of :meth:`time.isoformat`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1783
msgid ""
"Return a :class:`.time` with the same value, except for those attributes "
"given new values by whichever keyword arguments are specified. Note that "
"``tzinfo=None`` can be specified to create a naive :class:`.time` from an "
"aware :class:`.time`, without conversion of the time data."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1794
msgid "Return a string representing the time in ISO 8601 format, one of:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1796
msgid "``HH:MM:SS.ffffff``, if :attr:`microsecond` is not 0"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1797
msgid "``HH:MM:SS``, if :attr:`microsecond` is 0"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1798
msgid ""
"``HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]``, if :meth:`utcoffset` does not "
"return ``None``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1799
msgid ""
"``HH:MM:SS+HH:MM[:SS[.ffffff]]``, if :attr:`microsecond` is 0 and "
":meth:`utcoffset` does not return ``None``"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1819
msgid ":exc:`ValueError` will be raised on an invalid *timespec* argument."
msgstr "对于无效的 *timespec* 参数将引发 :exc:`ValueError`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1838
msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr "对于时间对象 *t*, ``str(t)`` 等价于 ``t.isoformat()``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1843
msgid ""
"Return a string representing the time, controlled by an explicit format "
"string. For a complete list of formatting directives, see :ref:`strftime-"
"strptime-behavior`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1850
msgid ""
"Same as :meth:`.time.strftime`. This makes it possible to specify a format "
"string for a :class:`.time` object in :ref:`formatted string literals "
"<f-strings>` and when using :meth:`str.format`. For a complete list of "
"formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1859
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns "
"``self.tzinfo.utcoffset(None)``, and raises an exception if the latter "
"doesn't return ``None`` or a :class:`timedelta` object with magnitude less "
"than one day."
msgstr ""
"如果 :attr:`.tzinfo` 为 ``None``，则返回 ``None``，否则返回 "
"``self.tzinfo.utcoffset(None)``，并且在后者不返回 ``None`` 或一个幅度小于一天的 a "
":class:`timedelta` 对象时将引发异常。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1869
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns "
"``self.tzinfo.dst(None)``, and raises an exception if the latter doesn't "
"return ``None``, or a :class:`timedelta` object with magnitude less than one"
" day."
msgstr ""
"如果 :attr:`.tzinfo` 为 ``None``，则返回 ``None``，否则返回 "
"``self.tzinfo.dst(None)``，并且在后者不返回 ``None`` 或者一个幅度小于一天的 :class:`timedelta` "
"对象时将引发异常。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1878
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns "
"``self.tzinfo.tzname(None)``, or raises an exception if the latter doesn't "
"return ``None`` or a string object."
msgstr ""
"如果 :attr:`.tzinfo` 为 ``None``，则返回 ``None``，否则返回 "
"``self.tzinfo.tzname(None)``，如果后者不返回 ``None`` 或者一个字符串对象则将引发异常。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1883
msgid "Examples of Usage: :class:`.time`"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1885
msgid "Examples of working with a :class:`.time` object::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1916
msgid ":class:`tzinfo` Objects"
msgstr ":class:`tzinfo` 对象"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1920
msgid ""
"This is an abstract base class, meaning that this class should not be "
"instantiated directly.  Define a subclass of :class:`tzinfo` to capture "
"information about a particular time zone."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1924
msgid ""
"An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the"
" constructors for :class:`.datetime` and :class:`.time` objects. The latter "
"objects view their attributes as being in local time, and the "
":class:`tzinfo` object supports methods revealing offset of local time from "
"UTC, the name of the time zone, and DST offset, all relative to a date or "
"time object passed to them."
msgstr ""
":class:`tzinfo` 的（某个实体子类）的实例可以被传给 :class:`.datetime` 和 :class:`.time` "
"对象的构造器。 这些对象会将它们的属性视为对应于本地时间，并且 :class:`tzinfo` 对象支持展示本地时间与 UTC 的差值、时区名称以及 "
"DST 差值的方法，都是与传给它们的日期或时间对象的相对值。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1930
msgid ""
"You need to derive a concrete subclass, and (at least) supply "
"implementations of the standard :class:`tzinfo` methods needed by the "
":class:`.datetime` methods you use. The :mod:`datetime` module provides "
":class:`timezone`, a simple concrete subclass of :class:`tzinfo` which can "
"represent timezones with fixed offset from UTC such as UTC itself or North "
"American EST and EDT."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1937
msgid ""
"Special requirement for pickling:  A :class:`tzinfo` subclass must have an "
":meth:`__init__` method that can be called with no arguments, otherwise it "
"can be pickled but possibly not unpickled again. This is a technical "
"requirement that may be relaxed in the future."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1942
msgid ""
"A concrete subclass of :class:`tzinfo` may need to implement the following "
"methods. Exactly which methods are needed depends on the uses made of aware "
":mod:`datetime` objects. If in doubt, simply implement all of them."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1949
msgid ""
"Return offset of local time from UTC, as a :class:`timedelta` object that is"
" positive east of UTC. If local time is west of UTC, this should be "
"negative."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1952
msgid ""
"This represents the *total* offset from UTC; for example, if a "
":class:`tzinfo` object represents both time zone and DST adjustments, "
":meth:`utcoffset` should return their sum. If the UTC offset isn't known, "
"return ``None``. Else the value returned must be a :class:`timedelta` object"
" strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)`` (the "
"magnitude of the offset must be less than one day). Most implementations of "
":meth:`utcoffset` will probably look like one of these two::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1963
msgid ""
"If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return"
" ``None`` either."
msgstr "如果 :meth:`utcoffset` 返回值不为 ``None``，则 :meth:`dst` 也不应返回 ``None``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1966
msgid ""
"The default implementation of :meth:`utcoffset` raises "
":exc:`NotImplementedError`."
msgstr "默认的 :meth:`utcoffset` 实现会引发 :exc:`NotImplementedError`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1975
msgid ""
"Return the daylight saving time (DST) adjustment, as a :class:`timedelta` "
"object or ``None`` if DST information isn't known."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1979
msgid ""
"Return ``timedelta(0)`` if DST is not in effect. If DST is in effect, return"
" the offset as a :class:`timedelta` object (see :meth:`utcoffset` for "
"details). Note that DST offset, if applicable, has already been added to the"
" UTC offset returned by :meth:`utcoffset`, so there's no need to consult "
":meth:`dst` unless you're interested in obtaining DST info separately. For "
"example, :meth:`datetime.timetuple` calls its :attr:`~.datetime.tzinfo` "
"attribute's :meth:`dst` method to determine how the :attr:`tm_isdst` flag "
"should be set, and :meth:`tzinfo.fromutc` calls :meth:`dst` to account for "
"DST changes when crossing time zones."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1989
msgid ""
"An instance *tz* of a :class:`tzinfo` subclass that models both standard and"
" daylight times must be consistent in this sense:"
msgstr "一个可以同时处理标准时和夏令时的 :class:`tzinfo` 子类的实例 *tz* 必须在此情形中保持一致："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1992
msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr "``tz.utcoffset(dt) - tz.dst(dt)``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:1994
msgid ""
"must return the same result for every :class:`.datetime` *dt* with "
"``dt.tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression "
"yields the time zone's \"standard offset\", which should not depend on the "
"date or the time, but only on geographic location. The implementation of "
":meth:`datetime.astimezone` relies on this, but cannot detect violations; "
"it's the programmer's responsibility to ensure it. If a :class:`tzinfo` "
"subclass cannot guarantee this, it may be able to override the default "
"implementation of :meth:`tzinfo.fromutc` to work correctly with "
":meth:`astimezone` regardless."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2003
msgid ""
"Most implementations of :meth:`dst` will probably look like one of these "
"two::"
msgstr "大多数 :meth:`dst` 的实现可能会如以下两者之一::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2009
msgid "or::"
msgstr "或者："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2021
msgid ""
"The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr "默认的 :meth:`dst` 实现会引发 :exc:`NotImplementedError`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2029
msgid ""
"Return the time zone name corresponding to the :class:`.datetime` object "
"*dt*, as a string. Nothing about string names is defined by the "
":mod:`datetime` module, and there's no requirement that it mean anything in "
"particular. For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", "
"\"US/Eastern\", \"America/New York\" are all valid replies. Return ``None`` "
"if a string name isn't known. Note that this is a method rather than a fixed"
" string primarily because some :class:`tzinfo` subclasses will wish to "
"return different names depending on the specific value of *dt* passed, "
"especially if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2039
msgid ""
"The default implementation of :meth:`tzname` raises "
":exc:`NotImplementedError`."
msgstr "默认的 :meth:`tzname` 实现会引发 :exc:`NotImplementedError`。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2042
msgid ""
"These methods are called by a :class:`.datetime` or :class:`.time` object, "
"in response to their methods of the same names. A :class:`.datetime` object "
"passes itself as the argument, and a :class:`.time` object passes ``None`` "
"as the argument. A :class:`tzinfo` subclass's methods should therefore be "
"prepared to accept a *dt* argument of ``None``, or of class "
":class:`.datetime`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2048
msgid ""
"When ``None`` is passed, it's up to the class designer to decide the best "
"response. For example, returning ``None`` is appropriate if the class wishes"
" to say that time objects don't participate in the :class:`tzinfo` "
"protocols. It may be more useful for ``utcoffset(None)`` to return the "
"standard UTC offset, as there is no other convention for discovering the "
"standard offset."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2054
msgid ""
"When a :class:`.datetime` object is passed in response to a "
":class:`.datetime` method, ``dt.tzinfo`` is the same object as *self*. "
":class:`tzinfo` methods can rely on this, unless user code calls "
":class:`tzinfo` methods directly. The intent is that the :class:`tzinfo` "
"methods interpret *dt* as being in local time, and not need worry about "
"objects in other timezones."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2060
msgid ""
"There is one more :class:`tzinfo` method that a subclass may wish to "
"override:"
msgstr "还有一个额外的 :class:`tzinfo` 方法，某个子类可能会希望重载它："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2065
msgid ""
"This is called from the default :class:`datetime.astimezone()` "
"implementation. When called from that, ``dt.tzinfo`` is *self*, and *dt*'s "
"date and time data are to be viewed as expressing a UTC time. The purpose of"
" :meth:`fromutc` is to adjust the date and time data, returning an "
"equivalent datetime in *self*'s local time."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2071
msgid ""
"Most :class:`tzinfo` subclasses should be able to inherit the default "
":meth:`fromutc` implementation without problems. It's strong enough to "
"handle fixed-offset time zones, and time zones accounting for both standard "
"and daylight time, and the latter even if the DST transition times differ in"
" different years. An example of a time zone the default :meth:`fromutc` "
"implementation may not handle correctly in all cases is one where the "
"standard offset (from UTC) depends on the specific date and time passed, "
"which can happen for political reasons. The default implementations of "
":meth:`astimezone` and :meth:`fromutc` may not produce the result you want "
"if the result is one of the hours straddling the moment the standard offset "
"changes."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2082
msgid ""
"Skipping code for error cases, the default :meth:`fromutc` implementation "
"acts like::"
msgstr "忽略针对错误情况的代码，默认 :meth:`fromutc` 实现的行为方式如下::"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2100
msgid ""
"In the following :download:`tzinfo_examples.py "
"<../includes/tzinfo_examples.py>` file there are some examples of "
":class:`tzinfo` classes:"
msgstr ""
"在以下 :download:`tzinfo_examples.py <../includes/tzinfo_examples.py>` 文件中有一些 "
":class:`tzinfo` 类的例子："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2106
msgid ""
"Note that there are unavoidable subtleties twice per year in a "
":class:`tzinfo` subclass accounting for both standard and daylight time, at "
"the DST transition points. For concreteness, consider US Eastern (UTC "
"-0500), where EDT begins the minute after 1:59 (EST) on the second Sunday in"
" March, and ends the minute after 1:59 (EDT) on the first Sunday in "
"November::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2120
msgid ""
"When DST starts (the \"start\" line), the local wall clock leaps from 1:59 "
"to 3:00. A wall time of the form 2:MM doesn't really make sense on that day,"
" so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on the"
" day DST begins. For example, at the Spring forward transition of 2016, we "
"get::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2139
msgid ""
"When DST ends (the \"end\" line), there's a potentially worse problem: "
"there's an hour that can't be spelled unambiguously in local wall time: the "
"last hour of daylight time. In Eastern, that's times of the form 5:MM UTC on"
" the day daylight time ends. The local wall clock leaps from 1:59 (daylight "
"time) back to 1:00 (standard time) again. Local times of the form 1:MM are "
"ambiguous. :meth:`astimezone` mimics the local clock's behavior by mapping "
"two adjacent UTC hours into the same local hour then. In the Eastern "
"example, UTC times of the form 5:MM and 6:MM both map to 1:MM when converted"
" to Eastern, but earlier times have the :attr:`~datetime.fold` attribute set"
" to 0 and the later times have it set to 1. For example, at the Fall back "
"transition of 2016, we get::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2161
msgid ""
"Note that the :class:`.datetime` instances that differ only by the value of "
"the :attr:`~datetime.fold` attribute are considered equal in comparisons."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2164
msgid ""
"Applications that can't bear wall-time ambiguities should explicitly check "
"the value of the :attr:`~datetime.fold` attribute or avoid using hybrid "
":class:`tzinfo` subclasses; there are no ambiguities when using "
":class:`timezone`, or any other fixed-offset :class:`tzinfo` subclass (such "
"as a class representing only EST (fixed offset -5 hours), or only EDT (fixed"
" offset -4 hours))."
msgstr ""
"不允许时间显示存在歧义的应用需要显式地检查 :attr:`~datetime.fold` 属性的值，或者避免使用混合式的 :class:`tzinfo`"
" 子类；当使用 :class:`timezone` 或者任何其他固定差值的 :class:`tzinfo` 子类例如仅表示 EST（固定差值 -5 "
"小时）或仅表示 EDT（固定差值 -4 小时）的类时是不会有歧义的。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2179
msgid "`dateutil.tz <https://dateutil.readthedocs.io/en/stable/tz.html>`_"
msgstr "`dateutil.tz <https://dateutil.readthedocs.io/en/stable/tz.html>`_"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2173
msgid ""
"The :mod:`datetime` module has a basic :class:`timezone` class (for handling"
" arbitrary fixed offsets from UTC) and its :attr:`timezone.utc` attribute (a"
" UTC timezone instance)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2177
msgid ""
"*dateutil.tz* library brings the *IANA timezone database* (also known as the"
" Olson database) to Python, and its usage is recommended."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2185
msgid "`IANA timezone database <https://www.iana.org/time-zones>`_"
msgstr "`IANA 时区数据库 <https://www.iana.org/time-zones>`_"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2182
msgid ""
"The Time Zone Database (often called tz, tzdata or zoneinfo) contains code "
"and data that represent the history of local time for many representative "
"locations around the globe. It is updated periodically to reflect changes "
"made by political bodies to time zone boundaries, UTC offsets, and daylight-"
"saving rules."
msgstr ""
"该时区数据库 (通常称为 tz, tzdata 或 zoneinfo) 包含大量代码和数据用来表示全球许多有代表性的地点的本地时间的历史信息。 "
"它会定期进行更新以反映各政治实体对时区边界、UTC 差值和夏令时规则的更改。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2192
msgid ":class:`timezone` Objects"
msgstr ":class:`timezone` 对象"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2194
msgid ""
"The :class:`timezone` class is a subclass of :class:`tzinfo`, each instance "
"of which represents a timezone defined by a fixed offset from UTC."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2198
msgid ""
"Objects of this class cannot be used to represent timezone information in "
"the locations where different offsets are used in different days of the year"
" or where historical changes have been made to civil time."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2205
msgid ""
"The *offset* argument must be specified as a :class:`timedelta` object "
"representing the difference between the local time and UTC. It must be "
"strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)``, "
"otherwise :exc:`ValueError` is raised."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2210
msgid ""
"The *name* argument is optional. If specified it must be a string that will "
"be used as the value returned by the :meth:`datetime.tzname` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2221
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2232
msgid ""
"Return the fixed value specified when the :class:`timezone` instance is "
"constructed."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2224
msgid ""
"The *dt* argument is ignored. The return value is a :class:`timedelta` "
"instance equal to the difference between the local time and UTC."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2235
msgid ""
"If *name* is not provided in the constructor, the name returned by "
"``tzname(dt)`` is generated from the value of the ``offset`` as follows. If "
"*offset* is ``timedelta(0)``, the name is \"UTC\", otherwise it is a string "
"in the format ``UTC±HH:MM``, where ± is the sign of ``offset``, HH and MM "
"are two digits of ``offset.hours`` and ``offset.minutes`` respectively."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2241
msgid ""
"Name generated from ``offset=timedelta(0)`` is now plain `'UTC'`, not "
"``'UTC+00:00'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2248
msgid "Always returns ``None``."
msgstr "总是返回 ``None``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2252
msgid ""
"Return ``dt + offset``. The *dt* argument must be an aware "
":class:`.datetime` instance, with ``tzinfo`` set to ``self``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2259
msgid "The UTC timezone, ``timezone(timedelta(0))``."
msgstr "UTC 时区，``timezone(timedelta(0))``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2268
msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr ":meth:`strftime` 和 :meth:`strptime` 的行为"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2270
msgid ""
":class:`date`, :class:`.datetime`, and :class:`.time` objects all support a "
"``strftime(format)`` method, to create a string representing the time under "
"the control of an explicit format string."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2274
msgid ""
"Conversely, the :meth:`datetime.strptime` class method creates a "
":class:`.datetime` object from a string representing a date and time and a "
"corresponding format string."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2278
msgid ""
"The table below provides a high-level comparison of :meth:`strftime` versus "
":meth:`strptime`:"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2282
msgid "``strftime``"
msgstr "``strftime``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2282
msgid "``strptime``"
msgstr "``strptime``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2284
msgid "Usage"
msgstr "用法"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2284
msgid "Convert object to a string according to a given format"
msgstr "根据给定的格式将对象转换为字符串"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2284
msgid ""
"Parse a string into a :class:`.datetime` object given a corresponding format"
msgstr "将字符串解析为给定相应格式的 :class:`.datetime` 对象"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2286
msgid "Type of method"
msgstr "方法类型"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2286
msgid "Instance method"
msgstr "实例方法"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2286
msgid "Class method"
msgstr "类方法"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2288
msgid "Method of"
msgstr "方法"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2288
msgid ":class:`date`; :class:`.datetime`; :class:`.time`"
msgstr ":class:`date`; :class:`.datetime`; :class:`.time`"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2288
msgid ":class:`.datetime`"
msgstr ":class:`.datetime`"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2290
msgid "Signature"
msgstr "签名"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2290
msgid "``strftime(format)``"
msgstr "``strftime(format)``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2290
msgid "``strptime(date_string, format)``"
msgstr "``strptime(date_string, format)``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2295
msgid ":meth:`strftime` and :meth:`strptime` Format Codes"
msgstr ":meth:`strftime` 和 :meth:`strptime` Format Codes"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2297
msgid ""
"The following is a list of all the format codes that the 1989 C standard "
"requires, and these work on all platforms with a standard C implementation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2301
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2404
msgid "Directive"
msgstr "指令"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2301
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2404
msgid "Meaning"
msgstr "意义"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2301
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2404
msgid "Example"
msgstr "示例"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2301
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2404
msgid "Notes"
msgstr "注释"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2303
msgid "``%a``"
msgstr "``%a``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2303
msgid "Weekday as locale's abbreviated name."
msgstr "当地工作日的缩写。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "Sun, Mon, ..., Sat (en_US);"
msgstr "Sun, Mon, ..., Sat (en_US);"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "So, Mo, ..., Sa (de_DE)"
msgstr "So, Mo, ..., Sa (de_DE)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2308
msgid "``%A``"
msgstr "``%A``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2308
msgid "Weekday as locale's full name."
msgstr "本地化的星期中每日的完整名称。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "Sunday, Monday, ..., Saturday (en_US);"
msgstr "Sunday, Monday, ..., Saturday (en_US);"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "Sonntag, Montag, ..., Samstag (de_DE)"
msgstr "Sonntag, Montag, ..., Samstag (de_DE)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2313
msgid "``%w``"
msgstr "``%w``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2313
msgid "Weekday as a decimal number, where 0 is Sunday and 6 is Saturday."
msgstr "以十进制数显示的工作日，其中0表示星期日，6表示星期六。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2313
msgid "0, 1, ..., 6"
msgstr "0, 1, ..., 6"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2317
msgid "``%d``"
msgstr "``%d``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2317
msgid "Day of the month as a zero-padded decimal number."
msgstr "补零后，以十进制数显示的月份中的一天。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2317
msgid "01, 02, ..., 31"
msgstr "01, 02, ..., 31"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2317
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2330
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2333
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2339
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2342
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2348
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2366
msgid "\\(9)"
msgstr "\\(9)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2320
msgid "``%b``"
msgstr "``%b``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2320
msgid "Month as locale's abbreviated name."
msgstr "当地月份的缩写。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "Jan, Feb, ..., Dec (en_US);"
msgstr "Jan, Feb, ..., Dec (en_US);"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "Jan, Feb, ..., Dez (de_DE)"
msgstr "Jan, Feb, ..., Dez (de_DE)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2325
msgid "``%B``"
msgstr "``%B``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2325
msgid "Month as locale's full name."
msgstr "本地化的月份全名。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "January, February, ..., December (en_US);"
msgstr "January, February, ..., December (en_US);"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "Januar, Februar, ..., Dezember (de_DE)"
msgstr "Januar, Februar, ..., Dezember (de_DE)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2330
msgid "``%m``"
msgstr "``%m``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2330
msgid "Month as a zero-padded decimal number."
msgstr "补零后，以十进制数显示的月份。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2330
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2342
msgid "01, 02, ..., 12"
msgstr "01, 02, ..., 12"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2333
msgid "``%y``"
msgstr "``%y``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2333
msgid "Year without century as a zero-padded decimal number."
msgstr "补零后，以十进制数表示的，不带世纪的年份。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2333
msgid "00, 01, ..., 99"
msgstr "00, 01, ..., 99"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2336
msgid "``%Y``"
msgstr "``%Y``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2336
msgid "Year with century as a decimal number."
msgstr "十进制数表示的带世纪的年份。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2336
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2406
msgid "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"
msgstr "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2339
msgid "``%H``"
msgstr "``%H``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2339
msgid "Hour (24-hour clock) as a zero-padded decimal number."
msgstr "以补零后的十进制数表示的小时（24 小时制）。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2339
msgid "00, 01, ..., 23"
msgstr "00, 01, ..., 23"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2342
msgid "``%I``"
msgstr "``%I``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2342
msgid "Hour (12-hour clock) as a zero-padded decimal number."
msgstr "以补零后的十进制数表示的小时（12 小时制）。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2345
msgid "``%p``"
msgstr "``%p``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2345
msgid "Locale's equivalent of either AM or PM."
msgstr "本地化的 AM 或 PM 。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "AM, PM (en_US);"
msgstr "AM, PM (en_US);"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "am, pm (de_DE)"
msgstr "am, pm (de_DE)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2345
msgid "\\(1), \\(3)"
msgstr "\\(1), \\(3)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2348
msgid "``%M``"
msgstr "``%M``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2348
msgid "Minute as a zero-padded decimal number."
msgstr "补零后，以十进制数显示的分钟。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2348
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2351
msgid "00, 01, ..., 59"
msgstr "00, 01, ..., 59"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2351
msgid "``%S``"
msgstr "``%S``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2351
msgid "Second as a zero-padded decimal number."
msgstr "补零后，以十进制数显示的秒。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2351
msgid "\\(4), \\(9)"
msgstr "\\(4), \\(9)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2354
msgid "``%f``"
msgstr "``%f``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2354
msgid "Microsecond as a decimal number, zero-padded on the left."
msgstr "以十进制数表示的毫秒，在左侧补零。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2354
msgid "000000, 000001, ..., 999999"
msgstr "000000, 000001, ..., 999999"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2354
msgid "\\(5)"
msgstr "\\(5)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2358
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2521
msgid "``%z``"
msgstr "``%z``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2358
msgid ""
"UTC offset in the form ``±HHMM[SS[.ffffff]]`` (empty string if the object is"
" naive)."
msgstr "UTC 偏移量，格式为 ``±HHMM[SS[.ffffff]]`` （如果是简单型对象则为空字符串）。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2358
msgid "(empty), +0000, -0400, +1030, +063415, -030712.345216"
msgstr "(空), +0000, -0400, +1030, +063415, -030712.345216"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2358
msgid "\\(6)"
msgstr "\\(6)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2363
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2536
msgid "``%Z``"
msgstr "``%Z``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2363
msgid "Time zone name (empty string if the object is naive)."
msgstr "时区名称（如果对象为简单型则为空字符串）。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2363
msgid "(empty), UTC, EST, CST"
msgstr "(空), UTC, EST, CST"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2366
msgid "``%j``"
msgstr "``%j``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2366
msgid "Day of the year as a zero-padded decimal number."
msgstr "以补零后的十进制数表示的一年中的日序号。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2366
msgid "001, 002, ..., 366"
msgstr "001, 002, ..., 366"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2369
msgid "``%U``"
msgstr "``%U``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2369
msgid ""
"Week number of the year (Sunday as the first day of the week) as a zero "
"padded decimal number. All days in a new year preceding the first Sunday are"
" considered to be in week 0."
msgstr "以补零后的十进制数表示的一年中的周序号（星期日作为每周的第一天）。 在新的一年中第一个星期日之前的所有日子都被视为是在第 0 周。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2369
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2377
msgid "00, 01, ..., 53"
msgstr "00, 01, ..., 53"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2369
#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2377
msgid "\\(7), \\(9)"
msgstr "\\(7), \\(9)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2377
msgid "``%W``"
msgstr "``%W``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2377
msgid ""
"Week number of the year (Monday as the first day of the week) as a decimal "
"number. All days in a new year preceding the first Monday are considered to "
"be in week 0."
msgstr "以十进制数表示的一年中的周序号（星期一作为每周的第一天）。 在新的一年中第一个第期一之前的所有日子都被视为是在第 0 周。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2385
msgid "``%c``"
msgstr "``%c``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2385
msgid "Locale's appropriate date and time representation."
msgstr "本地化的适当日期和时间表示。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "Tue Aug 16 21:30:00 1988 (en_US);"
msgstr "Tue Aug 16 21:30:00 1988 (en_US);"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "Di 16 Aug 21:30:00 1988 (de_DE)"
msgstr "Di 16 Aug 21:30:00 1988 (de_DE)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2390
msgid "``%x``"
msgstr "``%x``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2390
msgid "Locale's appropriate date representation."
msgstr "本地化的适当日期表示。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "08/16/88 (None);"
msgstr "08/16/88 (None);"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "08/16/1988 (en_US);"
msgstr "08/16/1988 (en_US);"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "16.08.1988 (de_DE)"
msgstr "16.08.1988 (de_DE)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2394
msgid "``%X``"
msgstr "``%X``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2394
msgid "Locale's appropriate time representation."
msgstr "本地化的适当时间表示。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "21:30:00 (en_US);"
msgstr "21:30:00 (en_US);"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:0
msgid "21:30:00 (de_DE)"
msgstr "21:30:00 (de_DE)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2397
msgid "``%%``"
msgstr "``%%``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2397
msgid "A literal ``'%'`` character."
msgstr "字面的 ``'%'`` 字符。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2397
msgid "%"
msgstr "%"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2400
msgid ""
"Several additional directives not required by the C89 standard are included "
"for convenience. These parameters all correspond to ISO 8601 date values."
msgstr "为了方便起见，还包括了C89标准不需要的其他一些指令。这些参数都对应于ISO 8601日期值。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2406
msgid "``%G``"
msgstr "``%G``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2406
msgid ""
"ISO 8601 year with century representing the year that contains the greater "
"part of the ISO week (``%V``)."
msgstr "带有世纪的 ISO 8601 年份，表示包含大部分 ISO 星期 (``%V``) 的年份。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2406
msgid "\\(8)"
msgstr "\\(8)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2411
msgid "``%u``"
msgstr "``%u``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2411
msgid "ISO 8601 weekday as a decimal number where 1 is Monday."
msgstr "以十进制数显示的 ISO 8601 星期中的日序号，其中 1 表示星期一。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2411
msgid "1, 2, ..., 7"
msgstr "1, 2, ..., 7"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2414
msgid "``%V``"
msgstr "``%V``"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2414
msgid ""
"ISO 8601 week as a decimal number with Monday as the first day of the week. "
"Week 01 is the week containing Jan 4."
msgstr "以十进制数显示的 ISO 8601 星期，以星期一作为每周的第一天。 第 01 周为包含 1 月 4 日的星期。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2414
msgid "01, 02, ..., 53"
msgstr "01, 02, ..., 53"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2414
msgid "\\(8), \\(9)"
msgstr "\\(8), \\(9)"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2421
msgid ""
"These may not be available on all platforms when used with the "
":meth:`strftime` method. The ISO 8601 year and ISO 8601 week directives are "
"not interchangeable with the year and week number directives above. Calling "
":meth:`strptime` with incomplete or ambiguous ISO 8601 directives will raise"
" a :exc:`ValueError`."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2426
msgid ""
"The full set of format codes supported varies across platforms, because "
"Python calls the platform C library's :func:`strftime` function, and "
"platform variations are common. To see the full set of format codes "
"supported on your platform, consult the :manpage:`strftime(3)` "
"documentation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2431
msgid "``%G``, ``%u`` and ``%V`` were added."
msgstr "增加了 ``%G``,  ``%u``  和 ``%V``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2435
msgid "Technical Detail"
msgstr "技术细节"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2437
msgid ""
"Broadly speaking, ``d.strftime(fmt)`` acts like the :mod:`time` module's "
"``time.strftime(fmt, d.timetuple())`` although not all objects support a "
":meth:`timetuple` method."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2441
msgid ""
"For the :meth:`datetime.strptime` class method, the default value is "
"``1900-01-01T00:00:00.000``: any components not specified in the format "
"string will be pulled from the default value. [#]_"
msgstr ""
"对于 :meth:`datetime.strptime` 类方法，默认值为 ``1900-01-01T00:00:00.000``: "
"任何未在格式字符串中指定的部分都将从默认值中提取。 [#]_"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2445
msgid "Using ``datetime.strptime(date_string, format)`` is equivalent to::"
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2449
msgid ""
"except when the format includes sub-second components or timezone offset "
"information, which are supported in ``datetime.strptime`` but are discarded "
"by ``time.strptime``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2453
msgid ""
"For :class:`.time` objects, the format codes for year, month, and day should"
" not be used, as :class:`time` objects have no such values. If they're used "
"anyway, ``1900`` is substituted for the year, and ``1`` for the month and "
"day."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2457
msgid ""
"For :class:`date` objects, the format codes for hours, minutes, seconds, and"
" microseconds should not be used, as :class:`date` objects have no such "
"values. If they're used anyway, ``0`` is substituted for them."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2461
msgid ""
"For the same reason, handling of format strings containing Unicode code "
"points that can't be represented in the charset of the current locale is "
"also platform-dependent. On some platforms such code points are preserved "
"intact in the output, while on others ``strftime`` may raise "
":exc:`UnicodeError` or return an empty string instead."
msgstr ""
"出于相同的原因，对于包含当前区域设置字符集所无法表示的 Unicode 码位的格式字符串的处理方式也取决于具体平台。 "
"在某些平台上这样的码位会不加修改地原样输出，而在其他平台上 ``strftime`` 则可能引发 :exc:`UnicodeError` "
"或只返回一个空字符串。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2470
msgid ""
"Because the format depends on the current locale, care should be taken when "
"making assumptions about the output value. Field orderings will vary (for "
"example, \"month/day/year\" versus \"day/month/year\"), and the output may "
"contain Unicode characters encoded using the locale's default encoding (for "
"example, if the current locale is ``ja_JP``, the default encoding could be "
"any one of ``eucJP``, ``SJIS``, or ``utf-8``; use :meth:`locale.getlocale` "
"to determine the current locale's encoding)."
msgstr ""
"由于此格式依赖于当前区域设置，因此对具体输出值应当保持谨慎预期。 字段顺序会发生改变（例如 \"month/day/year\" 与 "
"\"day/month/year\"），并且输出可能包含使用区域设置所指定的默认编码格式的 Unicode 字符（例如如果当前区域为 "
"``ja_JP``，则默认编码格式可能为 ``eucJP``, ``SJIS`` 或 ``utf-8`` 中的一个；使用 "
":meth:`locale.getlocale` 可确定当前区域设置的编码格式）。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2479
msgid ""
"The :meth:`strptime` method can parse years in the full [1, 9999] range, but"
" years < 1000 must be zero-filled to 4-digit width."
msgstr ""
":meth:`strptime` 方法能够解析整个 [1, 9999] 范围内的年份，但 < 1000 的年份必须加零填充为 4 位数字宽度。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2482
msgid ""
"In previous versions, :meth:`strftime` method was restricted to years >= "
"1900."
msgstr "在之前的版本中，:meth:`strftime` 方法只限于 >= 1900 的年份。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2486
msgid ""
"In version 3.2, :meth:`strftime` method was restricted to years >= 1000."
msgstr "在版本3.2中，:meth:`strftime` 方法只限于 years >= 1000。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2491
msgid ""
"When used with the :meth:`strptime` method, the ``%p`` directive only "
"affects the output hour field if the ``%I`` directive is used to parse the "
"hour."
msgstr "当与 :meth:`strptime` 方法一起使用时，如果使用 ``%I`` 指令来解析小时，``%p`` 指令只影响输出小时字段。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2495
msgid ""
"Unlike the :mod:`time` module, the :mod:`datetime` module does not support "
"leap seconds."
msgstr "与 :mod:`time` 模块不同的是， :mod:`datetime` 模块不支持闰秒。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2499
msgid ""
"When used with the :meth:`strptime` method, the ``%f`` directive accepts "
"from one to six digits and zero pads on the right. ``%f`` is an extension to"
" the set of format characters in the C standard (but implemented separately "
"in datetime objects, and therefore always available)."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2506
msgid ""
"For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty"
" strings."
msgstr "对于简单型对象，``%z`` and ``%Z`` 格式代码会被替换为空字符串。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2509
msgid "For an aware object:"
msgstr "对于一个感知型对象而言："

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2512
msgid ""
":meth:`utcoffset` is transformed into a string of the form "
"``±HHMM[SS[.ffffff]]``, where ``HH`` is a 2-digit string giving the number "
"of UTC offset hours, ``MM`` is a 2-digit string giving the number of UTC "
"offset minutes, ``SS`` is a 2-digit string giving the number of UTC offset "
"seconds and ``ffffff`` is a 6-digit string giving the number of UTC offset "
"microseconds. The ``ffffff`` part is omitted when the offset is a whole "
"number of seconds and both the ``ffffff`` and the ``SS`` part is omitted "
"when the offset is a whole number of minutes. For example, if "
":meth:`utcoffset` returns ``timedelta(hours=-3, minutes=-30)``, ``%z`` is "
"replaced with the string ``'-0330'``."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2526
msgid ""
"When the ``%z`` directive is provided to the  :meth:`strptime` method, the "
"UTC offsets can have a colon as a separator between hours, minutes and "
"seconds. For example, ``'+01:00:00'`` will be parsed as an offset of one "
"hour. In addition, providing ``'Z'`` is identical to ``'+00:00'``."
msgstr ""
"当提供 ``%z`` 指令给 :meth:`strptime` 方法时，UTC 差值可以在时、分和秒之间使用冒号分隔符。 "
"例如，``'+01:00:00'`` 将被解读为一小时的差值。 此外，提供 ``'Z'`` 就相当于 ``'+00:00'``。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2534
msgid ""
"If :meth:`tzname` returns ``None``, ``%Z`` is replaced by an empty string. "
"Otherwise ``%Z`` is replaced by the returned value, which must be a string."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2538
msgid ""
"When the ``%z`` directive is provided to the :meth:`strptime` method, an "
"aware :class:`.datetime` object will be produced. The ``tzinfo`` of the "
"result will be set to a :class:`timezone` instance."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2544
msgid ""
"When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used "
"in calculations when the day of the week and the calendar year (``%Y``) are "
"specified."
msgstr ""
"当与 :meth:`strptime` 方法一起使用时，``%U`` 和 ``%W`` 仅用于指定星期几和日历年份 (``%Y``) 的计算。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2549
msgid ""
"Similar to ``%U`` and ``%W``, ``%V`` is only used in calculations when the "
"day of the week and the ISO year (``%G``) are specified in a "
":meth:`strptime` format string. Also note that ``%G`` and ``%Y`` are not "
"interchangeable."
msgstr ""
"类似于 ``%U`` 和 ``%W``，``%V`` 仅用于在 :meth:`strptime` 格式字符串中指定星期几和 ISO 年份 "
"(``%G``) 的计算。 还要注意 ``%G`` 和 ``%Y`` 是不可交换的。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2555
msgid ""
"When used with the :meth:`strptime` method, the leading zero is optional for"
"  formats ``%d``, ``%m``, ``%H``, ``%I``, ``%M``, ``%S``, ``%J``, ``%U``, "
"``%W``, and ``%V``. Format ``%y`` does require a leading zero."
msgstr ""
"当于 :meth:`strptime` 方法一起使用时，前导的零在格式 ``%d``, ``%m``, ``%H``, ``%I``, ``%M``, "
"``%S``, ``%J``, ``%U``, ``%W`` 和 ``%V`` 中是可选的。 格式 ``%y`` 不要求有前导的零。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2560
msgid "Footnotes"
msgstr "脚注"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2561
msgid "If, that is, we ignore the effects of Relativity"
msgstr "就是说如果我们忽略相对论效应的话。"

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2563
msgid ""
"This matches the definition of the \"proleptic Gregorian\" calendar in "
"Dershowitz and Reingold's book *Calendrical Calculations*, where it's the "
"base calendar for all computations. See the book for algorithms for "
"converting between proleptic Gregorian ordinals and many other calendar "
"systems."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2569
msgid ""
"See R. H. van Gent's `guide to the mathematics of the ISO 8601 calendar "
"<https://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm>`_ for a"
" good explanation."
msgstr ""

#: /home/travis/build/python/cpython-doc-catalog/Doc/library/datetime.rst:2573
msgid ""
"Passing ``datetime.strptime('Feb 29', '%b %d')`` will fail since ``1900`` is"
" not a leap year."
msgstr "传入 ``datetime.strptime('Feb 29', '%b %d')`` 将导致错误，因为 ``1900`` 不是闰年。"
