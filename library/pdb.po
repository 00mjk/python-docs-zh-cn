# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# eric R <trencyclopedia@gmail.com>, 2019
# nick <2330458484@qq.com>, 2019
# Arisaka97 <solitaire2312@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-10 22:51+0000\n"
"PO-Revision-Date: 2019-09-01 02:46+0000\n"
"Last-Translator: Arisaka97 <solitaire2312@gmail.com>, 2020\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pdb.rst:4
msgid ":mod:`pdb` --- The Python Debugger"
msgstr ":mod:`pdb` --- Python的调试器"

#: ../../library/pdb.rst:9
msgid "**Source code:** :source:`Lib/pdb.py`"
msgstr "**源代码：** :source:`Lib/pdb.py`"

#: ../../library/pdb.rst:15
msgid ""
"The module :mod:`pdb` defines an interactive source code debugger for Python"
" programs.  It supports setting (conditional) breakpoints and single "
"stepping at the source line level, inspection of stack frames, source code "
"listing, and evaluation of arbitrary Python code in the context of any stack"
" frame.  It also supports post-mortem debugging and can be called under "
"program control."
msgstr ""
":mod:`pdb` 模块定义了一个交互式源代码调试器，用于 Python "
"程序。它支持在源码行间设置（有条件的）断点和单步执行，检视堆栈帧，列出源码列表，以及在任何堆栈帧的上下文中运行任意 Python "
"代码。它还支持事后调试，可以在程序控制下调用。"

#: ../../library/pdb.rst:26
msgid ""
"The debugger is extensible -- it is actually defined as the class "
":class:`Pdb`. This is currently undocumented but easily understood by "
"reading the source.  The extension interface uses the modules :mod:`bdb` and"
" :mod:`cmd`."
msgstr ""
"调试器是可扩展的——调试器实际被定义为 :class:`Pdb` 类。该类目前没有文档，但通过阅读源码很容易理解它。扩展接口使用了 :mod:`bdb`"
" 和 :mod:`cmd` 模块。"

#: ../../library/pdb.rst:30
msgid ""
"The debugger's prompt is ``(Pdb)``. Typical usage to run a program under "
"control of the debugger is::"
msgstr "调试器的提示符是 ``(Pdb)``。在调试器的控制下运行程序的典型用法是::"

#: ../../library/pdb.rst:44
msgid ""
"Tab-completion via the :mod:`readline` module is available for commands and "
"command arguments, e.g. the current global and local names are offered as "
"arguments of the ``p`` command."
msgstr ""
"由 :mod:`readline` 模块实现的 Tab 补全可用于补全本模块的命令和命令的参数，例如，``p`` "
"命令的参数可补全为当前的全局变量和局部变量。"

#: ../../library/pdb.rst:49
msgid ""
":file:`pdb.py` can also be invoked as a script to debug other scripts.  For "
"example::"
msgstr "也可以将 :file:`pdb.py` 作为脚本调用来调试其他脚本。例如::"

#: ../../library/pdb.rst:54
msgid ""
"When invoked as a script, pdb will automatically enter post-mortem debugging"
" if the program being debugged exits abnormally.  After post-mortem "
"debugging (or after normal exit of the program), pdb will restart the "
"program.  Automatic restarting preserves pdb's state (such as breakpoints) "
"and in most cases is more useful than quitting the debugger upon program's "
"exit."
msgstr ""
"当作为脚本调用时，如果要调试的程序异常退出，pdb 调试将自动进入事后调试。事后调试之后（或程序正常退出之后），pdb 将重新启动程序。自动重启会保留 "
"pdb 的状态（如断点），在大多数情况下，这比在退出程序的同时退出调试器更加实用。"

#: ../../library/pdb.rst:60
msgid ""
":file:`pdb.py` now accepts a ``-c`` option that executes commands as if "
"given in a :file:`.pdbrc` file, see :ref:`debugger-commands`."
msgstr ""
":file:`pdb.py` 现在接受 ``-c`` 选项，可以执行命令，这与将该命令写入 :file:`.pdbrc` 文件相同，请参阅 :ref"
":`debugger-commands`。"

#: ../../library/pdb.rst:64
msgid ""
":file:`pdb.py` now accepts a ``-m`` option that execute modules similar to "
"the way ``python3 -m`` does. As with a script, the debugger will pause "
"execution just before the first line of the module."
msgstr ""
":file:`pdb.py` 现在接受 ``-m`` 选项，该选项用于执行一个模块，类似于 ``python3 "
"-m``。与脚本相同，调试器将暂停在待执行模块第一行前。"

#: ../../library/pdb.rst:70
msgid ""
"The typical usage to break into the debugger from a running program is to "
"insert ::"
msgstr "从正在运行的程序进入调试器的典型用法是插入 ::"

#: ../../library/pdb.rst:75
msgid ""
"at the location you want to break into the debugger.  You can then step "
"through the code following this statement, and continue running without the "
"debugger using the :pdbcmd:`continue` command."
msgstr "到你想进入调试器的位置。然后就可以单步执行上述语句之后的代码，要关闭调试器继续运行，请使用 :pdbcmd:`continue` 命令。"

#: ../../library/pdb.rst:79
msgid ""
"The built-in :func:`breakpoint()`, when called with defaults, can be used "
"instead of ``import pdb; pdb.set_trace()``."
msgstr ""
"内置函数 :func:`breakpoint()`，当以默认参数调用它时，可以用来代替 ``import pdb; pdb.set_trace()``。"

#: ../../library/pdb.rst:83
msgid "The typical usage to inspect a crashed program is::"
msgstr "检查已崩溃程序的典型用法是::"

#: ../../library/pdb.rst:101
msgid ""
"The module defines the following functions; each enters the debugger in a "
"slightly different way:"
msgstr "本模块定义了下列函数，每个函数进入调试器的方式略有不同："

#: ../../library/pdb.rst:106
msgid ""
"Execute the *statement* (given as a string or a code object) under debugger "
"control.  The debugger prompt appears before any code is executed; you can "
"set breakpoints and type :pdbcmd:`continue`, or you can step through the "
"statement using :pdbcmd:`step` or :pdbcmd:`next` (all these commands are "
"explained below).  The optional *globals* and *locals* arguments specify the"
" environment in which the code is executed; by default the dictionary of the"
" module :mod:`__main__` is used.  (See the explanation of the built-in "
":func:`exec` or :func:`eval` functions.)"
msgstr ""
"在调试器控制范围内执行 *statement* （以字符串或代码对象的形式提供）。调试器提示符会在执行代码前出现，你可以设置断点并键入 "
":pdbcmd:`continue`，也可以使用 :pdbcmd:`step` 或 :pdbcmd:`next` "
"逐步执行语句（上述所有命令在后文有说明）。可选参数 *globals* 和 *locals* 指定代码执行环境，默认时使用 "
":mod:`__main__` 模块的字典。（请参阅内置函数 :func:`exec` 或 :func:`eval` 的说明。）"

#: ../../library/pdb.rst:118
msgid ""
"Evaluate the *expression* (given as a string or a code object) under "
"debugger control.  When :func:`runeval` returns, it returns the value of the"
" expression.  Otherwise this function is similar to :func:`run`."
msgstr ""
"在调试器控制范围内执行 *expression* （以字符串或代码对象的形式提供）。:func:`runeval` "
"返回时将返回表达式的值。本函数在其他方面与 :func:`run` 类似。"

#: ../../library/pdb.rst:125
msgid ""
"Call the *function* (a function or method object, not a string) with the "
"given arguments.  When :func:`runcall` returns, it returns whatever the "
"function call returned.  The debugger prompt appears as soon as the function"
" is entered."
msgstr ""
"使用给定的参数调用 *function* （以函数或方法对象的形式提供，不能是字符串）。:func:`runcall` "
"返回的是所调用函数的返回值。调试器提示符将在进入函数后立即出现。"

#: ../../library/pdb.rst:133
msgid ""
"Enter the debugger at the calling stack frame.  This is useful to hard-code "
"a breakpoint at a given point in a program, even if the code is not "
"otherwise being debugged (e.g. when an assertion fails).  If given, *header*"
" is printed to the console just before debugging begins."
msgstr ""
"在调用本函数的堆栈帧处进入调试器。用于硬编码一个断点到程序中的固定点处，即使该代码不在调试状态（如断言失败时）。如果传入 "
"*header*，它将在调试开始前被打印到控制台。"

#: ../../library/pdb.rst:138
msgid "The keyword-only argument *header*."
msgstr "仅关键字参数 *header*。"

#: ../../library/pdb.rst:144
msgid ""
"Enter post-mortem debugging of the given *traceback* object.  If no "
"*traceback* is given, it uses the one of the exception that is currently "
"being handled (an exception must be being handled if the default is to be "
"used)."
msgstr ""
"进入 *traceback* 对象的事后调试。如果没有给定 *traceback*，默认使用当前正在处理的异常之一（默认时，必须存在正在处理的异常）。"

#: ../../library/pdb.rst:152
msgid ""
"Enter post-mortem debugging of the traceback found in "
":data:`sys.last_traceback`."
msgstr "在 :data:`sys.last_traceback` 中查找 traceback，并进入其事后调试。"

#: ../../library/pdb.rst:156
msgid ""
"The ``run*`` functions and :func:`set_trace` are aliases for instantiating "
"the :class:`Pdb` class and calling the method of the same name.  If you want"
" to access further features, you have to do this yourself:"
msgstr ""
"``run*`` 函数和 :func:`set_trace` 都是别名，用于实例化 :class:`Pdb` "
"类和调用同名方法。如果要使用其他功能，则必须自己执行以下操作："

#: ../../library/pdb.rst:163
msgid ":class:`Pdb` is the debugger class."
msgstr ":class:`Pdb` 是调试器类。"

#: ../../library/pdb.rst:165
msgid ""
"The *completekey*, *stdin* and *stdout* arguments are passed to the "
"underlying :class:`cmd.Cmd` class; see the description there."
msgstr ""
"*completekey*、*stdin* 和 *stdout* 参数都会传递给底层的 :class:`cmd.Cmd` 类，请参考相应的描述。"

#: ../../library/pdb.rst:168
msgid ""
"The *skip* argument, if given, must be an iterable of glob-style module name"
" patterns.  The debugger will not step into frames that originate in a "
"module that matches one of these patterns. [1]_"
msgstr ""
"如果给出 *skip* 参数，则它必须是一个迭代器，可以迭代出 glob-style "
"样式的模块名称。如果遇到匹配上述样式的模块，调试器将不会进入来自该模块的堆栈帧。 [1]_"

#: ../../library/pdb.rst:172
msgid ""
"By default, Pdb sets a handler for the SIGINT signal (which is sent when the"
" user presses :kbd:`Ctrl-C` on the console) when you give a ``continue`` "
"command. This allows you to break into the debugger again by pressing "
":kbd:`Ctrl-C`.  If you want Pdb not to touch the SIGINT handler, set "
"*nosigint* to true."
msgstr ""
"默认情况下，当发出 ``continue`` 命令时，Pdb 将为 SIGINT 信号设置一个处理程序（SIGINT 信号是用户在控制台按 "
":kbd:`Ctrl-C` 时发出的）。这使用户可以按 :kbd:`Ctrl-C` 再次进入调试器。如果希望 Pdb 不要修改 SIGINT "
"处理程序，请将 *nosigint* 设置为 true。"

#: ../../library/pdb.rst:177
msgid ""
"The *readrc* argument defaults to true and controls whether Pdb will load "
".pdbrc files from the filesystem."
msgstr "*readrc* 参数默认为 true，它控制 Pdb 是否从文件系统加载 .pdbrc 文件。"

#: ../../library/pdb.rst:180
msgid "Example call to enable tracing with *skip*::"
msgstr "启用跟踪且带有 *skip* 参数的调用示范::"

#: ../../library/pdb.rst:184
msgid "The *skip* argument."
msgstr "*skip* 参数。"

#: ../../library/pdb.rst:187
msgid ""
"The *nosigint* argument.  Previously, a SIGINT handler was never set by Pdb."
msgstr "*nosigint* 参数。在这之前，Pdb 不为 SIGINT 设置处理程序。"

#: ../../library/pdb.rst:191
msgid "The *readrc* argument."
msgstr "*readrc* 参数。"

#: ../../library/pdb.rst:199
msgid "See the documentation for the functions explained above."
msgstr "请参阅上文解释同名函数的文档。"

#: ../../library/pdb.rst:205
msgid "Debugger Commands"
msgstr "调试器命令"

#: ../../library/pdb.rst:207
msgid ""
"The commands recognized by the debugger are listed below.  Most commands can"
" be abbreviated to one or two letters as indicated; e.g. ``h(elp)`` means "
"that either ``h`` or ``help`` can be used to enter the help command (but not"
" ``he`` or ``hel``, nor ``H`` or ``Help`` or ``HELP``).  Arguments to "
"commands must be separated by whitespace (spaces or tabs).  Optional "
"arguments are enclosed in square brackets (``[]``) in the command syntax; "
"the square brackets must not be typed.  Alternatives in the command syntax "
"are separated by a vertical bar (``|``)."
msgstr ""
"下方列出的是调试器可接受的命令。如下所示，大多数命令可以缩写为一个或两个字母。如 ``h(elp)`` 表示可以输入 ``h`` 或 ``help`` "
"来输入帮助命令（但不能输入 ``he`` 或 ``hel``，也不能是 ``H`` 或 ``Help`` 或 "
"``HELP``）。命令的参数必须用空格（空格符或制表符）分隔。在命令语法中，可选参数括在方括号 (``[]``) "
"中，使用时请勿输入方括号。命令语法中的选择项由竖线 (``|``) 分隔。"

#: ../../library/pdb.rst:216
msgid ""
"Entering a blank line repeats the last command entered.  Exception: if the "
"last command was a :pdbcmd:`list` command, the next 11 lines are listed."
msgstr "输入一个空白行将重复最后输入的命令。例外：如果最后一个命令是 :pdbcmd:`list` 命令，则会列出接下来的 11 行。"

#: ../../library/pdb.rst:219
msgid ""
"Commands that the debugger doesn't recognize are assumed to be Python "
"statements and are executed in the context of the program being debugged.  "
"Python statements can also be prefixed with an exclamation point (``!``).  "
"This is a powerful way to inspect the program being debugged; it is even "
"possible to change a variable or call a function.  When an exception occurs "
"in such a statement, the exception name is printed but the debugger's state "
"is not changed."
msgstr ""
"调试器无法识别的命令将被认为是 Python 语句，并在正在调试的程序的上下文中执行。Python 语句也可以用感叹号 (``!``) "
"作为前缀。这是检查正在调试的程序的强大方法，甚至可以修改变量或调用函数。当此类语句发生异常，将打印异常名称，但调试器的状态不会改变。"

#: ../../library/pdb.rst:227
msgid ""
"The debugger supports :ref:`aliases <debugger-aliases>`.  Aliases can have "
"parameters which allows one a certain level of adaptability to the context "
"under examination."
msgstr "调试器支持 :ref:`别名 <debugger-aliases>`。别名可以有参数，使得调试器对被检查的上下文有一定程度的适应性。"

#: ../../library/pdb.rst:231
msgid ""
"Multiple commands may be entered on a single line, separated by ``;;``.  (A "
"single ``;`` is not used as it is the separator for multiple commands in a "
"line that is passed to the Python parser.)  No intelligence is applied to "
"separating the commands; the input is split at the first ``;;`` pair, even "
"if it is in the middle of a quoted string."
msgstr ""
"在一行中可以输入多个命令，以 ``;;`` 分隔。（不能使用单个 ``;``，因为它用于分隔传递给 Python "
"解释器的一行中的多条语句。）切分命令很无脑，总是在第一个 ``;;`` 对处将输入切分开，即使它位于带引号的字符串之中。"

#: ../../library/pdb.rst:241
msgid ""
"If a file :file:`.pdbrc` exists in the user's home directory or in the "
"current directory, it is read in and executed as if it had been typed at the"
" debugger prompt.  This is particularly useful for aliases.  If both files "
"exist, the one in the home directory is read first and aliases defined there"
" can be overridden by the local file."
msgstr ""
"如果文件 :file:`.pdbrc` "
"存在于用户主目录或当前目录中，则将其读入并执行，等同于在调试器提示符下键入该文件。这对于别名很有用。若两个文件都存在则首先读取主目录中的文件，且本地文件可以覆盖其中定义的别名。"

#: ../../library/pdb.rst:247
msgid ""
":file:`.pdbrc` can now contain commands that continue debugging, such as "
":pdbcmd:`continue` or :pdbcmd:`next`.  Previously, these commands had no "
"effect."
msgstr ""
":file:`.pdbrc` 现在可以包含继续调试的命令，如 :pdbcmd:`continue` 或 "
":pdbcmd:`next`。文件中的这些命令以前是无效的。"

#: ../../library/pdb.rst:255
msgid ""
"Without argument, print the list of available commands.  With a *command* as"
" argument, print help about that command.  ``help pdb`` displays the full "
"documentation (the docstring of the :mod:`pdb` module).  Since the *command*"
" argument must be an identifier, ``help exec`` must be entered to get help "
"on the ``!`` command."
msgstr ""
"不带参数时，显示可用的命令列表。参数为 *command* 时，打印有关该命令的帮助。``help pdb`` 显示完整文档（即 :mod:`pdb` "
"模块的文档字符串）。由于 *command* 参数必须是标识符，因此要获取 ``!`` 的帮助必须输入 ``help exec``。"

#: ../../library/pdb.rst:263
msgid ""
"Print a stack trace, with the most recent frame at the bottom.  An arrow "
"indicates the current frame, which determines the context of most commands."
msgstr "打印堆栈回溯，最新一帧在底部。有一个箭头指向当前帧，该帧决定了大多数命令的上下文。"

#: ../../library/pdb.rst:268
msgid ""
"Move the current frame *count* (default one) levels down in the stack trace "
"(to a newer frame)."
msgstr "在堆栈回溯中，将当前帧向下移动 *count* 级（默认为 1 级，移向更新的帧）。"

#: ../../library/pdb.rst:273
msgid ""
"Move the current frame *count* (default one) levels up in the stack trace "
"(to an older frame)."
msgstr "在堆栈回溯中，将当前帧向上移动 *count* 级（默认为 1 级，移向更老的帧）。"

#: ../../library/pdb.rst:278
msgid ""
"With a *lineno* argument, set a break there in the current file.  With a "
"*function* argument, set a break at the first executable statement within "
"that function.  The line number may be prefixed with a filename and a colon,"
" to specify a breakpoint in another file (probably one that hasn't been "
"loaded yet).  The file is searched on :data:`sys.path`.  Note that each "
"breakpoint is assigned a number to which all the other breakpoint commands "
"refer."
msgstr ""
"如果带有 *lineno* 参数，则在当前文件相应行处设置一个断点。如果带有 *function* "
"参数，则在该函数的第一条可执行语句处设置一个断点。行号可以加上文件名和冒号作为前缀，以在另一个文件（可能是尚未加载的文件）中设置一个断点。另一个文件将在"
" :data:`sys.path` 范围内搜索。请注意，每个断点都分配有一个编号，其他所有断点命令都引用该编号。"

#: ../../library/pdb.rst:285
msgid ""
"If a second argument is present, it is an expression which must evaluate to "
"true before the breakpoint is honored."
msgstr ""

#: ../../library/pdb.rst:288
msgid ""
"Without argument, list all breaks, including for each breakpoint, the number"
" of times that breakpoint has been hit, the current ignore count, and the "
"associated condition if any."
msgstr ""

#: ../../library/pdb.rst:294
msgid ""
"Temporary breakpoint, which is removed automatically when it is first hit. "
"The arguments are the same as for :pdbcmd:`break`."
msgstr ""

#: ../../library/pdb.rst:299
msgid ""
"With a *filename:lineno* argument, clear all the breakpoints at this line. "
"With a space separated list of breakpoint numbers, clear those breakpoints. "
"Without argument, clear all breaks (but first ask confirmation)."
msgstr ""

#: ../../library/pdb.rst:305
msgid ""
"Disable the breakpoints given as a space separated list of breakpoint "
"numbers.  Disabling a breakpoint means it cannot cause the program to stop "
"execution, but unlike clearing a breakpoint, it remains in the list of "
"breakpoints and can be (re-)enabled."
msgstr ""

#: ../../library/pdb.rst:312
msgid "Enable the breakpoints specified."
msgstr ""

#: ../../library/pdb.rst:316
msgid ""
"Set the ignore count for the given breakpoint number.  If count is omitted, "
"the ignore count is set to 0.  A breakpoint becomes active when the ignore "
"count is zero.  When non-zero, the count is decremented each time the "
"breakpoint is reached and the breakpoint is not disabled and any associated "
"condition evaluates to true."
msgstr ""

#: ../../library/pdb.rst:324
msgid ""
"Set a new *condition* for the breakpoint, an expression which must evaluate "
"to true before the breakpoint is honored.  If *condition* is absent, any "
"existing condition is removed; i.e., the breakpoint is made unconditional."
msgstr ""

#: ../../library/pdb.rst:330
msgid ""
"Specify a list of commands for breakpoint number *bpnumber*.  The commands "
"themselves appear on the following lines.  Type a line containing just "
"``end`` to terminate the commands. An example::"
msgstr ""

#: ../../library/pdb.rst:339
msgid ""
"To remove all commands from a breakpoint, type ``commands`` and follow it "
"immediately with ``end``; that is, give no commands."
msgstr ""

#: ../../library/pdb.rst:342
msgid ""
"With no *bpnumber* argument, ``commands`` refers to the last breakpoint set."
msgstr ""

#: ../../library/pdb.rst:344
msgid ""
"You can use breakpoint commands to start your program up again.  Simply use "
"the :pdbcmd:`continue` command, or :pdbcmd:`step`, or any other command that"
" resumes execution."
msgstr ""

#: ../../library/pdb.rst:348
msgid ""
"Specifying any command resuming execution (currently :pdbcmd:`continue`, "
":pdbcmd:`step`, :pdbcmd:`next`, :pdbcmd:`return`, :pdbcmd:`jump`, "
":pdbcmd:`quit` and their abbreviations) terminates the command list (as if "
"that command was immediately followed by end). This is because any time you "
"resume execution (even with a simple next or step), you may encounter "
"another breakpoint—which could have its own command list, leading to "
"ambiguities about which list to execute."
msgstr ""

#: ../../library/pdb.rst:357
msgid ""
"If you use the 'silent' command in the command list, the usual message about"
" stopping at a breakpoint is not printed.  This may be desirable for "
"breakpoints that are to print a specific message and then continue.  If none"
" of the other commands print anything, you see no sign that the breakpoint "
"was reached."
msgstr ""

#: ../../library/pdb.rst:364
msgid ""
"Execute the current line, stop at the first possible occasion (either in a "
"function that is called or on the next line in the current function)."
msgstr ""

#: ../../library/pdb.rst:369
msgid ""
"Continue execution until the next line in the current function is reached or"
" it returns.  (The difference between :pdbcmd:`next` and :pdbcmd:`step` is "
"that :pdbcmd:`step` stops inside a called function, while :pdbcmd:`next` "
"executes called functions at (nearly) full speed, only stopping at the next "
"line in the current function.)"
msgstr ""

#: ../../library/pdb.rst:377
msgid ""
"Without argument, continue execution until the line with a number greater "
"than the current one is reached."
msgstr ""

#: ../../library/pdb.rst:380
msgid ""
"With a line number, continue execution until a line with a number greater or"
" equal to that is reached.  In both cases, also stop when the current frame "
"returns."
msgstr ""

#: ../../library/pdb.rst:384
msgid "Allow giving an explicit line number."
msgstr ""

#: ../../library/pdb.rst:389
msgid "Continue execution until the current function returns."
msgstr ""

#: ../../library/pdb.rst:393
msgid "Continue execution, only stop when a breakpoint is encountered."
msgstr ""

#: ../../library/pdb.rst:397
msgid ""
"Set the next line that will be executed.  Only available in the bottom-most "
"frame.  This lets you jump back and execute code again, or jump forward to "
"skip code that you don't want to run."
msgstr ""

#: ../../library/pdb.rst:401
msgid ""
"It should be noted that not all jumps are allowed -- for instance it is not "
"possible to jump into the middle of a :keyword:`for` loop or out of a "
":keyword:`finally` clause."
msgstr ""

#: ../../library/pdb.rst:407
msgid ""
"List source code for the current file.  Without arguments, list 11 lines "
"around the current line or continue the previous listing.  With ``.`` as "
"argument, list 11 lines around the current line.  With one argument, list 11"
" lines around at that line.  With two arguments, list the given range; if "
"the second argument is less than the first, it is interpreted as a count."
msgstr ""

#: ../../library/pdb.rst:413
msgid ""
"The current line in the current frame is indicated by ``->``.  If an "
"exception is being debugged, the line where the exception was originally "
"raised or propagated is indicated by ``>>``, if it differs from the current "
"line."
msgstr ""

#: ../../library/pdb.rst:418
msgid "The ``>>`` marker."
msgstr ""

#: ../../library/pdb.rst:423
msgid ""
"List all source code for the current function or frame.  Interesting lines "
"are marked as for :pdbcmd:`list`."
msgstr ""

#: ../../library/pdb.rst:430
msgid "Print the argument list of the current function."
msgstr ""

#: ../../library/pdb.rst:434
msgid "Evaluate the *expression* in the current context and print its value."
msgstr ""

#: ../../library/pdb.rst:438
msgid ""
"``print()`` can also be used, but is not a debugger command --- this "
"executes the Python :func:`print` function."
msgstr ""

#: ../../library/pdb.rst:444
msgid ""
"Like the :pdbcmd:`p` command, except the value of the expression is pretty-"
"printed using the :mod:`pprint` module."
msgstr ""

#: ../../library/pdb.rst:449
msgid "Print the type of the *expression*."
msgstr ""

#: ../../library/pdb.rst:453
msgid "Try to get source code for the given object and display it."
msgstr ""

#: ../../library/pdb.rst:459
msgid ""
"Display the value of the expression if it changed, each time execution stops"
" in the current frame."
msgstr ""

#: ../../library/pdb.rst:462
msgid ""
"Without expression, list all display expressions for the current frame."
msgstr ""

#: ../../library/pdb.rst:468
msgid ""
"Do not display the expression any more in the current frame.  Without "
"expression, clear all display expressions for the current frame."
msgstr ""

#: ../../library/pdb.rst:475
msgid ""
"Start an interactive interpreter (using the :mod:`code` module) whose global"
" namespace contains all the (global and local) names found in the current "
"scope."
msgstr ""

#: ../../library/pdb.rst:485
msgid ""
"Create an alias called *name* that executes *command*.  The command must "
"*not* be enclosed in quotes.  Replaceable parameters can be indicated by "
"``%1``, ``%2``, and so on, while ``%*`` is replaced by all the parameters. "
"If no command is given, the current alias for *name* is shown. If no "
"arguments are given, all aliases are listed."
msgstr ""

#: ../../library/pdb.rst:491
msgid ""
"Aliases may be nested and can contain anything that can be legally typed at "
"the pdb prompt.  Note that internal pdb commands *can* be overridden by "
"aliases.  Such a command is then hidden until the alias is removed.  "
"Aliasing is recursively applied to the first word of the command line; all "
"other words in the line are left alone."
msgstr ""

#: ../../library/pdb.rst:497
msgid ""
"As an example, here are two useful aliases (especially when placed in the "
":file:`.pdbrc` file)::"
msgstr ""

#: ../../library/pdb.rst:507
msgid "Delete the specified alias."
msgstr ""

#: ../../library/pdb.rst:511
msgid ""
"Execute the (one-line) *statement* in the context of the current stack "
"frame. The exclamation point can be omitted unless the first word of the "
"statement resembles a debugger command.  To set a global variable, you can "
"prefix the assignment command with a :keyword:`global` statement on the same"
" line, e.g.::"
msgstr ""

#: ../../library/pdb.rst:523
msgid ""
"Restart the debugged Python program.  If an argument is supplied, it is "
"split with :mod:`shlex` and the result is used as the new :data:`sys.argv`. "
"History, breakpoints, actions and debugger options are preserved. "
":pdbcmd:`restart` is an alias for :pdbcmd:`run`."
msgstr ""

#: ../../library/pdb.rst:530
msgid "Quit from the debugger.  The program being executed is aborted."
msgstr ""

#: ../../library/pdb.rst:534
msgid ""
"Enter a recursive debugger that steps through the code argument (which is an"
" arbitrary expression or statement to be executed in the current "
"environment)."
msgstr ""

#: ../../library/pdb.rst:542
msgid "Footnotes"
msgstr "备注"

#: ../../library/pdb.rst:543
msgid ""
"Whether a frame is considered to originate in a certain module is determined"
" by the ``__name__`` in the frame globals."
msgstr ""
