# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# cdarlint <cdarling@126.com>, 2020
# Shengjing Zhu <zsj950618@gmail.com>, 2020
# ww song <sww4718168@gmail.com>, 2020
# Freesand Leo <yuqinju@163.com>, 2020
# nick <2330458484@qq.com>, 2020
# Trim21 <i@trim21.me>, 2020
# ppcfish <ppcfish@gmail.com>, 2020
# 君 码侬 <einsxiao@stu.xjtu.edu.cn>, 2020
# Arisaka97 <solitaire2312@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 12:40+0000\n"
"PO-Revision-Date: 2020-05-30 12:11+0000\n"
"Last-Translator: Arisaka97 <solitaire2312@gmail.com>, 2020\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sys.rst:2
msgid ":mod:`sys` --- System-specific parameters and functions"
msgstr ":mod:`sys` --- 系统相关的参数和函数"

#: ../../library/sys.rst:9
msgid ""
"This module provides access to some variables used or maintained by the "
"interpreter and to functions that interact strongly with the interpreter. It"
" is always available."
msgstr "该模块提供了一些变量和函数。这些变量可能被解释器使用，也可能由解释器提供。这些函数会影响解释器。本模块总是可用的。"

#: ../../library/sys.rst:16
msgid ""
"On POSIX systems where Python was built with the standard ``configure`` "
"script, this contains the ABI flags as specified by :pep:`3149`."
msgstr ""
"在POSIX系统上，以标准的 ``configure`` 脚本构建的 Python 中，这个变量会包含 :pep:`3149` 中定义的ABI标签。"

#: ../../library/sys.rst:19
msgid ""
"Default flags became an empty string (``m`` flag for pymalloc has been "
"removed)."
msgstr "默认的 flags 变为了空字符串（用于 pymalloc 的 ``m`` 旗标已经移除）"

#: ../../library/sys.rst:28
msgid ""
"Append the callable *hook* to the list of active auditing hooks for the "
"current interpreter."
msgstr "将可调用的 *hook* 附加到当前解释器的活动的审核钩子列表中。"

#: ../../library/sys.rst:31
msgid ""
"When an auditing event is raised through the :func:`sys.audit` function, "
"each hook will be called in the order it was added with the event name and "
"the tuple of arguments. Native hooks added by :c:func:`PySys_AddAuditHook` "
"are called first, followed by hooks added in the current interpreter."
msgstr ""
"通过 :func:`sys.audit` 函数引发审计事件时，将按照加入钩子的先后顺序调用每个钩子，调用时将带有事件名称和参数元组。首先调用由 "
":c:func:`PySys_AddAuditHook` 添加的静态钩子，然后调用添加到当前解释器中的钩子。"

#: ../../library/sys.rstNone
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.addaudithook`` with no "
"arguments."
msgstr "引发一个 :ref:`审计事件 <auditing>` ``sys.addaudithook``，没有附带参数。"

#: ../../library/sys.rst:38
msgid ""
"Raise an auditing event ``sys.addaudithook`` with no arguments. If any "
"existing hooks raise an exception derived from :class:`RuntimeError`, the "
"new hook will not be added and the exception suppressed. As a result, "
"callers cannot assume that their hook has been added unless they control all"
" existing hooks."
msgstr ""
"引发一个审计事件 ``sys.addaudithook``，没有附带参数。如果某个现有的钩子抛出了派生自 :class:`RuntimeError` "
"的异常，则新的钩子不会继续添加，且此次异常会被抑制。如此一来，除非调用者控制着所有现有的钩子，否则无法确保他们的钩子已添加。"

#: ../../library/sys.rst:48
msgid ""
"Exceptions derived from :class:`Exception` but not :class:`RuntimeError` are"
" no longer suppressed."
msgstr "派生自 :class:`Exception` （而非 :class:`RuntimeError` ）的异常不会被抑制。"

#: ../../library/sys.rst:53
msgid ""
"When tracing is enabled (see :func:`settrace`), Python hooks are only traced"
" if the callable has a ``__cantrace__`` member that is set to a true value. "
"Otherwise, trace functions will skip the hook."
msgstr ""
"启用跟踪时（参阅 :func:`settrace` ），仅当可调用对象（钩子）的 ``__cantrace__`` 成员设置为 true "
"时，才会跟踪该钩子。否则，跟踪功能将跳过该钩子。"

#: ../../library/sys.rst:60
msgid ""
"The list of command line arguments passed to a Python script. ``argv[0]`` is"
" the script name (it is operating system dependent whether this is a full "
"pathname or not).  If the command was executed using the :option:`-c` "
"command line option to the interpreter, ``argv[0]`` is set to the string "
"``'-c'``.  If no script name was passed to the Python interpreter, "
"``argv[0]`` is the empty string."
msgstr ""
"一个列表，其中包含了被传递给 Python 脚本的命令行参数。 ``argv[0]`` 为脚本的名称（是否是完整的路径名取决于操作系统）。如果是通过 "
"Python 解释器的命令行参数 :option:`-c` 来执行的， ``argv[0]`` 会被设置成字符串 ``'-c'`` "
"。如果没有脚本名被传递给 Python 解释器， ``argv[0]`` 为空字符串。"

#: ../../library/sys.rst:66
msgid ""
"To loop over the standard input, or the list of files given on the command "
"line, see the :mod:`fileinput` module."
msgstr "为了遍历标准输入，或者通过命令行传递的文件列表，参照 :mod:`fileinput` 模块"

#: ../../library/sys.rst:70
msgid ""
"On Unix, command line arguments are passed by bytes from OS.  Python decodes"
" them with filesystem encoding and \"surrogateescape\" error handler. When "
"you need original bytes, you can get it by ``[os.fsencode(arg) for arg in "
"sys.argv]``."
msgstr ""
"在 Unix 上，系统传递的命令行参数是字节类型的。Python 使用文件系统编码和 \"surrogateescape\" "
"错误处理程序对它们进行解码。当需要原始字节时，可以通过 ``[os.fsencode(arg) for arg in sys.argv]`` 来获取。"

#: ../../library/sys.rst:82
msgid ""
"Raise an auditing event with any active hooks. The event name is a string "
"identifying the event and its associated schema, which is the number and "
"types of arguments. The schema for a given event is considered public and "
"stable API and should not be modified between releases."
msgstr ""
"利用某些活动的钩子引发审计事件。事件名称是一个字符串，用于标记事件及其关联的架构（即参数的数量和类型）。给定事件的架构应视作公开且稳定的 "
"API，并且不应在版本之间进行修改。"

#: ../../library/sys.rst:87
msgid ""
"This function will raise the first exception raised by any hook. In general,"
" these errors should not be handled and should terminate the process as "
"quickly as possible."
msgstr "任何钩子抛出第一个异常时，此函数也将抛出该异常。通常不应处理这些错误，而应尽快终止该进程。"

#: ../../library/sys.rst:91
msgid ""
"Hooks are added using the :func:`sys.addaudithook` or "
":c:func:`PySys_AddAuditHook` functions."
msgstr "钩子程序由 :func:`sys.addaudithook` 或 :c:func:`PySys_AddAuditHook` 函数添加。"

#: ../../library/sys.rst:94
msgid ""
"The native equivalent of this function is :c:func:`PySys_Audit`. Using the "
"native function is preferred when possible."
msgstr "与本函数相等效的原生函数是 :c:func:`PySys_Audit`，应尽量使用原生函数。"

#: ../../library/sys.rst:97
msgid ""
"See the :ref:`audit events table <audit-events>` for all events raised by "
"CPython."
msgstr "参阅 :ref:`审计事件表 <audit-events>` 以获取 CPython 定义的所有审计事件。"

#: ../../library/sys.rst:105
msgid ""
"Set during Python startup, before ``site.py`` is run, to the same value as "
":data:`exec_prefix`. If not running in a :ref:`virtual environment <venv-"
"def>`, the values will stay the same; if ``site.py`` finds that a virtual "
"environment is in use, the values of :data:`prefix` and :data:`exec_prefix` "
"will be changed to point to the virtual environment, whereas "
":data:`base_prefix` and :data:`base_exec_prefix` will remain pointing to the"
" base Python installation (the one which the virtual environment was created"
" from)."
msgstr ""
"在 ``site.py`` 运行之前， Python 启动的时候被设置为跟 :data:`exec_prefix` 同样的值。如果不是运行在 "
":ref:`虚拟环境 <venv-def>` 中，两个值会保持相同；如果 ``site.py`` 发现处于一个虚拟环境中， :data:`prefix`"
" 和 :data:`exec_prefix` 将会指向虚拟环境。然而 :data:`base_prefix` 和 "
":data:`base_exec_prefix` 将仍然会指向基础的 Python 环境（用来创建虚拟环境的 Python 环境）"

#: ../../library/sys.rst:119
msgid ""
"Set during Python startup, before ``site.py`` is run, to the same value as "
":data:`prefix`. If not running in a :ref:`virtual environment <venv-def>`, "
"the values will stay the same; if ``site.py`` finds that a virtual "
"environment is in use, the values of :data:`prefix` and :data:`exec_prefix` "
"will be changed to point to the virtual environment, whereas "
":data:`base_prefix` and :data:`base_exec_prefix` will remain pointing to the"
" base Python installation (the one which the virtual environment was created"
" from)."
msgstr ""
"在 ``site.py`` 运行之前， Python 启动的时候被设置为跟 :data:`prefix` 同样的值。如果不是运行在 :ref:`虚拟环境"
" <venv-def>` 中, 两个值会保持相同；如果 ``site.py`` 发现处于一个虚拟环境中， :data:`prefix` 和 "
":data:`exec_prefix` 将会指向虚拟环境。然而 :data:`base_prefix` 和 "
":data:`base_exec_prefix` 将仍然会指向基础的 Python 环境（用来创建虚拟环境的 Python 环境）"

#: ../../library/sys.rst:132
msgid ""
"An indicator of the native byte order.  This will have the value ``'big'`` "
"on big-endian (most-significant byte first) platforms, and ``'little'`` on "
"little-endian (least-significant byte first) platforms."
msgstr ""
"本地字节顺序的指示符。在大端序（最高有效位优先）操作系统上值为 ``'big'`` ，在小端序（最低有效位优先）操作系统上为 ``'little'`` "
"。"

#: ../../library/sys.rst:139
msgid ""
"A tuple of strings giving the names of all modules that are compiled into "
"this Python interpreter.  (This information is not available in any other "
"way --- ``modules.keys()`` only lists the imported modules.)"
msgstr ""
"一个元素为字符串的元组。包含了所有的被编译进 Python 解释器的模块。（这个信息无法通过其他的办法获取， ``modules.keys()`` "
"只包括被导入过的模块。）"

#: ../../library/sys.rst:146
msgid ""
"Call ``func(*args)``, while tracing is enabled.  The tracing state is saved,"
" and restored afterwards.  This is intended to be called from a debugger "
"from a checkpoint, to recursively debug some other code."
msgstr ""
"在启用跟踪时调用 ``func(*args)``  来保存跟踪状态，然后恢复跟踪状态。这将从检查点的调试器调用，以便递归地调试其他的一些代码。"

#: ../../library/sys.rst:153
msgid ""
"A string containing the copyright pertaining to the Python interpreter."
msgstr "一个字符串，包含了 Python 解释器有关的版权信息"

#: ../../library/sys.rst:158
msgid ""
"Clear the internal type cache. The type cache is used to speed up attribute "
"and method lookups. Use the function *only* to drop unnecessary references "
"during reference leak debugging."
msgstr "清除内部的类型缓存。类型缓存是为了加速查找方法和属性的。在调试引用泄漏的时候调用这个函数 *只会* 清除不必要的引用。"

#: ../../library/sys.rst:162 ../../library/sys.rst:178
msgid ""
"This function should be used for internal and specialized purposes only."
msgstr "这个函数应该只在内部为了一些特定的目的使用。"

#: ../../library/sys.rst:167
msgid ""
"Return a dictionary mapping each thread's identifier to the topmost stack "
"frame currently active in that thread at the time the function is called. "
"Note that functions in the :mod:`traceback` module can build the call stack "
"given such a frame."
msgstr ""
"返回一个字典，存放着每个线程的标识符与（调用本函数时）该线程栈顶的帧（当前活动的帧）之间的映射。注意 :mod:`traceback` "
"模块中的函数可以在给定某一帧的情况下构建调用堆栈。"

#: ../../library/sys.rst:172
msgid ""
"This is most useful for debugging deadlock:  this function does not require "
"the deadlocked threads' cooperation, and such threads' call stacks are "
"frozen for as long as they remain deadlocked.  The frame returned for a non-"
"deadlocked thread may bear no relationship to that thread's current activity"
" by the time calling code examines the frame."
msgstr ""
"这对于调试死锁最有用：本函数不需要死锁线程的配合，并且只要这些线程的调用栈保持死锁，它们就是冻结的。在调用本代码来检查栈顶的帧的那一刻，非死锁线程返回的帧可能与该线程当前活动的帧没有任何关系。"

#: ../../library/sys.rst:180
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys._current_frames`` with no "
"arguments."
msgstr "引发一个 :ref:`审计事件 <auditing>` ``sys._current_frames``，没有附带参数。"

#: ../../library/sys.rst:185
msgid ""
"This hook function is called by built-in :func:`breakpoint`.  By default, it"
" drops you into the :mod:`pdb` debugger, but it can be set to any other "
"function so that you can choose which debugger gets used."
msgstr ""
"本钩子函数由内建函数 :func:`breakpoint` 调用。默认情况下，它将进入 :mod:`pdb` "
"调试器，但可以将其改为任何其他函数，以选择使用哪个调试器。"

#: ../../library/sys.rst:189
msgid ""
"The signature of this function is dependent on what it calls.  For example, "
"the default binding (e.g. ``pdb.set_trace()``) expects no arguments, but you"
" might bind it to a function that expects additional arguments (positional "
"and/or keyword).  The built-in ``breakpoint()`` function passes its "
"``*args`` and ``**kws`` straight through.  Whatever ``breakpointhooks()`` "
"returns is returned from ``breakpoint()``."
msgstr ""
"该函数的特征取决于其调用的函数。例如，默认绑定（即 ``pdb.set_trace()`` "
"）不要求提供参数，但可以将绑定换成要求提供附加参数（位置参数/关键字参数）的函数。内建函数 ``breakpoint()`` 直接将其 "
"``*args`` 和 ``**kws`` 传入。``breakpointhooks()`` 返回的所有内容都会从 ``breakpoint()`` "
"返回。"

#: ../../library/sys.rst:196
msgid ""
"The default implementation first consults the environment variable "
":envvar:`PYTHONBREAKPOINT`.  If that is set to ``\"0\"`` then this function "
"returns immediately; i.e. it is a no-op.  If the environment variable is not"
" set, or is set to the empty string, ``pdb.set_trace()`` is called. "
"Otherwise this variable should name a function to run, using Python's "
"dotted-import nomenclature, e.g. ``package.subpackage.module.function``. In "
"this case, ``package.subpackage.module`` would be imported and the resulting"
" module must have a callable named ``function()``.  This is run, passing in "
"``*args`` and ``**kws``, and whatever ``function()`` returns, "
"``sys.breakpointhook()`` returns to the built-in :func:`breakpoint` "
"function."
msgstr ""
"默认的实现首先会查询环境变量 :envvar:`PYTHONBREAKPOINT`。如果将该变量设置为 "
"``\"0\"``，则本函数立即返回，表示在断点处无操作。如果未设置该环境变量或将其设置为空字符串，则调用 "
"``pdb.set_trace()``。否则，此变量应指定要运行的函数，指定函数时应使用 Python 的点导入命名法，如 "
"``package.subpackage.module.function``。这种情况下将导入 "
"``package.subpackage.module``，且导入的模块必须有一个名为 ``function()`` "
"的可调用对象。该可调用对象会运行，``*args`` 和 ``**kws`` 会传入，且无论 ``function()`` "
"返回什么，``sys.breakpointhook()`` 都将返回到內建函数 :func:`breakpoint`。"

#: ../../library/sys.rst:208
msgid ""
"Note that if anything goes wrong while importing the callable named by "
":envvar:`PYTHONBREAKPOINT`, a :exc:`RuntimeWarning` is reported and the "
"breakpoint is ignored."
msgstr ""
"注意，如果在导入 :envvar:`PYTHONBREAKPOINT` 指定的可调用对象时出错，则将报告一个 :exc:`RuntimeWarning`"
" 并忽略断点。"

#: ../../library/sys.rst:212
msgid ""
"Also note that if ``sys.breakpointhook()`` is overridden programmatically, "
":envvar:`PYTHONBREAKPOINT` is *not* consulted."
msgstr ""
"另请注意，如果以编程方式覆盖 ``sys.breakpointhook()``，则 *不会* 查询 "
":envvar:`PYTHONBREAKPOINT`。"

#: ../../library/sys.rst:219
msgid ""
"Print low-level information to stderr about the state of CPython's memory "
"allocator."
msgstr "将有关 CPython 内存分配器状态的底层的信息打印至 stderr。"

#: ../../library/sys.rst:222
msgid ""
"If Python is configured --with-pydebug, it also performs some expensive "
"internal consistency checks."
msgstr "如果 Python 被配置为 --with-pydebug，本方法还将执行一些开销较大的内部一致性检查。"

#: ../../library/sys.rst:229
msgid ""
"This function is specific to CPython.  The exact output format is not "
"defined here, and may change."
msgstr "本函数仅限 CPython。此处没有定义确切的输出格式，且可能会更改。"

#: ../../library/sys.rst:235
msgid "Integer specifying the handle of the Python DLL."
msgstr "指向 Python DLL 句柄的整数。"

#: ../../library/sys.rst:237 ../../library/sys.rst:772
#: ../../library/sys.rst:1428 ../../library/sys.rst:1634
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`可用性 <availability>`: Windows。"

#: ../../library/sys.rst:242
msgid ""
"If *value* is not ``None``, this function prints ``repr(value)`` to "
"``sys.stdout``, and saves *value* in ``builtins._``. If ``repr(value)`` is "
"not encodable to ``sys.stdout.encoding`` with ``sys.stdout.errors`` error "
"handler (which is probably ``'strict'``), encode it to "
"``sys.stdout.encoding`` with ``'backslashreplace'`` error handler."
msgstr ""
"如果 *value* 不是 ``None``，则本函数会将 ``repr(value)`` 打印至 ``sys.stdout``，并将 *value* "
"保存在 ``builtins._`` 中。如果 ``repr(value)`` 无法用 ``sys.stdout.errors`` "
"错误回调方法（可能较为“严格”）编码为 ``sys.stdout.encoding``，请用 ``'backslashreplace'`` "
"错误回调方法将其编码为 ``sys.stdout.encoding``。"

#: ../../library/sys.rst:248
msgid ""
"``sys.displayhook`` is called on the result of evaluating an "
":term:`expression` entered in an interactive Python session.  The display of"
" these values can be customized by assigning another one-argument function "
"to ``sys.displayhook``."
msgstr ""
"在交互式 Python 会话中运行 :term:`expression` 产生结果后，将在结果上调用 "
"``sys.displayhook``。若要自定义这些 value 的显示，可以将 ``sys.displayhook`` 指定为另一个单参数函数。"

#: ../../library/sys.rst:252
msgid "Pseudo-code::"
msgstr "伪代码::"

#: ../../library/sys.rst:272
msgid "Use ``'backslashreplace'`` error handler on :exc:`UnicodeEncodeError`."
msgstr "在发生 :exc:`UnicodeEncodeError` 时使用 ``'backslashreplace'`` 错误回调方法。"

#: ../../library/sys.rst:278
msgid ""
"If this is true, Python won't try to write ``.pyc`` files on the import of "
"source modules.  This value is initially set to ``True`` or ``False`` "
"depending on the :option:`-B` command line option and the "
":envvar:`PYTHONDONTWRITEBYTECODE` environment variable, but you can set it "
"yourself to control bytecode file generation."
msgstr ""
"如果该值为 true，则 Python 在导入源码模块时将不会尝试写入 ``.pyc`` 文件。该值会被初始化为 ``True`` 或 "
"``False``，依据是 :option:`-B` 命令行选项和 :envvar:`PYTHONDONTWRITEBYTECODE` "
"环境变量，可以自行设置该值，来控制是否生成字节码文件。"

#: ../../library/sys.rst:287
msgid ""
"If this is set (not ``None``), Python will write bytecode-cache ``.pyc`` "
"files to (and read them from) a parallel directory tree rooted at this "
"directory, rather than from ``__pycache__`` directories in the source code "
"tree. Any ``__pycache__`` directories in the source code tree will be "
"ignored and new `.pyc` files written within the pycache prefix. Thus if you "
"use :mod:`compileall` as a pre-build step, you must ensure you run it with "
"the same pycache prefix (if any) that you will use at runtime."
msgstr ""
"如果将该选项设为某个目录（不是 ``None`` ），Python 会将字节码缓存文件 ``.pyc`` "
"写入到以该目录为根的并行目录树中（并从中读取），而不是在源码树中的 ``__pycache__`` 目录下读写。源码树中所有的 "
"``__pycache__`` 目录都将被忽略，并将在 pycache prefix 内写入新的 `.pyc` 文件。因此，如果使用 "
":mod:`compileall` 作为预构建步骤，则必须确保预构建时使用的 pycache prefix （如果有）与将来运行的时候相同。"

#: ../../library/sys.rst:295
msgid ""
"A relative path is interpreted relative to the current working directory."
msgstr "相对路径将解释为相对于当前工作目录。"

#: ../../library/sys.rst:297
msgid ""
"This value is initially set based on the value of the :option:`-X` "
"``pycache_prefix=PATH`` command-line option or the "
":envvar:`PYTHONPYCACHEPREFIX` environment variable (command-line takes "
"precedence). If neither are set, it is ``None``."
msgstr ""
"该值的初值设置，依据 :option:`-X` ``pycache_prefix=PATH`` 命令行选项或 "
":envvar:`PYTHONPYCACHEPREFIX` 环境变量的值（命令行优先）。如果两者均未设置，则为 ``None``。"

#: ../../library/sys.rst:307
msgid ""
"This function prints out a given traceback and exception to ``sys.stderr``."
msgstr "本函数会将所给的回溯和异常输出到 ``sys.stderr`` 中。"

#: ../../library/sys.rst:309
msgid ""
"When an exception is raised and uncaught, the interpreter calls "
"``sys.excepthook`` with three arguments, the exception class, exception "
"instance, and a traceback object.  In an interactive session this happens "
"just before control is returned to the prompt; in a Python program this "
"happens just before the program exits.  The handling of such top-level "
"exceptions can be customized by assigning another three-argument function to"
" ``sys.excepthook``."
msgstr ""
"当抛出一个异常，且未被捕获时，解释器将调用 ``sys.excepthook`` "
"并带有三个参数：异常类、异常实例和一个回溯对象。在交互式会话中，这会在控制权返回到提示符之前发生。在 Python "
"程序中，这会在程序退出之前发生。如果要自定义此类顶级异常的处理过程，可以将另一个 3 个参数的函数赋给 ``sys.excepthook``。"

#: ../../library/sys.rstNone
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.excepthook`` with arguments"
" ``hook``, ``type``, ``value``, ``traceback``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``sys.excepthook``，附带参数 ``hook``, ``type``, "
"``value``, ``traceback``。"

#: ../../library/sys.rst:318
msgid ""
"Raise an auditing event ``sys.excepthook`` with arguments ``hook``, "
"``type``, ``value``, ``traceback`` when an uncaught exception occurs. If no "
"hook has been set, ``hook`` may be ``None``. If any hook raises an exception"
" derived from :class:`RuntimeError` the call to the hook will be suppressed."
" Otherwise, the audit hook exception will be reported as unraisable and "
"``sys.excepthook`` will be called."
msgstr ""
"当发生未捕获的异常时，引发一个审计事件 ``sys.excepthook``，附带参数 ``hook``, ``type``, ``value``, "
"``traceback``。如果没有设置钩子，``hook`` 可能为 ``None``。如果某个钩子抛出了派生自 "
":class:`RuntimeError` 的异常，则将禁止对该钩子的调用。否则，审计钩子的异常将被报告为无法抛出，并将调用 "
"``sys.excepthook``。"

#: ../../library/sys.rst:327
msgid ""
"The :func:`sys.unraisablehook` function handles unraisable exceptions and "
"the :func:`threading.excepthook` function handles exception raised by "
":func:`threading.Thread.run`."
msgstr ""
":func:`sys.unraisablehook` 函数处理无法抛出的异常，:func:`threading.excepthook` 函数处理 "
":func:`threading.Thread.run` 抛出的异常。"

#: ../../library/sys.rst:337
msgid ""
"These objects contain the original values of ``breakpointhook``, "
"``displayhook``, ``excepthook``, and ``unraisablehook`` at the start of the "
"program.  They are saved so that ``breakpointhook``, ``displayhook`` and "
"``excepthook``, ``unraisablehook`` can be restored in case they happen to "
"get replaced with broken or alternative objects."
msgstr ""
"程序开始时，这些对象存有 ``breakpointhook``、``displayhook``、``excepthook`` 和 "
"``unraisablehook`` 的初始值。保存它们是为了可以在 ``breakpointhook``、``displayhook`` 和 "
"``excepthook``、``unraisablehook`` 被破坏或被替换时恢复它们。"

#: ../../library/sys.rst:343
msgid "__breakpointhook__"
msgstr "__breakpointhook__"

#: ../../library/sys.rst:346
msgid "__unraisablehook__"
msgstr "__unraisablehook__"

#: ../../library/sys.rst:351
msgid ""
"This function returns a tuple of three values that give information about "
"the exception that is currently being handled.  The information returned is "
"specific both to the current thread and to the current stack frame.  If the "
"current stack frame is not handling an exception, the information is taken "
"from the calling stack frame, or its caller, and so on until a stack frame "
"is found that is handling an exception.  Here, \"handling an exception\" is "
"defined as \"executing an except clause.\"  For any stack frame, only "
"information about the exception being currently handled is accessible."
msgstr ""
"本函数返回的元组包含三个值，它们给出当前正在处理的异常的信息。返回的信息仅限于当前线程和当前堆栈帧。如果当前堆栈帧没有正在处理的异常，则信息将从调用的下级堆栈帧或上级调用者等位置获取，依此类推，直到找到正在处理异常的堆栈帧为止。此处的“处理异常”被定义为“执行"
" except 子句”。任何堆栈帧都只能访问当前正在处理的异常的信息。"

#: ../../library/sys.rst:362
msgid ""
"If no exception is being handled anywhere on the stack, a tuple containing "
"three ``None`` values is returned.  Otherwise, the values returned are "
"``(type, value, traceback)``.  Their meaning is: *type* gets the type of the"
" exception being handled (a subclass of :exc:`BaseException`); *value* gets "
"the exception instance (an instance of the exception type); *traceback* gets"
" a :ref:`traceback object <traceback-objects>` which encapsulates the call "
"stack at the point where the exception originally occurred."
msgstr ""
"如果整个堆栈都没有正在处理的异常，则返回包含三个 ``None`` 值的元组。否则返回值为 ``(type, value, "
"traceback)``。它们的含义是：*type* 是正在处理的异常类型（它是 :exc:`BaseException` 的子类）；*value* "
"是异常实例（异常类型的实例）；*traceback* 是一个 :ref:`回溯对象 <traceback-"
"objects>`，该对象封装了最初发生异常时的调用堆栈。"

#: ../../library/sys.rst:373
msgid ""
"A string giving the site-specific directory prefix where the platform-"
"dependent Python files are installed; by default, this is also "
"``'/usr/local'``.  This can be set at build time with the ``--exec-prefix`` "
"argument to the :program:`configure` script.  Specifically, all "
"configuration files (e.g. the :file:`pyconfig.h` header file) are installed "
"in the directory :file:`{exec_prefix}/lib/python{X.Y}/config`, and shared "
"library modules are installed in :file:`{exec_prefix}/lib/python{X.Y}/lib-"
"dynload`, where *X.Y* is the version number of Python, for example ``3.2``."
msgstr ""
"一个字符串，给出特定域的目录前缀，该目录中安装了与平台相关的 Python 文件，默认也是 ``'/usr/local'``。该目录前缀可以在构建时使用"
" :program:`configure` 脚本的 ``--exec-prefix`` 参数进行设置。具体而言，所有配置文件（如 "
":file:`pyconfig.h` 头文件）都安装在目录 :file:`{exec_prefix}/lib/python{X.Y}/config` "
"中，共享库模块安装在 :file:`{exec_prefix}/lib/python{X.Y}/lib-dynload` 中，其中 *X.Y* 是 "
"Python 的版本号，如 ``3.2``。"

#: ../../library/sys.rst:384
msgid ""
"If a :ref:`virtual environment <venv-def>` is in effect, this value will be "
"changed in ``site.py`` to point to the virtual environment. The value for "
"the Python installation will still be available, via "
":data:`base_exec_prefix`."
msgstr ""
"如果在一个 :ref:`虚拟环境 <venv-def>` 中，那么该值将在 ``site.py`` 中被修改，指向虚拟环境。Python "
"安装位置仍然可以用 :data:`base_exec_prefix` 来获取。"

#: ../../library/sys.rst:392
msgid ""
"A string giving the absolute path of the executable binary for the Python "
"interpreter, on systems where this makes sense. If Python is unable to "
"retrieve the real path to its executable, :data:`sys.executable` will be an "
"empty string or ``None``."
msgstr ""
"一个字符串，提供 Python 解释器的可执行二进制文件的绝对路径，仅在部分系统中此值有意义。如果 Python 无法获取其可执行文件的真实路径，则 "
":data:`sys.executable` 将为空字符串或 ``None``。"

#: ../../library/sys.rst:400
msgid ""
"Exit from Python.  This is implemented by raising the :exc:`SystemExit` "
"exception, so cleanup actions specified by finally clauses of :keyword:`try`"
" statements are honored, and it is possible to intercept the exit attempt at"
" an outer level."
msgstr ""
"从Python中退出。实现方式是抛出一个 :exc:`SystemExit` 异常。异常抛出后 :keyword:`try` 声明的 finally "
"分支语句的清除动作将被出发。此动作有可能打断更外层的退出尝试。"

#: ../../library/sys.rst:405
msgid ""
"The optional argument *arg* can be an integer giving the exit status "
"(defaulting to zero), or another type of object.  If it is an integer, zero "
"is considered \"successful termination\" and any nonzero value is considered"
" \"abnormal termination\" by shells and the like.  Most systems require it "
"to be in the range 0--127, and produce undefined results otherwise.  Some "
"systems have a convention for assigning specific meanings to specific exit "
"codes, but these are generally underdeveloped; Unix programs generally use 2"
" for command line syntax errors and 1 for all other kind of errors.  If "
"another type of object is passed, ``None`` is equivalent to passing zero, "
"and any other object is printed to :data:`stderr` and results in an exit "
"code of 1.  In particular, ``sys.exit(\"some error message\")`` is a quick "
"way to exit a program when an error occurs."
msgstr ""
"可选参数 *arg* 可以是表示退出状态的整数（默认为 0），也可以是其他类型的对象。如果它是整数，则 shell 等将 0 "
"视为“成功终止”，非零值视为“异常终止”。大多数系统要求该值的范围是 0--"
"127，否则会产生不确定的结果。某些系统为退出代码约定了特定的含义，但通常尚不完善；Unix 程序通常用 2 表示命令行语法错误，用 1 "
"表示所有其他类型的错误。传入其他类型的对象，如果传入 ``None`` 等同于传入 0，如果传入其他对象则将其打印至 "
":data:`stderr`，且退出代码为 1。特别地，``sys.exit(\"some error message\")`` "
"可以在发生错误时快速退出程序。"

#: ../../library/sys.rst:418
msgid ""
"Since :func:`exit` ultimately \"only\" raises an exception, it will only "
"exit the process when called from the main thread, and the exception is not "
"intercepted."
msgstr "由于 :func:`exit` 最终“只是”抛出一个异常，因此当从主线程调用时，只会从进程退出；而异常不会因此被打断。"

#: ../../library/sys.rst:422
msgid ""
"If an error occurs in the cleanup after the Python interpreter has caught "
":exc:`SystemExit` (such as an error flushing buffered data in the standard "
"streams), the exit status is changed to 120."
msgstr ""
"在 Python 解释器捕获 :exc:`SystemExit` 后，如果在清理中发生错误（如清除标准流中的缓冲数据时出错），则退出状态码将变为 "
"120。"

#: ../../library/sys.rst:430
msgid ""
"The :term:`named tuple` *flags* exposes the status of command line flags. "
"The attributes are read only."
msgstr ":term:`具名元组 <named tuple>` *flags* 含有命令行标志的状态。这些属性是只读的。"

#: ../../library/sys.rst:434 ../../library/sys.rst:482
#: ../../library/sys.rst:817
msgid "attribute"
msgstr "attribute -- 属性"

#: ../../library/sys.rst:434
msgid "flag"
msgstr "标志"

#: ../../library/sys.rst:436
msgid ":const:`debug`"
msgstr ":const:`debug`"

#: ../../library/sys.rst:436
msgid ":option:`-d`"
msgstr ":option:`-d`"

#: ../../library/sys.rst:437
msgid ":const:`inspect`"
msgstr ":const:`inspect`"

#: ../../library/sys.rst:437 ../../library/sys.rst:438
msgid ":option:`-i`"
msgstr ":option:`-i`"

#: ../../library/sys.rst:438
msgid ":const:`interactive`"
msgstr ":const:`interactive`"

#: ../../library/sys.rst:439
msgid ":const:`isolated`"
msgstr ":const:`isolated`"

#: ../../library/sys.rst:439
msgid ":option:`-I`"
msgstr ":option:`-I`"

#: ../../library/sys.rst:440
msgid ":const:`optimize`"
msgstr ":const:`optimize`"

#: ../../library/sys.rst:440
msgid ":option:`-O` or :option:`-OO`"
msgstr ":option:`-O` 或 :option:`-OO`"

#: ../../library/sys.rst:441
msgid ":const:`dont_write_bytecode`"
msgstr ":const:`dont_write_bytecode`"

#: ../../library/sys.rst:441
msgid ":option:`-B`"
msgstr ":option:`-B`"

#: ../../library/sys.rst:442
msgid ":const:`no_user_site`"
msgstr ":const:`no_user_site`"

#: ../../library/sys.rst:442
msgid ":option:`-s`"
msgstr ":option:`-s`"

#: ../../library/sys.rst:443
msgid ":const:`no_site`"
msgstr ":const:`no_site`"

#: ../../library/sys.rst:443
msgid ":option:`-S`"
msgstr ":option:`-S`"

#: ../../library/sys.rst:444
msgid ":const:`ignore_environment`"
msgstr ":const:`ignore_environment`"

#: ../../library/sys.rst:444
msgid ":option:`-E`"
msgstr ":option:`-E`"

#: ../../library/sys.rst:445
msgid ":const:`verbose`"
msgstr ":const:`verbose`"

#: ../../library/sys.rst:445
msgid ":option:`-v`"
msgstr ":option:`-v`"

#: ../../library/sys.rst:446
msgid ":const:`bytes_warning`"
msgstr ":const:`bytes_warning`"

#: ../../library/sys.rst:446
msgid ":option:`-b`"
msgstr ":option:`-b`"

#: ../../library/sys.rst:447
msgid ":const:`quiet`"
msgstr ":const:`quiet`"

#: ../../library/sys.rst:447
msgid ":option:`-q`"
msgstr ":option:`-q`"

#: ../../library/sys.rst:448
msgid ":const:`hash_randomization`"
msgstr ":const:`hash_randomization`"

#: ../../library/sys.rst:448
msgid ":option:`-R`"
msgstr ":option:`-R`"

#: ../../library/sys.rst:449
msgid ":const:`dev_mode`"
msgstr ":const:`dev_mode`"

#: ../../library/sys.rst:449
msgid ":option:`-X` ``dev``"
msgstr ":option:`-X` ``dev``"

#: ../../library/sys.rst:450
msgid ":const:`utf8_mode`"
msgstr ":const:`utf8_mode`"

#: ../../library/sys.rst:450
msgid ":option:`-X` ``utf8``"
msgstr ":option:`-X` ``utf8``"

#: ../../library/sys.rst:453
msgid "Added ``quiet`` attribute for the new :option:`-q` flag."
msgstr "为新的 :option:`-q` 标志添加了 ``quiet`` 属性"

#: ../../library/sys.rst:456
msgid "The ``hash_randomization`` attribute."
msgstr "``hash_randomization`` 属性"

#: ../../library/sys.rst:459
msgid "Removed obsolete ``division_warning`` attribute."
msgstr "删除了过时的 ``division_warning`` 属性"

#: ../../library/sys.rst:462
msgid "Added ``isolated`` attribute for :option:`-I` ``isolated`` flag."
msgstr "为 :option:`-I` ``isolated`` 标志添加了 ``isolated`` 属性。"

#: ../../library/sys.rst:465
msgid ""
"Added ``dev_mode`` attribute for the new :option:`-X` ``dev`` flag and "
"``utf8_mode`` attribute for the new  :option:`-X` ``utf8`` flag."
msgstr ""

#: ../../library/sys.rst:472
msgid ""
"A :term:`named tuple` holding information about the float type. It contains "
"low level information about the precision and internal representation.  The "
"values correspond to the various floating-point constants defined in the "
"standard header file :file:`float.h` for the 'C' programming language; see "
"section 5.2.4.2.2 of the 1999 ISO/IEC C standard [C99]_, 'Characteristics of"
" floating types', for details."
msgstr ""
"一个 :term:`具名元组 <named tuple>`，存有浮点型的相关信息。它包含的是关于精度和内部表示的底层信息。这些值与标准头文件 "
":file:`float.h` 中为 C 语言定义的各种浮点常量对应，详情请参阅 1999 ISO/IEC C 标准 [C99]_ 的 "
"5.2.4.2.2 节，'Characteristics of floating types（浮点型的特性）'。"

#: ../../library/sys.rst:482
msgid "float.h macro"
msgstr "float.h 宏"

#: ../../library/sys.rst:482 ../../library/sys.rst:817
msgid "explanation"
msgstr "说明"

#: ../../library/sys.rst:484
msgid ":const:`epsilon`"
msgstr ":const:`epsilon`"

#: ../../library/sys.rst:484
msgid "DBL_EPSILON"
msgstr "DBL_EPSILON"

#: ../../library/sys.rst:484
msgid ""
"difference between 1.0 and the least value greater than 1.0 that is "
"representable as a float"
msgstr "大于 1.0 的最小值和 1.0 之间的差，表示为浮点数"

#: ../../library/sys.rst:487
msgid ":const:`dig`"
msgstr ":const:`dig`"

#: ../../library/sys.rst:487
msgid "DBL_DIG"
msgstr "DBL_DIG"

#: ../../library/sys.rst:487
msgid ""
"maximum number of decimal digits that can be faithfully represented in a "
"float;  see below"
msgstr "浮点数可以真实表示的最大十进制数字；见下文"

#: ../../library/sys.rst:490
msgid ":const:`mant_dig`"
msgstr ":const:`mant_dig`"

#: ../../library/sys.rst:490
msgid "DBL_MANT_DIG"
msgstr "DBL_MANT_DIG"

#: ../../library/sys.rst:490
msgid ""
"float precision: the number of base-``radix`` digits in the significand of a"
" float"
msgstr "浮点数精度：``radix`` 基数下的浮点数有效位数"

#: ../../library/sys.rst:493
msgid ":const:`max`"
msgstr ":const:`max`"

#: ../../library/sys.rst:493
msgid "DBL_MAX"
msgstr "DBL_MAX"

#: ../../library/sys.rst:493
msgid "maximum representable positive finite float"
msgstr "最大可表示的正有限浮点数"

#: ../../library/sys.rst:495
msgid ":const:`max_exp`"
msgstr ":const:`max_exp`"

#: ../../library/sys.rst:495
msgid "DBL_MAX_EXP"
msgstr "DBL_MAX_EXP"

#: ../../library/sys.rst:495
msgid ""
"maximum integer *e* such that ``radix**(e-1)`` is a representable finite "
"float"
msgstr "使得 ``radix**(e-1)`` 是可表示的浮点数（非无穷）的最大整数 *e*"

#: ../../library/sys.rst:498
msgid ":const:`max_10_exp`"
msgstr ":const:`max_10_exp`"

#: ../../library/sys.rst:498
msgid "DBL_MAX_10_EXP"
msgstr "DBL_MAX_10_EXP"

#: ../../library/sys.rst:498
msgid ""
"maximum integer *e* such that ``10**e`` is in the range of representable "
"finite floats"
msgstr "使得 ``10**e`` 在可表示的浮点数（非无穷）范围内的最大整数 *e*"

#: ../../library/sys.rst:501
msgid ":const:`min`"
msgstr ":const:`min`"

#: ../../library/sys.rst:501
msgid "DBL_MIN"
msgstr "DBL_MIN"

#: ../../library/sys.rst:501
msgid "minimum representable positive *normalized* float"
msgstr "可表示的最小正 *规格化* 浮点数"

#: ../../library/sys.rst:503
msgid ":const:`min_exp`"
msgstr ":const:`min_exp`"

#: ../../library/sys.rst:503
msgid "DBL_MIN_EXP"
msgstr "DBL_MIN_EXP"

#: ../../library/sys.rst:503
msgid "minimum integer *e* such that ``radix**(e-1)`` is a normalized float"
msgstr "使得 ``radix**(e-1)`` 是规格化浮点数的最小整数 *e*"

#: ../../library/sys.rst:506
msgid ":const:`min_10_exp`"
msgstr ":const:`min_10_exp`"

#: ../../library/sys.rst:506
msgid "DBL_MIN_10_EXP"
msgstr "DBL_MIN_10_EXP"

#: ../../library/sys.rst:506
msgid "minimum integer *e* such that ``10**e`` is a normalized float"
msgstr "使得 ``10**e`` 是规格化浮点数的最小整数 *e*"

#: ../../library/sys.rst:509
msgid ":const:`radix`"
msgstr ":const:`radix`"

#: ../../library/sys.rst:509
msgid "FLT_RADIX"
msgstr "FLT_RADIX"

#: ../../library/sys.rst:509
msgid "radix of exponent representation"
msgstr "指数表示法中采用的基数"

#: ../../library/sys.rst:511
msgid ":const:`rounds`"
msgstr ":const:`rounds`"

#: ../../library/sys.rst:511
msgid "FLT_ROUNDS"
msgstr "FLT_ROUNDS"

#: ../../library/sys.rst:511
msgid ""
"integer constant representing the rounding mode used for arithmetic "
"operations.  This reflects the value of the system FLT_ROUNDS macro at "
"interpreter startup time.  See section 5.2.4.2.2 of the C99 standard for an "
"explanation of the possible values and their meanings."
msgstr ""
"整数常数，表示算术运算中的舍入方式。它反映了解释器启动时系统的 FLT_ROUNDS 宏的值。关于可能的值及其含义的说明，请参阅 C99 标准 "
"5.2.4.2.2 节。"

#: ../../library/sys.rst:519
msgid ""
"The attribute :attr:`sys.float_info.dig` needs further explanation.  If "
"``s`` is any string representing a decimal number with at most "
":attr:`sys.float_info.dig` significant digits, then converting ``s`` to a "
"float and back again will recover a string representing the same decimal "
"value::"
msgstr ""
"关于 :attr:`sys.float_info.dig` 属性的进一步说明。如果 ``s`` 是表示十进制数的字符串，而该数最多有 "
":attr:`sys.float_info.dig` 位有效数字，则将 ``s`` 转换为 float 再转回去将恢复原先相同十进制值的字符串::"

#: ../../library/sys.rst:532
msgid ""
"But for strings with more than :attr:`sys.float_info.dig` significant "
"digits, this isn't always true::"
msgstr "但是对于超过 :attr:`sys.float_info.dig` 位有效数字的字符串，转换前后并非总是相同::"

#: ../../library/sys.rst:541
msgid ""
"A string indicating how the :func:`repr` function behaves for floats.  If "
"the string has value ``'short'`` then for a finite float ``x``, ``repr(x)`` "
"aims to produce a short string with the property that ``float(repr(x)) == "
"x``.  This is the usual behaviour in Python 3.1 and later.  Otherwise, "
"``float_repr_style`` has value ``'legacy'`` and ``repr(x)`` behaves in the "
"same way as it did in versions of Python prior to 3.1."
msgstr ""
"一个字符串，反映 :func:`repr` 函数在浮点数上的行为。如果该字符串是 ``'short'``，那么对于（非无穷的）浮点数 "
"``x``，``repr(x)`` 将会生成一个短字符串，满足 ``float(repr(x)) == x`` 的特性。这是 Python 3.1 "
"及更高版本中的常见行为。否则 ``float_repr_style`` 的值将是 ``'legacy'``，此时 ``repr(x)`` 的行为方式将与"
" Python 3.1 之前的版本相同。"

#: ../../library/sys.rst:554
msgid ""
"Return the number of memory blocks currently allocated by the interpreter, "
"regardless of their size.  This function is mainly useful for tracking and "
"debugging memory leaks.  Because of the interpreter's internal caches, the "
"result can vary from call to call; you may have to call "
":func:`_clear_type_cache()` and :func:`gc.collect()` to get more predictable"
" results."
msgstr ""
"返回解释器当前已分配的内存块数，无论它们大小如何。本函数主要用于跟踪和调试内存泄漏。因为解释器有内部缓存，所以不同调用之间结果会变化。可能需要调用 "
":func:`_clear_type_cache()` 和 :func:`gc.collect()` 使结果更容易预测。"

#: ../../library/sys.rst:561
msgid ""
"If a Python build or implementation cannot reasonably compute this "
"information, :func:`getallocatedblocks()` is allowed to return 0 instead."
msgstr "如果当前 Python 构建或实现无法合理地计算此信息，允许 :func:`getallocatedblocks()` 返回 0。"

#: ../../library/sys.rst:569
msgid "Return the build time API version of Android as an integer."
msgstr "返回一个整数，表示 Android 构建时 API 版本。"

#: ../../library/sys.rst:572
msgid ":ref:`Availability <availability>`: Android."
msgstr ":ref:`可用性 <availability>`：Android。"

#: ../../library/sys.rst:578
msgid "Return the interpreter's \"check interval\"; see :func:`setcheckinterval`."
msgstr ""

#: ../../library/sys.rst:580
msgid "Use :func:`getswitchinterval` instead."
msgstr ""

#: ../../library/sys.rst:586
msgid ""
"Return the name of the current default string encoding used by the Unicode "
"implementation."
msgstr "返回当前 Unicode 实现所使用的默认字符串编码名称。"

#: ../../library/sys.rst:592
msgid ""
"Return the current value of the flags that are used for :c:func:`dlopen` "
"calls.  Symbolic names for the flag values can be found in the :mod:`os` "
"module (``RTLD_xxx`` constants, e.g. :data:`os.RTLD_LAZY`)."
msgstr ""
"返回当前 :c:func:`dlopen` 调用所使用的标志位的值。标志值对应的符号名称可以在 :mod:`os` 模块中找到（形如 "
"``RTLD_xxx`` 的常量，如 :data:`os.RTLD_LAZY` ）。"

#: ../../library/sys.rst:597 ../../library/sys.rst:1201
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`可用性 <availability>`: Unix。"

#: ../../library/sys.rst:602
msgid ""
"Return the name of the encoding used to convert between Unicode filenames "
"and bytes filenames. For best compatibility, str should be used for "
"filenames in all cases, although representing filenames as bytes is also "
"supported. Functions accepting or returning filenames should support either "
"str or bytes and internally convert to the system's preferred "
"representation."
msgstr ""
"返回编码名称，该编码用于在 Unicode 文件名和 bytes 文件名之间转换。为获得最佳兼容性，任何时候都应使用 str "
"表示文件名，尽管用字节来表示文件名也是支持的。函数如果需要接受或返回文件名，它应支持 str 或 bytes，并在内部将其转换为系统首选的表示形式。"

#: ../../library/sys.rst:609
msgid "This encoding is always ASCII-compatible."
msgstr "该编码始终是 ASCII 兼容的。"

#: ../../library/sys.rst:611 ../../library/sys.rst:644
msgid ""
":func:`os.fsencode` and :func:`os.fsdecode` should be used to ensure that "
"the correct encoding and errors mode are used."
msgstr "应使用 :func:`os.fsencode` 和 :func:`os.fsdecode` 来保证所采用的编码和错误模式都是正确的。"

#: ../../library/sys.rst:614
msgid "In the UTF-8 mode, the encoding is ``utf-8`` on any platform."
msgstr "在UTF-8模式下，任何平台上的编码均为 ``utf-8`` 。"

#: ../../library/sys.rst:616
msgid "On macOS, the encoding is ``'utf-8'``."
msgstr "在macOS上，编码为 ``'utf-8'``。"

#: ../../library/sys.rst:618
msgid "On Unix, the encoding is the locale encoding."
msgstr "在Unix上，编码是语言环境编码。"

#: ../../library/sys.rst:620
msgid ""
"On Windows, the encoding may be ``'utf-8'`` or ``'mbcs'``, depending on user"
" configuration."
msgstr "在Windows上取决于用户配置，编码可能是 ``'utf-8'`` 或 ``'mbcs'``。"

#: ../../library/sys.rst:623
msgid "On Android, the encoding is ``'utf-8'``."
msgstr "在Android上，编码为 ``'utf-8'``。"

#: ../../library/sys.rst:625
msgid "On VxWorks, the encoding is ``'utf-8'``."
msgstr "在VxWorks上，编码为 ``'utf-8'``。"

#: ../../library/sys.rst:627
msgid ":func:`getfilesystemencoding` result cannot be ``None`` anymore."
msgstr ":func:`getfilesystemencoding` 的结果将不再有可能是 ``None``。"

#: ../../library/sys.rst:630
msgid ""
"Windows is no longer guaranteed to return ``'mbcs'``. See :pep:`529` and "
":func:`_enablelegacywindowsfsencoding` for more information."
msgstr ""
"Windows 不再保证会返回 ``'mbcs'``。详情请参阅 :pep:`529` 和 "
":func:`_enablelegacywindowsfsencoding`。"

#: ../../library/sys.rst:634
msgid "Return 'utf-8' in the UTF-8 mode."
msgstr "在UTF-8模式下返回 'utf-8' 。"

#: ../../library/sys.rst:640
msgid ""
"Return the name of the error mode used to convert between Unicode filenames "
"and bytes filenames. The encoding name is returned from "
":func:`getfilesystemencoding`."
msgstr ""
"返回错误回调函数的名称，该错误回调函数将在 Unicode 文件名和 bytes 文件名转换时生效。编码的名称是由 "
":func:`getfilesystemencoding` 返回的。"

#: ../../library/sys.rst:651
msgid ""
"Return the reference count of the *object*.  The count returned is generally"
" one higher than you might expect, because it includes the (temporary) "
"reference as an argument to :func:`getrefcount`."
msgstr ""
"返回 *object* 的引用计数。返回的计数通常比预期的多一，因为它包括了作为 :func:`getrefcount` 参数的这一次（临时）引用。"

#: ../../library/sys.rst:658
msgid ""
"Return the current value of the recursion limit, the maximum depth of the "
"Python interpreter stack.  This limit prevents infinite recursion from "
"causing an overflow of the C stack and crashing Python.  It can be set by "
":func:`setrecursionlimit`."
msgstr ""
"返回当前的递归限制值，即 Python 解释器堆栈的最大深度。此限制可防止无限递归导致的 C 堆栈溢出和 Python 崩溃。该值可以通过 "
":func:`setrecursionlimit` 设置。"

#: ../../library/sys.rst:666
msgid ""
"Return the size of an object in bytes. The object can be any type of object."
" All built-in objects will return correct results, but this does not have to"
" hold true for third-party extensions as it is implementation specific."
msgstr "返回对象的大小（以字节为单位）。该对象可以是任何类型。所有内建对象返回的结果都是正确的，但对于第三方扩展不一定正确，因为这与具体实现有关。"

#: ../../library/sys.rst:671
msgid ""
"Only the memory consumption directly attributed to the object is accounted "
"for, not the memory consumption of objects it refers to."
msgstr "只计算直接分配给对象的内存消耗，不计算它所引用的对象的内存消耗。"

#: ../../library/sys.rst:674
msgid ""
"If given, *default* will be returned if the object does not provide means to"
" retrieve the size.  Otherwise a :exc:`TypeError` will be raised."
msgstr "对象不提供计算大小的方法时，如果有给出 *default* 则返回它，否则抛出 :exc:`TypeError` 异常。"

#: ../../library/sys.rst:677
msgid ""
":func:`getsizeof` calls the object's ``__sizeof__`` method and adds an "
"additional garbage collector overhead if the object is managed by the "
"garbage collector."
msgstr ""
"如果对象由垃圾回收器管理，则 :func:`getsizeof` 将调用对象的 ``__sizeof__`` 方法，并在上层添加额外的垃圾回收器。"

#: ../../library/sys.rst:681
msgid ""
"See `recursive sizeof recipe <https://code.activestate.com/recipes/577504>`_"
" for an example of using :func:`getsizeof` recursively to find the size of "
"containers and all their contents."
msgstr ""
"可以参考 `recursive sizeof recipe "
"<https://code.activestate.com/recipes/577504>`_ 中的示例，关于递归调用 "
":func:`getsizeof` 来得到各个容器及其所有内容物的大小。"

#: ../../library/sys.rst:687
msgid ""
"Return the interpreter's \"thread switch interval\"; see "
":func:`setswitchinterval`."
msgstr "返回解释器的“线程切换间隔时间”，请参阅 :func:`setswitchinterval`。"

#: ../../library/sys.rst:695
msgid ""
"Return a frame object from the call stack.  If optional integer *depth* is "
"given, return the frame object that many calls below the top of the stack.  "
"If that is deeper than the call stack, :exc:`ValueError` is raised.  The "
"default for *depth* is zero, returning the frame at the top of the call "
"stack."
msgstr ""
"返回来自调用栈的一个帧对象。如果传入可选整数 *depth*，则返回从栈顶往下相应调用层数的帧对象。如果该数比调用栈更深，则抛出 "
":exc:`ValueError`。*depth* 的默认值是 0，返回调用栈顶部的帧。"

#: ../../library/sys.rst:701
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys._getframe`` with no "
"arguments."
msgstr "引发一个 :ref:`审计事件 <auditing>` ``sys._getframe``，没有附带参数。"

#: ../../library/sys.rst:704
msgid ""
"This function should be used for internal and specialized purposes only. It "
"is not guaranteed to exist in all implementations of Python."
msgstr "这个函数应该只在内部为了一些特定的目的使用。不保证它在所有 Python 实现中都存在。"

#: ../../library/sys.rst:714
msgid "Get the profiler function as set by :func:`setprofile`."
msgstr "返回由 :func:`setprofile` 设置的性能分析函数"

#: ../../library/sys.rst:723
msgid "Get the trace function as set by :func:`settrace`."
msgstr ""

#: ../../library/sys.rst:727
msgid ""
"The :func:`gettrace` function is intended only for implementing debuggers, "
"profilers, coverage tools and the like.  Its behavior is part of the "
"implementation platform, rather than part of the language definition, and "
"thus may not be available in all Python implementations."
msgstr ""

#: ../../library/sys.rst:735
msgid ""
"Return a named tuple describing the Windows version currently running.  The "
"named elements are *major*, *minor*, *build*, *platform*, *service_pack*, "
"*service_pack_minor*, *service_pack_major*, *suite_mask*, *product_type* and"
" *platform_version*. *service_pack* contains a string, *platform_version* a "
"3-tuple and all other values are integers. The components can also be "
"accessed by name, so ``sys.getwindowsversion()[0]`` is equivalent to "
"``sys.getwindowsversion().major``. For compatibility with prior versions, "
"only the first 5 elements are retrievable by indexing."
msgstr ""

#: ../../library/sys.rst:746
msgid "*platform* will be :const:`2 (VER_PLATFORM_WIN32_NT)`."
msgstr ""

#: ../../library/sys.rst:748
msgid "*product_type* may be one of the following values:"
msgstr ""

#: ../../library/sys.rst:751
msgid "Constant"
msgstr "常数"

#: ../../library/sys.rst:751
msgid "Meaning"
msgstr "含义"

#: ../../library/sys.rst:753
msgid ":const:`1 (VER_NT_WORKSTATION)`"
msgstr ":const:`1 (VER_NT_WORKSTATION)`"

#: ../../library/sys.rst:753
msgid "The system is a workstation."
msgstr "系统是工作站。"

#: ../../library/sys.rst:755
msgid ":const:`2 (VER_NT_DOMAIN_CONTROLLER)`"
msgstr ":const:`2 (VER_NT_DOMAIN_CONTROLLER)`"

#: ../../library/sys.rst:755
msgid "The system is a domain controller."
msgstr "系统是域控制器。"

#: ../../library/sys.rst:758
msgid ":const:`3 (VER_NT_SERVER)`"
msgstr ":const:`3 (VER_NT_SERVER)`"

#: ../../library/sys.rst:758
msgid "The system is a server, but not a domain controller."
msgstr "系统是服务器，但不是域控制器。"

#: ../../library/sys.rst:762
msgid ""
"This function wraps the Win32 :c:func:`GetVersionEx` function; see the "
"Microsoft documentation on :c:func:`OSVERSIONINFOEX` for more information "
"about these fields."
msgstr ""

#: ../../library/sys.rst:766
msgid ""
"*platform_version* returns the accurate major version, minor version and "
"build number of the current operating system, rather than the version that "
"is being emulated for the process. It is intended for use in logging rather "
"than for feature detection."
msgstr ""

#: ../../library/sys.rst:773
msgid ""
"Changed to a named tuple and added *service_pack_minor*, "
"*service_pack_major*, *suite_mask*, and *product_type*."
msgstr ""

#: ../../library/sys.rst:777
msgid "Added *platform_version*"
msgstr "添加了 *platform_version*"

#: ../../library/sys.rst:783
msgid ""
"Returns an *asyncgen_hooks* object, which is similar to a "
":class:`~collections.namedtuple` of the form `(firstiter, finalizer)`, where"
" *firstiter* and *finalizer* are expected to be either ``None`` or functions"
" which take an :term:`asynchronous generator iterator` as an argument, and "
"are used to schedule finalization of an asynchronous generator by an event "
"loop."
msgstr ""

#: ../../library/sys.rst:790
msgid "See :pep:`525` for more details."
msgstr ""

#: ../../library/sys.rst:794 ../../library/sys.rst:1395
msgid ""
"This function has been added on a provisional basis (see :pep:`411` for "
"details.)"
msgstr ""

#: ../../library/sys.rst:800
msgid ""
"Get the current coroutine origin tracking depth, as set by "
":func:`set_coroutine_origin_tracking_depth`."
msgstr ""

#: ../../library/sys.rst:806 ../../library/sys.rst:1416
msgid ""
"This function has been added on a provisional basis (see :pep:`411` for "
"details.)  Use it only for debugging purposes."
msgstr ""

#: ../../library/sys.rst:812
msgid ""
"A :term:`named tuple` giving parameters of the numeric hash implementation."
"  For more details about hashing of numeric types, see :ref:`numeric-hash`."
msgstr ""

#: ../../library/sys.rst:819
msgid ":const:`width`"
msgstr ":const:`width`"

#: ../../library/sys.rst:819
msgid "width in bits used for hash values"
msgstr "用于哈希值的位宽度"

#: ../../library/sys.rst:821
msgid ":const:`modulus`"
msgstr ":const:`modulus`"

#: ../../library/sys.rst:821
msgid "prime modulus P used for numeric hash scheme"
msgstr "用于数字散列方案的素数模数P。"

#: ../../library/sys.rst:823
msgid ":const:`inf`"
msgstr ":const:`inf`"

#: ../../library/sys.rst:823
msgid "hash value returned for a positive infinity"
msgstr "为正无穷大返回的哈希值"

#: ../../library/sys.rst:825
msgid ":const:`nan`"
msgstr ":const:`nan`"

#: ../../library/sys.rst:825
msgid "hash value returned for a nan"
msgstr "为nan返回的哈希值"

#: ../../library/sys.rst:827
msgid ":const:`imag`"
msgstr ":const:`imag`"

#: ../../library/sys.rst:827
msgid "multiplier used for the imaginary part of a complex number"
msgstr "用于复数虚部的乘数"

#: ../../library/sys.rst:830
msgid ":const:`algorithm`"
msgstr ":const:`algorithm`"

#: ../../library/sys.rst:830
msgid "name of the algorithm for hashing of str, bytes, and memoryview"
msgstr "字符串、字节和内存视图的哈希算法的名称"

#: ../../library/sys.rst:833
msgid ":const:`hash_bits`"
msgstr ":const:`hash_bits`"

#: ../../library/sys.rst:833
msgid "internal output size of the hash algorithm"
msgstr "哈希算法的内部输出大小。"

#: ../../library/sys.rst:835
msgid ":const:`seed_bits`"
msgstr ":const:`seed_bits`"

#: ../../library/sys.rst:835
msgid "size of the seed key of the hash algorithm"
msgstr "散列算法的种子密钥的大小"

#: ../../library/sys.rst:841
msgid "Added *algorithm*, *hash_bits* and *seed_bits*"
msgstr "添加了 *algorithm*, *hash_bits* 和 *seed_bits*"

#: ../../library/sys.rst:847
msgid ""
"The version number encoded as a single integer.  This is guaranteed to "
"increase with each version, including proper support for non-production "
"releases.  For example, to test that the Python interpreter is at least "
"version 1.5.2, use::"
msgstr ""

#: ../../library/sys.rst:858
msgid ""
"This is called ``hexversion`` since it only really looks meaningful when "
"viewed as the result of passing it to the built-in :func:`hex` function.  "
"The :term:`named tuple`  :data:`sys.version_info` may be used for a more "
"human-friendly encoding of the same information."
msgstr ""

#: ../../library/sys.rst:863
msgid "More details of ``hexversion`` can be found at :ref:`apiabiversion`."
msgstr ""

#: ../../library/sys.rst:868
msgid ""
"An object containing information about the implementation of the currently "
"running Python interpreter.  The following attributes are required to exist "
"in all Python implementations."
msgstr ""

#: ../../library/sys.rst:872
msgid ""
"*name* is the implementation's identifier, e.g. ``'cpython'``.  The actual "
"string is defined by the Python implementation, but it is guaranteed to be "
"lower case."
msgstr ""

#: ../../library/sys.rst:876
msgid ""
"*version* is a named tuple, in the same format as :data:`sys.version_info`."
"  It represents the version of the Python *implementation*.  This has a "
"distinct meaning from the specific version of the Python *language* to which"
" the currently running interpreter conforms, which ``sys.version_info`` "
"represents.  For example, for PyPy 1.8 ``sys.implementation.version`` might "
"be ``sys.version_info(1, 8, 0, 'final', 0)``, whereas ``sys.version_info`` "
"would be ``sys.version_info(2, 7, 2, 'final', 0)``.  For CPython they are "
"the same value, since it is the reference implementation."
msgstr ""

#: ../../library/sys.rst:886
msgid ""
"*hexversion* is the implementation version in hexadecimal format, like "
":data:`sys.hexversion`."
msgstr ""

#: ../../library/sys.rst:889
msgid ""
"*cache_tag* is the tag used by the import machinery in the filenames of "
"cached modules.  By convention, it would be a composite of the "
"implementation's name and version, like ``'cpython-33'``.  However, a Python"
" implementation may use some other value if appropriate.  If ``cache_tag`` "
"is set to ``None``, it indicates that module caching should be disabled."
msgstr ""

#: ../../library/sys.rst:896
msgid ""
":data:`sys.implementation` may contain additional attributes specific to the"
" Python implementation.  These non-standard attributes must start with an "
"underscore, and are not described here.  Regardless of its contents, "
":data:`sys.implementation` will not change during a run of the interpreter, "
"nor between implementation versions.  (It may change between Python language"
" versions, however.)  See :pep:`421` for more information."
msgstr ""

#: ../../library/sys.rst:907
msgid ""
"The addition of new required attributes must go through the normal PEP "
"process. See :pep:`421` for more information."
msgstr ""

#: ../../library/sys.rst:912
msgid ""
"A :term:`named tuple` that holds information about Python's internal "
"representation of integers.  The attributes are read only."
msgstr ""

#: ../../library/sys.rst:918 ../../library/sys.rst:1519
msgid "Attribute"
msgstr "属性"

#: ../../library/sys.rst:918 ../../library/sys.rst:1519
msgid "Explanation"
msgstr "说明"

#: ../../library/sys.rst:920
msgid ":const:`bits_per_digit`"
msgstr ":const:`bits_per_digit`"

#: ../../library/sys.rst:920
msgid ""
"number of bits held in each digit.  Python integers are stored internally in"
" base ``2**int_info.bits_per_digit``"
msgstr ""

#: ../../library/sys.rst:924
msgid ":const:`sizeof_digit`"
msgstr ":const:`sizeof_digit`"

#: ../../library/sys.rst:924
msgid "size in bytes of the C type used to represent a digit"
msgstr "用于表示数字的C类型的字节大小"

#: ../../library/sys.rst:933
msgid ""
"When this attribute exists, its value is automatically called (with no "
"arguments) when the interpreter is launched in :ref:`interactive mode <tut-"
"interactive>`.  This is done after the :envvar:`PYTHONSTARTUP` file is read,"
" so that you can set this hook there.  The :mod:`site` module :ref:`sets "
"this <rlcompleter-config>`."
msgstr ""

#: ../../library/sys.rstNone
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_interactivehook`` "
"with argument ``hook``."
msgstr ""

#: ../../library/sys.rst:941
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_interactivehook`` "
"with the hook object as the argument when the hook is called on startup."
msgstr ""

#: ../../library/sys.rst:950
msgid ""
"Enter *string* in the table of \"interned\" strings and return the interned "
"string -- which is *string* itself or a copy. Interning strings is useful to"
" gain a little performance on dictionary lookup -- if the keys in a "
"dictionary are interned, and the lookup key is interned, the key comparisons"
" (after hashing) can be done by a pointer compare instead of a string "
"compare.  Normally, the names used in Python programs are automatically "
"interned, and the dictionaries used to hold module, class or instance "
"attributes have interned keys."
msgstr ""

#: ../../library/sys.rst:958
msgid ""
"Interned strings are not immortal; you must keep a reference to the return "
"value of :func:`intern` around to benefit from it."
msgstr ""

#: ../../library/sys.rst:964
msgid ""
"Return :const:`True` if the Python interpreter is :term:`shutting down "
"<interpreter shutdown>`, :const:`False` otherwise."
msgstr ""

#: ../../library/sys.rst:974
msgid ""
"These three variables are not always defined; they are set when an exception"
" is not handled and the interpreter prints an error message and a stack "
"traceback. Their intended use is to allow an interactive user to import a "
"debugger module and engage in post-mortem debugging without having to re-"
"execute the command that caused the error.  (Typical use is ``import pdb; "
"pdb.pm()`` to enter the post-mortem debugger; see :mod:`pdb` module for more"
" information.)"
msgstr ""

#: ../../library/sys.rst:982
msgid ""
"The meaning of the variables is the same as that of the return values from "
":func:`exc_info` above."
msgstr ""

#: ../../library/sys.rst:988
msgid ""
"An integer giving the maximum value a variable of type :c:type:`Py_ssize_t` "
"can take.  It's usually ``2**31 - 1`` on a 32-bit platform and ``2**63 - 1``"
" on a 64-bit platform."
msgstr ""

#: ../../library/sys.rst:995
msgid ""
"An integer giving the value of the largest Unicode code point, i.e. "
"``1114111`` (``0x10FFFF`` in hexadecimal)."
msgstr ""

#: ../../library/sys.rst:998
msgid ""
"Before :pep:`393`, ``sys.maxunicode`` used to be either ``0xFFFF`` or "
"``0x10FFFF``, depending on the configuration option that specified whether "
"Unicode characters were stored as UCS-2 or UCS-4."
msgstr ""

#: ../../library/sys.rst:1006
msgid ""
"A list of :term:`meta path finder` objects that have their "
":meth:`~importlib.abc.MetaPathFinder.find_spec` methods called to see if one"
" of the objects can find the module to be imported. The "
":meth:`~importlib.abc.MetaPathFinder.find_spec` method is called with at "
"least the absolute name of the module being imported. If the module to be "
"imported is contained in a package, then the parent package's "
":attr:`__path__` attribute is passed in as a second argument. The method "
"returns a :term:`module spec`, or ``None`` if the module cannot be found."
msgstr ""

#: ../../library/sys.rst:1018
msgid ":class:`importlib.abc.MetaPathFinder`"
msgstr ":class:`importlib.abc.MetaPathFinder`"

#: ../../library/sys.rst:1018
msgid ""
"The abstract base class defining the interface of finder objects on "
":data:`meta_path`."
msgstr ""

#: ../../library/sys.rst:1022
msgid ":class:`importlib.machinery.ModuleSpec`"
msgstr ":class:`importlib.machinery.ModuleSpec`"

#: ../../library/sys.rst:1021
msgid ""
"The concrete class which :meth:`~importlib.abc.MetaPathFinder.find_spec` "
"should return instances of."
msgstr ""

#: ../../library/sys.rst:1027
msgid ""
":term:`Module specs <module spec>` were introduced in Python 3.4, by "
":pep:`451`. Earlier versions of Python looked for a method called "
":meth:`~importlib.abc.MetaPathFinder.find_module`. This is still called as a"
" fallback if a :data:`meta_path` entry doesn't have a "
":meth:`~importlib.abc.MetaPathFinder.find_spec` method."
msgstr ""

#: ../../library/sys.rst:1035
msgid ""
"This is a dictionary that maps module names to modules which have already "
"been loaded.  This can be manipulated to force reloading of modules and "
"other tricks. However, replacing the dictionary will not necessarily work as"
" expected and deleting essential items from the dictionary may cause Python "
"to fail."
msgstr ""

#: ../../library/sys.rst:1045
msgid ""
"A list of strings that specifies the search path for modules. Initialized "
"from the environment variable :envvar:`PYTHONPATH`, plus an installation-"
"dependent default."
msgstr ""

#: ../../library/sys.rst:1049
msgid ""
"As initialized upon program startup, the first item of this list, "
"``path[0]``, is the directory containing the script that was used to invoke "
"the Python interpreter.  If the script directory is not available (e.g.  if "
"the interpreter is invoked interactively or if the script is read from "
"standard input), ``path[0]`` is the empty string, which directs Python to "
"search modules in the current directory first.  Notice that the script "
"directory is inserted *before* the entries inserted as a result of "
":envvar:`PYTHONPATH`."
msgstr ""

#: ../../library/sys.rst:1057
msgid ""
"A program is free to modify this list for its own purposes.  Only strings "
"and bytes should be added to :data:`sys.path`; all other data types are "
"ignored during import."
msgstr ""

#: ../../library/sys.rst:1063
msgid ""
"Module :mod:`site` This describes how to use .pth files to extend "
":data:`sys.path`."
msgstr ""

#: ../../library/sys.rst:1069
msgid ""
"A list of callables that take a path argument to try to create a "
":term:`finder` for the path. If a finder can be created, it is to be "
"returned by the callable, else raise :exc:`ImportError`."
msgstr ""

#: ../../library/sys.rst:1073 ../../library/sys.rst:1084
msgid "Originally specified in :pep:`302`."
msgstr ""

#: ../../library/sys.rst:1078
msgid ""
"A dictionary acting as a cache for :term:`finder` objects. The keys are "
"paths that have been passed to :data:`sys.path_hooks` and the values are the"
" finders that are found. If a path is a valid file system path but no finder"
" is found on :data:`sys.path_hooks` then ``None`` is stored."
msgstr ""

#: ../../library/sys.rst:1086
msgid ""
"``None`` is stored instead of :class:`imp.NullImporter` when no finder is "
"found."
msgstr ""

#: ../../library/sys.rst:1093
msgid ""
"This string contains a platform identifier that can be used to append "
"platform-specific components to :data:`sys.path`, for instance."
msgstr ""

#: ../../library/sys.rst:1096
msgid ""
"For Unix systems, except on Linux and AIX, this is the lowercased OS name as"
" returned by ``uname -s`` with the first part of the version as returned by "
"``uname -r`` appended, e.g. ``'sunos5'`` or ``'freebsd8'``, *at the time "
"when Python was built*.  Unless you want to test for a specific system "
"version, it is therefore recommended to use the following idiom::"
msgstr ""

#: ../../library/sys.rst:1109
msgid "For other systems, the values are:"
msgstr "对于其他系统，值是："

#: ../../library/sys.rst:1112
msgid "System"
msgstr "系统"

#: ../../library/sys.rst:1112
msgid "``platform`` value"
msgstr "``平台`` 值"

#: ../../library/sys.rst:1114
msgid "AIX"
msgstr "AIX"

#: ../../library/sys.rst:1114
msgid "``'aix'``"
msgstr "``'aix'``"

#: ../../library/sys.rst:1115
msgid "Linux"
msgstr "Linux"

#: ../../library/sys.rst:1115
msgid "``'linux'``"
msgstr "``'linux'``"

#: ../../library/sys.rst:1116
msgid "Windows"
msgstr "Windows"

#: ../../library/sys.rst:1116
msgid "``'win32'``"
msgstr "``'win32'``"

#: ../../library/sys.rst:1117
msgid "Windows/Cygwin"
msgstr "Windows/Cygwin"

#: ../../library/sys.rst:1117
msgid "``'cygwin'``"
msgstr "``'cygwin'``"

#: ../../library/sys.rst:1118
msgid "macOS"
msgstr "macOS"

#: ../../library/sys.rst:1118
msgid "``'darwin'``"
msgstr "``'darwin'``"

#: ../../library/sys.rst:1121
msgid ""
"On Linux, :attr:`sys.platform` doesn't contain the major version anymore. It"
" is always ``'linux'``, instead of ``'linux2'`` or ``'linux3'``.  Since "
"older Python versions include the version number, it is recommended to "
"always use the ``startswith`` idiom presented above."
msgstr ""

#: ../../library/sys.rst:1127
msgid ""
"On AIX, :attr:`sys.platform` doesn't contain the major version anymore. It "
"is always ``'aix'``, instead of ``'aix5'`` or ``'aix7'``.  Since older "
"Python versions include the version number, it is recommended to always use "
"the ``startswith`` idiom presented above."
msgstr ""

#: ../../library/sys.rst:1135
msgid ""
":attr:`os.name` has a coarser granularity.  :func:`os.uname` gives system-"
"dependent version information."
msgstr ""

#: ../../library/sys.rst:1138
msgid ""
"The :mod:`platform` module provides detailed checks for the system's "
"identity."
msgstr ":mod:`platform` 模块对系统的标识有更详细的检查。"

#: ../../library/sys.rst:1144
msgid ""
"A string giving the site-specific directory prefix where the platform "
"independent Python files are installed; by default, this is the string "
"``'/usr/local'``.  This can be set at build time with the ``--prefix`` "
"argument to the :program:`configure` script.  The main collection of Python "
"library modules is installed in the directory "
":file:`{prefix}/lib/python{X.Y}` while the platform independent header files"
" (all except :file:`pyconfig.h`) are stored in "
":file:`{prefix}/include/python{X.Y}`, where *X.Y* is the version number of "
"Python, for example ``3.2``."
msgstr ""

#: ../../library/sys.rst:1153
msgid ""
"If a :ref:`virtual environment <venv-def>` is in effect, this value will be "
"changed in ``site.py`` to point to the virtual environment. The value for "
"the Python installation will still be available, via :data:`base_prefix`."
msgstr ""

#: ../../library/sys.rst:1168
msgid ""
"Strings specifying the primary and secondary prompt of the interpreter.  "
"These are only defined if the interpreter is in interactive mode.  Their "
"initial values in this case are ``'>>> '`` and ``'... '``.  If a non-string "
"object is assigned to either variable, its :func:`str` is re-evaluated each "
"time the interpreter prepares to read a new interactive command; this can be"
" used to implement a dynamic prompt."
msgstr ""

#: ../../library/sys.rst:1178
msgid ""
"Set the interpreter's \"check interval\".  This integer value determines how"
" often the interpreter checks for periodic things such as thread switches "
"and signal handlers.  The default is ``100``, meaning the check is performed"
" every 100 Python virtual instructions. Setting it to a larger value may "
"increase performance for programs using threads.  Setting it to a value "
"``<=`` 0 checks every virtual instruction, maximizing responsiveness as well"
" as overhead."
msgstr ""

#: ../../library/sys.rst:1185
msgid ""
"This function doesn't have an effect anymore, as the internal logic for "
"thread switching and asynchronous tasks has been rewritten.  Use "
":func:`setswitchinterval` instead."
msgstr ""

#: ../../library/sys.rst:1193
msgid ""
"Set the flags used by the interpreter for :c:func:`dlopen` calls, such as "
"when the interpreter loads extension modules.  Among other things, this will"
" enable a lazy resolving of symbols when importing a module, if called as "
"``sys.setdlopenflags(0)``.  To share symbols across extension modules, call "
"as ``sys.setdlopenflags(os.RTLD_GLOBAL)``.  Symbolic names for the flag "
"values can be found in the :mod:`os` module (``RTLD_xxx`` constants, e.g. "
":data:`os.RTLD_LAZY`)."
msgstr ""

#: ../../library/sys.rst:1209
msgid ""
"Set the system's profile function, which allows you to implement a Python "
"source code profiler in Python.  See chapter :ref:`profile` for more "
"information on the Python profiler.  The system's profile function is called"
" similarly to the system's trace function (see :func:`settrace`), but it is "
"called with different events, for example it isn't called for each executed "
"line of code (only on call and return, but the return event is reported even"
" when an exception has been set). The function is thread-specific, but there"
" is no way for the profiler to know about context switches between threads, "
"so it does not make sense to use this in the presence of multiple threads. "
"Also, its return value is not used, so it can simply return ``None``.  Error"
" in the profile function will cause itself unset."
msgstr ""
"设置系统的性能分析函数，该函数使得在 Py​​thon 中能够实现一个 Python 源代码性能分析器。关于 Python Profiler "
"的更多信息请参阅 :ref:`profile` 章节。性能分析函数的调用方式类似于系统的跟踪函数（参阅 :func:`settrace` "
"），但它是通过不同的事件调用的，例如，不是每执行一行代码就调用它一次（仅在调用某函数和从某函数返回时才会调用性能分析函数，但即使某函数发生异常也会算作返回事件）。该函数是特定于线程的，但是性能分析器无法得知线程之间的上下文切换，因此在存在多个线程的情况下使用它是没有意义的。另外，因为它的返回值不会被用到，所以可以简单地返回"
" ``None``。性能分析函数中的错误将导致其自身被解除设置。"

#: ../../library/sys.rst:1220
msgid ""
"Profile functions should have three arguments: *frame*, *event*, and *arg*. "
"*frame* is the current stack frame.  *event* is a string: ``'call'``, "
"``'return'``, ``'c_call'``, ``'c_return'``, or ``'c_exception'``. *arg* "
"depends on the event type."
msgstr ""

#: ../../library/sys.rst:1226
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.setprofile`` with no "
"arguments."
msgstr ""

#: ../../library/sys.rst:1227 ../../library/sys.rst:1308
msgid "The events have the following meaning:"
msgstr "这些事件具有以下含义："

#: ../../library/sys.rst:1231 ../../library/sys.rst:1313
msgid "``'call'``"
msgstr "``'call'``"

#: ../../library/sys.rst:1230
msgid ""
"A function is called (or some other code block entered).  The profile "
"function is called; *arg* is ``None``."
msgstr ""

#: ../../library/sys.rst:1236 ../../library/sys.rst:1328
msgid "``'return'``"
msgstr "``'return'``"

#: ../../library/sys.rst:1234
msgid ""
"A function (or other code block) is about to return.  The profile function "
"is called; *arg* is the value that will be returned, or ``None`` if the "
"event is caused by an exception being raised."
msgstr ""

#: ../../library/sys.rst:1240
msgid "``'c_call'``"
msgstr "``'c_call'``"

#: ../../library/sys.rst:1239
msgid ""
"A C function is about to be called.  This may be an extension function or a "
"built-in.  *arg* is the C function object."
msgstr ""

#: ../../library/sys.rst:1243
msgid "``'c_return'``"
msgstr ""

#: ../../library/sys.rst:1243
msgid "A C function has returned. *arg* is the C function object."
msgstr ""

#: ../../library/sys.rst:1245
msgid "``'c_exception'``"
msgstr "``'c_exception'``"

#: ../../library/sys.rst:1246
msgid "A C function has raised an exception.  *arg* is the C function object."
msgstr ""

#: ../../library/sys.rst:1250
msgid ""
"Set the maximum depth of the Python interpreter stack to *limit*.  This "
"limit prevents infinite recursion from causing an overflow of the C stack "
"and crashing Python."
msgstr ""

#: ../../library/sys.rst:1254
msgid ""
"The highest possible limit is platform-dependent.  A user may need to set "
"the limit higher when they have a program that requires deep recursion and a"
" platform that supports a higher limit.  This should be done with care, "
"because a too-high limit can lead to a crash."
msgstr ""

#: ../../library/sys.rst:1259
msgid ""
"If the new limit is too low at the current recursion depth, a "
":exc:`RecursionError` exception is raised."
msgstr ""

#: ../../library/sys.rst:1262
msgid ""
"A :exc:`RecursionError` exception is now raised if the new limit is too low "
"at the current recursion depth."
msgstr ""

#: ../../library/sys.rst:1269
msgid ""
"Set the interpreter's thread switch interval (in seconds).  This floating-"
"point value determines the ideal duration of the \"timeslices\" allocated to"
" concurrently running Python threads.  Please note that the actual value can"
" be higher, especially if long-running internal functions or methods are "
"used.  Also, which thread becomes scheduled at the end of the interval is "
"the operating system's decision.  The interpreter doesn't have its own "
"scheduler."
msgstr ""
"设置解释器的线程切换间隔时间（单位为秒）。该浮点数决定了“时间片”的理想持续时间，时间片将分配给同时运行的 Python "
"线程。请注意，实际值可能更高，尤其是使用了运行时间长的内部函数或方法时。同时，在时间间隔末尾调度哪个线程是操作系统的决定。解释器没有自己的调度程序。"

#: ../../library/sys.rst:1286
msgid ""
"Set the system's trace function, which allows you to implement a Python "
"source code debugger in Python.  The function is thread-specific; for a "
"debugger to support multiple threads, it must register a trace function "
"using :func:`settrace` for each thread being debugged or use "
":func:`threading.settrace`."
msgstr ""

#: ../../library/sys.rst:1291
msgid ""
"Trace functions should have three arguments: *frame*, *event*, and *arg*. "
"*frame* is the current stack frame.  *event* is a string: ``'call'``, "
"``'line'``, ``'return'``, ``'exception'`` or ``'opcode'``.  *arg* depends on"
" the event type."
msgstr ""

#: ../../library/sys.rst:1296
msgid ""
"The trace function is invoked (with *event* set to ``'call'``) whenever a "
"new local scope is entered; it should return a reference to a local trace "
"function to be used for the new scope, or ``None`` if the scope shouldn't be"
" traced."
msgstr ""

#: ../../library/sys.rst:1301
msgid ""
"The local trace function should return a reference to itself (or to another "
"function for further tracing in that scope), or ``None`` to turn off tracing"
" in that scope."
msgstr ""

#: ../../library/sys.rst:1305
msgid ""
"If there is any error occurred in the trace function, it will be unset, just"
" like ``settrace(None)`` is called."
msgstr ""

#: ../../library/sys.rst:1311
msgid ""
"A function is called (or some other code block entered).  The global trace "
"function is called; *arg* is ``None``; the return value specifies the local "
"trace function."
msgstr ""

#: ../../library/sys.rst:1322
msgid "``'line'``"
msgstr "``'line'``"

#: ../../library/sys.rst:1316
msgid ""
"The interpreter is about to execute a new line of code or re-execute the "
"condition of a loop.  The local trace function is called; *arg* is ``None``;"
" the return value specifies the new local trace function.  See "
":file:`Objects/lnotab_notes.txt` for a detailed explanation of how this "
"works. Per-line events may be disabled for a frame by setting "
":attr:`f_trace_lines` to :const:`False` on that frame."
msgstr ""

#: ../../library/sys.rst:1325
msgid ""
"A function (or other code block) is about to return.  The local trace "
"function is called; *arg* is the value that will be returned, or ``None`` if"
" the event is caused by an exception being raised.  The trace function's "
"return value is ignored."
msgstr ""

#: ../../library/sys.rst:1333
msgid "``'exception'``"
msgstr "``'exception'``"

#: ../../library/sys.rst:1331
msgid ""
"An exception has occurred.  The local trace function is called; *arg* is a "
"tuple ``(exception, value, traceback)``; the return value specifies the new "
"local trace function."
msgstr ""

#: ../../library/sys.rst:1341
msgid "``'opcode'``"
msgstr "``'opcode'``"

#: ../../library/sys.rst:1336
msgid ""
"The interpreter is about to execute a new opcode (see :mod:`dis` for opcode "
"details).  The local trace function is called; *arg* is ``None``; the return"
" value specifies the new local trace function. Per-opcode events are not "
"emitted by default: they must be explicitly requested by setting "
":attr:`f_trace_opcodes` to :const:`True` on the frame."
msgstr ""

#: ../../library/sys.rst:1343
msgid ""
"Note that as an exception is propagated down the chain of callers, an "
"``'exception'`` event is generated at each level."
msgstr ""

#: ../../library/sys.rst:1346
msgid ""
"For more fine-grained usage, it's possible to set a trace function by "
"assigning ``frame.f_trace = tracefunc`` explicitly, rather than relying on "
"it being set indirectly via the return value from an already installed trace"
" function. This is also required for activating the trace function on the "
"current frame, which :func:`settrace` doesn't do. Note that in order for "
"this to work, a global tracing function must have been installed with "
":func:`settrace` in order to enable the runtime tracing machinery, but it "
"doesn't need to be the same tracing function (e.g. it could be a low "
"overhead tracing function that simply returns ``None`` to disable itself "
"immediately on each frame)."
msgstr ""

#: ../../library/sys.rst:1357
msgid "For more information on code and frame objects, refer to :ref:`types`."
msgstr ""

#: ../../library/sys.rst:1360
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.settrace`` with no "
"arguments."
msgstr ""

#: ../../library/sys.rst:1363
msgid ""
"The :func:`settrace` function is intended only for implementing debuggers, "
"profilers, coverage tools and the like.  Its behavior is part of the "
"implementation platform, rather than part of the language definition, and "
"thus may not be available in all Python implementations."
msgstr ""

#: ../../library/sys.rst:1370
msgid ""
"``'opcode'`` event type added; :attr:`f_trace_lines` and "
":attr:`f_trace_opcodes` attributes added to frames"
msgstr ""

#: ../../library/sys.rst:1375
msgid ""
"Accepts two optional keyword arguments which are callables that accept an "
":term:`asynchronous generator iterator` as an argument. The *firstiter* "
"callable will be called when an asynchronous generator is iterated for the "
"first time. The *finalizer* will be called when an asynchronous generator is"
" about to be garbage collected."
msgstr ""

#: ../../library/sys.rst:1382
msgid ""
"Raises an :ref:`auditing event <auditing>` "
"``sys.set_asyncgen_hooks_firstiter`` with no arguments."
msgstr ""

#: ../../library/sys.rst:1384
msgid ""
"Raises an :ref:`auditing event <auditing>` "
"``sys.set_asyncgen_hooks_finalizer`` with no arguments."
msgstr ""

#: ../../library/sys.rst:1385
msgid ""
"Two auditing events are raised because the underlying API consists of two "
"calls, each of which must raise its own event."
msgstr ""

#: ../../library/sys.rst:1388
msgid ""
"See :pep:`525` for more details, and for a reference example of a "
"*finalizer* method see the implementation of "
"``asyncio.Loop.shutdown_asyncgens`` in :source:`Lib/asyncio/base_events.py`"
msgstr ""

#: ../../library/sys.rst:1400
msgid ""
"Allows enabling or disabling coroutine origin tracking. When enabled, the "
"``cr_origin`` attribute on coroutine objects will contain a tuple of "
"(filename, line number, function name) tuples describing the traceback where"
" the coroutine object was created, with the most recent call first. When "
"disabled, ``cr_origin`` will be None."
msgstr ""

#: ../../library/sys.rst:1407
msgid ""
"To enable, pass a *depth* value greater than zero; this sets the number of "
"frames whose information will be captured. To disable, pass set *depth* to "
"zero."
msgstr ""

#: ../../library/sys.rst:1411
msgid "This setting is thread-specific."
msgstr ""

#: ../../library/sys.rst:1421
msgid ""
"Changes the default filesystem encoding and errors mode to 'mbcs' and "
"'replace' respectively, for consistency with versions of Python prior to "
"3.6."
msgstr ""

#: ../../library/sys.rst:1424
msgid ""
"This is equivalent to defining the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable before launching Python."
msgstr ""

#: ../../library/sys.rst:1429
msgid "See :pep:`529` for more details."
msgstr "有关更多详细信息，请参阅 :pep:`529`。"

#: ../../library/sys.rst:1436
msgid ""
":term:`File objects <file object>` used by the interpreter for standard "
"input, output and errors:"
msgstr ""

#: ../../library/sys.rst:1439
msgid ""
"``stdin`` is used for all interactive input (including calls to "
":func:`input`);"
msgstr ""

#: ../../library/sys.rst:1441
msgid ""
"``stdout`` is used for the output of :func:`print` and :term:`expression` "
"statements and for the prompts of :func:`input`;"
msgstr ""

#: ../../library/sys.rst:1443
msgid "The interpreter's own prompts and its error messages go to ``stderr``."
msgstr ""

#: ../../library/sys.rst:1445
msgid ""
"These streams are regular :term:`text files <text file>` like those returned"
" by the :func:`open` function.  Their parameters are chosen as follows:"
msgstr ""

#: ../../library/sys.rst:1449
msgid ""
"The character encoding is platform-dependent.  Non-Windows platforms use the"
" locale encoding (see :meth:`locale.getpreferredencoding()`)."
msgstr ""

#: ../../library/sys.rst:1453
msgid ""
"On Windows, UTF-8 is used for the console device.  Non-character devices "
"such as disk files and pipes use the system locale encoding (i.e. the ANSI "
"codepage).  Non-console character devices such as NUL (i.e. where "
"``isatty()`` returns ``True``) use the value of the console input and output"
" codepages at startup, respectively for stdin and stdout/stderr. This "
"defaults to the system locale encoding if the process is not initially "
"attached to a console."
msgstr ""

#: ../../library/sys.rst:1462
msgid ""
"The special behaviour of the console can be overridden by setting the "
"environment variable PYTHONLEGACYWINDOWSSTDIO before starting Python. In "
"that case, the console codepages are used as for any other character device."
msgstr ""

#: ../../library/sys.rst:1467
msgid ""
"Under all platforms, you can override the character encoding by setting the "
":envvar:`PYTHONIOENCODING` environment variable before starting Python or by"
" using the new :option:`-X` ``utf8`` command line option and "
":envvar:`PYTHONUTF8` environment variable.  However, for the Windows "
"console, this only applies when :envvar:`PYTHONLEGACYWINDOWSSTDIO` is also "
"set."
msgstr ""

#: ../../library/sys.rst:1474
msgid ""
"When interactive, ``stdout`` and ``stderr`` streams are line-buffered. "
"Otherwise, they are block-buffered like regular text files.  You can "
"override this value with the :option:`-u` command-line option."
msgstr ""

#: ../../library/sys.rst:1480
msgid ""
"To write or read binary data from/to the standard streams, use the "
"underlying binary :data:`~io.TextIOBase.buffer` object.  For example, to "
"write bytes to :data:`stdout`, use ``sys.stdout.buffer.write(b'abc')``."
msgstr ""

#: ../../library/sys.rst:1484
msgid ""
"However, if you are writing a library (and do not control in which context "
"its code will be executed), be aware that the standard streams may be "
"replaced with file-like objects like :class:`io.StringIO` which do not "
"support the :attr:`~io.BufferedIOBase.buffer` attribute."
msgstr ""

#: ../../library/sys.rst:1494
msgid ""
"These objects contain the original values of ``stdin``, ``stderr`` and "
"``stdout`` at the start of the program.  They are used during finalization, "
"and could be useful to print to the actual standard stream no matter if the "
"``sys.std*`` object has been redirected."
msgstr ""

#: ../../library/sys.rst:1499
msgid ""
"It can also be used to restore the actual files to known working file "
"objects in case they have been overwritten with a broken object.  However, "
"the preferred way to do this is to explicitly save the previous stream "
"before replacing it, and restore the saved object."
msgstr ""

#: ../../library/sys.rst:1505
msgid ""
"Under some conditions ``stdin``, ``stdout`` and ``stderr`` as well as the "
"original values ``__stdin__``, ``__stdout__`` and ``__stderr__`` can be "
"``None``. It is usually the case for Windows GUI apps that aren't connected "
"to a console and Python apps started with :program:`pythonw`."
msgstr ""

#: ../../library/sys.rst:1513
msgid ""
"A :term:`named tuple` holding information about the thread implementation."
msgstr ""

#: ../../library/sys.rst:1521
msgid ":const:`name`"
msgstr ":const:`name`"

#: ../../library/sys.rst:1521
msgid "Name of the thread implementation:"
msgstr "线程实现的名称："

#: ../../library/sys.rst:1523
msgid "``'nt'``: Windows threads"
msgstr "``'nt'``: Windows 线程"

#: ../../library/sys.rst:1524
msgid "``'pthread'``: POSIX threads"
msgstr "``'pthread'``: POSIX 线程"

#: ../../library/sys.rst:1525
msgid "``'solaris'``: Solaris threads"
msgstr "``'solaris'``: Solaris 线程"

#: ../../library/sys.rst:1527
msgid ":const:`lock`"
msgstr ":const:`lock`"

#: ../../library/sys.rst:1527
msgid "Name of the lock implementation:"
msgstr "锁实现的名称："

#: ../../library/sys.rst:1529
msgid "``'semaphore'``: a lock uses a semaphore"
msgstr "``'semaphore'``: 锁使用信号量"

#: ../../library/sys.rst:1530
msgid "``'mutex+cond'``: a lock uses a mutex and a condition variable"
msgstr "``'mutex+cond'``: 锁使用互斥和条件变量"

#: ../../library/sys.rst:1532
msgid "``None`` if this information is unknown"
msgstr "``None`` 如果此信息未知"

#: ../../library/sys.rst:1534
msgid ":const:`version`"
msgstr ":const:`version`"

#: ../../library/sys.rst:1534
msgid ""
"Name and version of the thread library. It is a string, or ``None`` if this "
"information is unknown."
msgstr "线程库的名称和版本。它是一个字符串，如果此信息未知，则为 ``None`` 。"

#: ../../library/sys.rst:1543
msgid ""
"When this variable is set to an integer value, it determines the maximum "
"number of levels of traceback information printed when an unhandled "
"exception occurs. The default is ``1000``.  When set to ``0`` or less, all "
"traceback information is suppressed and only the exception type and value "
"are printed."
msgstr ""

#: ../../library/sys.rst:1551
msgid "Handle an unraisable exception."
msgstr ""

#: ../../library/sys.rst:1553
msgid ""
"Called when an exception has occurred but there is no way for Python to "
"handle it. For example, when a destructor raises an exception or during "
"garbage collection (:func:`gc.collect`)."
msgstr ""

#: ../../library/sys.rst:1557
msgid "The *unraisable* argument has the following attributes:"
msgstr ""

#: ../../library/sys.rst:1559
msgid "*exc_type*: Exception type."
msgstr "*exc_type*: 异常类型"

#: ../../library/sys.rst:1560
msgid "*exc_value*: Exception value, can be ``None``."
msgstr "*exc_value*: 异常值，可以是 ``None``."

#: ../../library/sys.rst:1561
msgid "*exc_traceback*: Exception traceback, can be ``None``."
msgstr "*exc_traceback*: 异常回溯，可以是 ``None``."

#: ../../library/sys.rst:1562
msgid "*err_msg*: Error message, can be ``None``."
msgstr "*err_msg*: 错误信息，可以是 ``None``."

#: ../../library/sys.rst:1563
msgid "*object*: Object causing the exception, can be ``None``."
msgstr "*object*: 导致异常的对象，可以为 ``None``."

#: ../../library/sys.rst:1565
msgid ""
"The default hook formats *err_msg* and *object* as: ``f'{err_msg}: "
"{object!r}'``; use \"Exception ignored in\" error message if *err_msg* is "
"``None``."
msgstr ""

#: ../../library/sys.rst:1569
msgid ""
":func:`sys.unraisablehook` can be overridden to control how unraisable "
"exceptions are handled."
msgstr ""

#: ../../library/sys.rst:1572
msgid ""
"Storing *exc_value* using a custom hook can create a reference cycle. It "
"should be cleared explicitly to break the reference cycle when the exception"
" is no longer needed."
msgstr "使用定制钩子存放 *exc_value* 可能会创建引用循环。 它应当在不再需要异常时被显式地清空以打破引用循环。"

#: ../../library/sys.rst:1576
msgid ""
"Storing *object* using a custom hook can resurrect it if it is set to an "
"object which is being finalized. Avoid storing *object* after the custom "
"hook completes to avoid resurrecting objects."
msgstr ""

#: ../../library/sys.rst:1580
msgid "See also :func:`excepthook` which handles uncaught exceptions."
msgstr ""

#: ../../library/sys.rstNone
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.unraisablehook`` with "
"arguments ``hook``, ``unraisable``."
msgstr ""

#: ../../library/sys.rst:1584
msgid ""
"Raise an auditing event ``sys.unraisablehook`` with arguments ``hook``, "
"``unraisable`` when an exception that cannot be handled occurs. The "
"``unraisable`` object is the same as what will be passed to the hook. If no "
"hook has been set, ``hook`` may be ``None``."
msgstr ""

#: ../../library/sys.rst:1593
msgid ""
"A string containing the version number of the Python interpreter plus "
"additional information on the build number and compiler used.  This string "
"is displayed when the interactive interpreter is started.  Do not extract "
"version information out of it, rather, use :data:`version_info` and the "
"functions provided by the :mod:`platform` module."
msgstr ""

#: ../../library/sys.rst:1602
msgid ""
"The C API version for this interpreter.  Programmers may find this useful "
"when debugging version conflicts between Python and extension modules."
msgstr ""

#: ../../library/sys.rst:1608
msgid ""
"A tuple containing the five components of the version number: *major*, "
"*minor*, *micro*, *releaselevel*, and *serial*.  All values except "
"*releaselevel* are integers; the release level is ``'alpha'``, ``'beta'``, "
"``'candidate'``, or ``'final'``.  The ``version_info`` value corresponding "
"to the Python version 2.0 is ``(2, 0, 0, 'final', 0)``.  The components can "
"also be accessed by name, so ``sys.version_info[0]`` is equivalent to "
"``sys.version_info.major`` and so on."
msgstr ""

#: ../../library/sys.rst:1616
msgid "Added named component attributes."
msgstr ""

#: ../../library/sys.rst:1621
msgid ""
"This is an implementation detail of the warnings framework; do not modify "
"this value.  Refer to the :mod:`warnings` module for more information on the"
" warnings framework."
msgstr ""

#: ../../library/sys.rst:1628
msgid ""
"The version number used to form registry keys on Windows platforms. This is "
"stored as string resource 1000 in the Python DLL.  The value is normally the"
" first three characters of :const:`version`.  It is provided in the "
":mod:`sys` module for informational purposes; modifying this value has no "
"effect on the registry keys used by Python."
msgstr ""

#: ../../library/sys.rst:1639
msgid ""
"A dictionary of the various implementation-specific flags passed through the"
" :option:`-X` command-line option.  Option names are either mapped to their "
"values, if given explicitly, or to :const:`True`.  Example:"
msgstr ""

#: ../../library/sys.rst:1655
msgid ""
"This is a CPython-specific way of accessing options passed through "
":option:`-X`.  Other implementations may export them through other means, or"
" not at all."
msgstr ""

#: ../../library/sys.rst:1663
msgid "Citations"
msgstr ""

#: ../../library/sys.rst:1664
msgid ""
"ISO/IEC 9899:1999.  \"Programming languages -- C.\"  A public draft of this "
"standard is available at http://www.open-"
"std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\\ ."
msgstr ""
