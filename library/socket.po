# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# ww song <sww4718168@gmail.com>, 2018
# Menghua Xiao <arieshout@gmail.com>, 2018
# focusheart <focusheart@gmail.com>, 2019
# Harry Z <harzjc@gmail.com>, 2019
# cdarlint <cdarling@126.com>, 2019
# ppcfish <ppcfish@gmail.com>, 2019
# Meng Du <alphanow@gmail.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2019
# Zombie110year <zombie110year@gmail.com>, 2019
# Shengjing Zhu <zsj950618@gmail.com>, 2019
# Arisaka97 <solitaire2312@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 12:40+0000\n"
"PO-Revision-Date: 2017-02-16 23:26+0000\n"
"Last-Translator: Arisaka97 <solitaire2312@gmail.com>, 2020\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/socket.rst:2
msgid ":mod:`socket` --- Low-level networking interface"
msgstr ":mod:`socket` --- 底层网络接口"

#: ../../library/socket.rst:7
msgid "**Source code:** :source:`Lib/socket.py`"
msgstr "**源代码:** :source:`Lib/socket.py`"

#: ../../library/socket.rst:11
msgid ""
"This module provides access to the BSD *socket* interface. It is available "
"on all modern Unix systems, Windows, MacOS, and probably additional "
"platforms."
msgstr "这个模块提供了访问 BSD *套接字* 的接口。在所有现代 Unix 系统、Windows、macOS 和其他一些平台上可用。"

#: ../../library/socket.rst:16
msgid ""
"Some behavior may be platform dependent, since calls are made to the "
"operating system socket APIs."
msgstr "一些行为可能因平台不同而异，因为调用的是操作系统的套接字API。"

#: ../../library/socket.rst:21
msgid ""
"The Python interface is a straightforward transliteration of the Unix system"
" call and library interface for sockets to Python's object-oriented style: "
"the :func:`.socket` function returns a :dfn:`socket object` whose methods "
"implement the various socket system calls.  Parameter types are somewhat "
"higher-level than in the C interface: as with :meth:`read` and :meth:`write`"
" operations on Python files, buffer allocation on receive operations is "
"automatic, and buffer length is implicit on send operations."
msgstr ""
"这个Python接口是用Python的面向对象风格对Unix系统调用和套接字库接口的直译：函数 :func:`.socket` 返回一个 "
":dfn:`套接字对象` ，其方法是对各种套接字系统调用的实现。形参类型一般与C接口相比更高级：例如在Python文件 :meth:`read` 和 "
":meth:`write` 操作中，接收操作的缓冲区分配是自动的，发送操作的缓冲区长度是隐式的。"

#: ../../library/socket.rst:33
msgid "Module :mod:`socketserver`"
msgstr "模块 :mod:`socketserver`"

#: ../../library/socket.rst:33
msgid "Classes that simplify writing network servers."
msgstr "用于简化网络服务端编写的类。"

#: ../../library/socket.rst:35
msgid "Module :mod:`ssl`"
msgstr "模块 :mod:`ssl`"

#: ../../library/socket.rst:36
msgid "A TLS/SSL wrapper for socket objects."
msgstr "套接字对象的TLS/SSL封装。"

#: ../../library/socket.rst:40
msgid "Socket families"
msgstr "套接字协议族"

#: ../../library/socket.rst:42
msgid ""
"Depending on the system and the build options, various socket families are "
"supported by this module."
msgstr "根据系统以及构建选项，此模块提供了各种套接字协议簇。"

#: ../../library/socket.rst:45
msgid ""
"The address format required by a particular socket object is automatically "
"selected based on the address family specified when the socket object was "
"created.  Socket addresses are represented as follows:"
msgstr "特定的套接字对象需要的地址格式将根据此套接字对象被创建时指定的地址族被自动选择。套接字地址表示如下："

#: ../../library/socket.rst:49
msgid ""
"The address of an :const:`AF_UNIX` socket bound to a file system node is "
"represented as a string, using the file system encoding and the "
"``'surrogateescape'`` error handler (see :pep:`383`).  An address in Linux's"
" abstract namespace is returned as a :term:`bytes-like object` with an "
"initial null byte; note that sockets in this namespace can communicate with "
"normal file system sockets, so programs intended to run on Linux may need to"
" deal with both types of address.  A string or bytes-like object can be used"
" for either type of address when passing it as an argument."
msgstr ""
"一个绑定在文件系统节点上的 :const:`AF_UNIX` 套接字的地址表示为一个字符串，使用文件系统字符编码和 "
"``'surrogateescape'`` 错误回调方法（see :pep:`383`）。一个地址在 Linux 的抽象命名空间被返回为带有初始的 "
"null 字节的 :term:`字节类对象 <bytes-like object>` "
"；注意在这个命名空间种的套接字可能与普通文件系统套接字通信，所以打算运行在 Linux "
"上的程序可能需要解决两种地址类型。当传递为参数时，一个字符串或字节类对象可以用于任一类型的地址。"

#: ../../library/socket.rst:59
msgid ""
"Previously, :const:`AF_UNIX` socket paths were assumed to use UTF-8 "
"encoding."
msgstr "之前，:const:`AF_UNIX` 套接字路径被假设使用 UTF-8 编码。"

#: ../../library/socket.rst:63 ../../library/socket.rst:920
#: ../../library/socket.rst:962 ../../library/socket.rst:1645
msgid "Writable :term:`bytes-like object` is now accepted."
msgstr "现在支持可写的 :term:`字节类对象 <bytes-like object>`。"

#: ../../library/socket.rst:68
msgid ""
"A pair ``(host, port)`` is used for the :const:`AF_INET` address family, "
"where *host* is a string representing either a hostname in Internet domain "
"notation like ``'daring.cwi.nl'`` or an IPv4 address like "
"``'100.50.200.5'``, and *port* is an integer."
msgstr ""
"一对 ``(host, port)`` 被用于 :const:`AF_INET` 地址族，*host* 是一个表示为互联网域名表示法之内的主机名或者一个"
" IPv4 地址的字符串，例如 ``'daring.cwi.nl'`` 或 ``'100.50.200.5'``，*port* 是一个整数。"

#: ../../library/socket.rst:73
msgid ""
"For IPv4 addresses, two special forms are accepted instead of a host "
"address: ``''`` represents :const:`INADDR_ANY`, which is used to bind to all"
" interfaces, and the string ``'<broadcast>'`` represents "
":const:`INADDR_BROADCAST`.  This behavior is not compatible with IPv6, "
"therefore, you may want to avoid these if you intend to support IPv6 with "
"your Python programs."
msgstr ""
"对于 IPv4 地址，有两种可接受的特殊形式被用来代替一个主机地址： ``''`` 代表 "
":const:`INADDR_ANY`，用来绑定到所有接口；字符串 ``'<broadcast>'`` 代表 "
":const:`INADDR_BROADCAST`。此行为不兼容 IPv6，因此，如果你的 Python 程序打算支持 IPv6，则可能需要避开这些。"

#: ../../library/socket.rst:80
msgid ""
"For :const:`AF_INET6` address family, a four-tuple ``(host, port, flowinfo, "
"scopeid)`` is used, where *flowinfo* and *scopeid* represent the "
"``sin6_flowinfo`` and ``sin6_scope_id`` members in :const:`struct "
"sockaddr_in6` in C.  For :mod:`socket` module methods, *flowinfo* and "
"*scopeid* can be omitted just for backward compatibility.  Note, however, "
"omission of *scopeid* can cause problems in manipulating scoped IPv6 "
"addresses."
msgstr ""
"对于 :const:`AF_INET6` 地址族，使用一个四元组 ``(host, port, flowinfo, scopeid)``，其中 "
"*flowinfo* 和 *scopeid* 代表了 C 库 :const:`struct sockaddr_in6` 中的 "
"``sin6_flowinfo`` 和 ``sin6_scope_id`` 成员。对于 :mod:`socket` 模块中的方法， *flowinfo*"
" 和 *scopeid* 可以被省略，只为了向后兼容。注意，省略 *scopeid* 可能会导致操作带有领域 (Scope) 的 IPv6 地址时出错。"

#: ../../library/socket.rst:87
msgid ""
"For multicast addresses (with *scopeid* meaningful) *address* may not "
"contain ``%scope`` (or ``zone id``) part. This information is superfluous "
"and may be safely omitted (recommended)."
msgstr ""
"对于多播地址（其 *scopeid* 起作用），*地址* 中可以不包含 ``%scope`` （或 ``zone id`` "
"）部分，这部分是多余的，可以放心省略（推荐）。"

#: ../../library/socket.rst:92
msgid ""
":const:`AF_NETLINK` sockets are represented as pairs ``(pid, groups)``."
msgstr ":const:`AF_NETLINK` 套接字由一对 ``(pid, groups)`` 表示。"

#: ../../library/socket.rst:94
msgid ""
"Linux-only support for TIPC is available using the :const:`AF_TIPC` address "
"family.  TIPC is an open, non-IP based networked protocol designed for use "
"in clustered computer environments.  Addresses are represented by a tuple, "
"and the fields depend on the address type. The general tuple form is "
"``(addr_type, v1, v2, v3 [, scope])``, where:"
msgstr ""
"指定 :const:`AF_TIPC` 地址族可以使用仅 Linux 支持的 TIPC 协议。TIPC 是一种开放的、非基于 IP "
"的网络协议，旨在用于集群计算环境。其地址用元组表示，其中的字段取决于地址类型。一般元组形式为 ``(addr_type, v1, v2, v3 [, "
"scope])``，其中："

#: ../../library/socket.rst:100
msgid ""
"*addr_type* is one of :const:`TIPC_ADDR_NAMESEQ`, :const:`TIPC_ADDR_NAME`, "
"or :const:`TIPC_ADDR_ID`."
msgstr ""
"*addr_type* 取 :const:`TIPC_ADDR_NAMESEQ`、:const:`TIPC_ADDR_NAME` 或 "
":const:`TIPC_ADDR_ID` 中的一个。"

#: ../../library/socket.rst:102
msgid ""
"*scope* is one of :const:`TIPC_ZONE_SCOPE`, :const:`TIPC_CLUSTER_SCOPE`, and"
" :const:`TIPC_NODE_SCOPE`."
msgstr ""
"*scope* 取 :const:`TIPC_ZONE_SCOPE`、:const:`TIPC_CLUSTER_SCOPE` 和 "
":const:`TIPC_NODE_SCOPE` 中的一个。"

#: ../../library/socket.rst:104
msgid ""
"If *addr_type* is :const:`TIPC_ADDR_NAME`, then *v1* is the server type, "
"*v2* is the port identifier, and *v3* should be 0."
msgstr ""
"如果 *addr_type* 为 :const:`TIPC_ADDR_NAME`，那么 *v1* 是服务器类型，*v2* 是端口标识符，*v3* 应为 "
"0。"

#: ../../library/socket.rst:107
msgid ""
"If *addr_type* is :const:`TIPC_ADDR_NAMESEQ`, then *v1* is the server type, "
"*v2* is the lower port number, and *v3* is the upper port number."
msgstr ""
"如果 *addr_type* 为 :const:`TIPC_ADDR_NAMESEQ`，那么 *v1* 是服务器类型，*v2* 是端口号下限，而 "
"*v3* 是端口号上限。"

#: ../../library/socket.rst:110
msgid ""
"If *addr_type* is :const:`TIPC_ADDR_ID`, then *v1* is the node, *v2* is the "
"reference, and *v3* should be set to 0."
msgstr ""
"如果 *addr_type* 为 :const:`TIPC_ADDR_ID`，那么 *v1* 是节点 (node)，*v2* 是 ref，*v3* 应为"
" 0。"

#: ../../library/socket.rst:113
msgid ""
"A tuple ``(interface, )`` is used for the :const:`AF_CAN` address family, "
"where *interface* is a string representing a network interface name like "
"``'can0'``. The network interface name ``''`` can be used to receive packets"
" from all network interfaces of this family."
msgstr ""
":const:`AF_CAN` 地址族使用元组 ``(interface, )``，其中 *interface* 是表示网络接口名称的字符串，如 "
"``'can0'``。网络接口名 ``''`` 可以用于接收本族所有网络接口的数据包。"

#: ../../library/socket.rst:118
msgid ""
":const:`CAN_ISOTP` protocol require a tuple ``(interface, rx_addr, "
"tx_addr)`` where both additional parameters are unsigned long integer that "
"represent a CAN identifier (standard or extended)."
msgstr ""
":const:`CAN_ISOTP` 协议接受一个元组 ``(interface, rx_addr, "
"tx_addr)``，其中两个额外参数都是无符号长整数，都表示 CAN 标识符（标准或扩展标识符）。"

#: ../../library/socket.rst:122
msgid ""
"A string or a tuple ``(id, unit)`` is used for the :const:`SYSPROTO_CONTROL`"
" protocol of the :const:`PF_SYSTEM` family. The string is the name of a "
"kernel control using a dynamically-assigned ID. The tuple can be used if ID "
"and unit number of the kernel control are known or if a registered ID is "
"used."
msgstr ""
":const:`PF_SYSTEM` 协议簇的 :const:`SYSPROTO_CONTROL` 协议接受一个字符串或元组 ``(id, "
"unit)``。其中字符串是内核控件的名称，该控件使用动态分配的 ID。而如果 ID 和内核控件的单元 (unit) 编号都已知，或使用了已注册的 "
"ID，可以采用元组。"

#: ../../library/socket.rst:130
msgid ""
":const:`AF_BLUETOOTH` supports the following protocols and address formats:"
msgstr ":const:`AF_BLUETOOTH` 支持以下协议和地址格式："

#: ../../library/socket.rst:133
msgid ""
":const:`BTPROTO_L2CAP` accepts ``(bdaddr, psm)`` where ``bdaddr`` is the "
"Bluetooth address as a string and ``psm`` is an integer."
msgstr ""
":const:`BTPROTO_L2CAP` 接受 ``(bdaddr, psm)``，其中 ``bdaddr`` "
"为字符串格式的蓝牙地址，``psm`` 是一个整数。"

#: ../../library/socket.rst:136
msgid ""
":const:`BTPROTO_RFCOMM` accepts ``(bdaddr, channel)`` where ``bdaddr`` is "
"the Bluetooth address as a string and ``channel`` is an integer."
msgstr ""
":const:`BTPROTO_RFCOMM` 接受 ``(bdaddr, channel)``，其中 ``bdaddr`` "
"为字符串格式的蓝牙地址，``channel`` 是一个整数。"

#: ../../library/socket.rst:139
msgid ""
":const:`BTPROTO_HCI` accepts ``(device_id,)`` where ``device_id`` is either "
"an integer or a string with the Bluetooth address of the interface. (This "
"depends on your OS; NetBSD and DragonFlyBSD expect a Bluetooth address while"
" everything else expects an integer.)"
msgstr ""
":const:`BTPROTO_HCI` 接受 ``(device_id,)``，其中 ``device_id`` "
"为整数或字符串，它表示接口对应的蓝牙地址（具体取决于你的系统，NetBSD 和 DragonFlyBSD 需要蓝牙地址字符串，其他系统需要整数）。"

#: ../../library/socket.rst:144
msgid "NetBSD and DragonFlyBSD support added."
msgstr "添加了对 NetBSD 和 DragonFlyBSD 的支持。"

#: ../../library/socket.rst:147
msgid ""
":const:`BTPROTO_SCO` accepts ``bdaddr`` where ``bdaddr`` is a :class:`bytes`"
" object containing the Bluetooth address in a string format. (ex. "
"``b'12:23:34:45:56:67'``) This protocol is not supported under FreeBSD."
msgstr ""
":const:`BTPROTO_SCO` 接受 ``bdaddr``，其中 ``bdaddr`` 是 :class:`bytes` "
"对象，其中含有字符串格式的蓝牙地址（如 ``b'12:23:34:45:56:67'`` ），FreeBSD 不支持此协议。"

#: ../../library/socket.rst:152
msgid ""
":const:`AF_ALG` is a Linux-only socket based interface to Kernel "
"cryptography. An algorithm socket is configured with a tuple of two to four "
"elements ``(type, name [, feat [, mask]])``, where:"
msgstr ""
":const:`AF_ALG` 是一个仅 Linux 可用的、基于套接字的接口，用于连接内核加密算法。算法套接字可用包括 2 至 4 个元素的元组来配置"
" ``(type, name [, feat [, mask]])``，其中："

#: ../../library/socket.rst:156
msgid ""
"*type* is the algorithm type as string, e.g. ``aead``, ``hash``, "
"``skcipher`` or ``rng``."
msgstr "*type* 是表示算法类型的字符串，如 ``aead``、``hash``、``skcipher`` 或 ``rng``。"

#: ../../library/socket.rst:159
msgid ""
"*name* is the algorithm name and operation mode as string, e.g. ``sha256``, "
"``hmac(sha256)``, ``cbc(aes)`` or ``drbg_nopr_ctr_aes256``."
msgstr ""
"*name* 是表示算法类型和操作模式的字符串，如 ``sha256``、``hmac(sha256)``、``cbc(aes)`` 或 "
"``drbg_nopr_ctr_aes256``。"

#: ../../library/socket.rst:162
msgid "*feat* and *mask* are unsigned 32bit integers."
msgstr "*feat* 和 *mask* 是无符号 32 位整数。"

#: ../../library/socket.rst:168
msgid ""
":const:`AF_VSOCK` allows communication between virtual machines and their "
"hosts. The sockets are represented as a ``(CID, port)`` tuple where the "
"context ID or CID and port are integers."
msgstr ""
":const:`AF_VSOCK` 用于支持虚拟机与宿主机之间的通讯。该套接字用 ``(CID, port)`` 元组表示，其中 Context ID "
"(CID) 和 port 都是整数。"

#: ../../library/socket.rst:176
msgid ""
":const:`AF_PACKET` is a low-level interface directly to network devices. The"
" packets are represented by the tuple ``(ifname, proto[, pkttype[, hatype[, "
"addr]]])`` where:"
msgstr ""
":const:`AF_PACKET` 是一个底层接口，直接连接至网卡。数据包使用元组 ``(ifname, proto[, pkttype[, "
"hatype[, addr]]])`` 表示，其中："

#: ../../library/socket.rst:180
msgid "*ifname* - String specifying the device name."
msgstr "*ifname* - 指定设备名称的字符串。"

#: ../../library/socket.rst:181
msgid ""
"*proto* - An in network-byte-order integer specifying the Ethernet protocol "
"number."
msgstr "*proto* - 一个用网络字节序表示的整数，指定以太网协议版本号。"

#: ../../library/socket.rst:183
msgid "*pkttype* - Optional integer specifying the packet type:"
msgstr "*pkttype* - 指定数据包类型的整数（可选）："

#: ../../library/socket.rst:185
msgid "``PACKET_HOST`` (the default) - Packet addressed to the local host."
msgstr "``PACKET_HOST`` （默认） - 寻址到本地主机的数据包。"

#: ../../library/socket.rst:186
msgid "``PACKET_BROADCAST`` - Physical-layer broadcast packet."
msgstr "``PACKET_BROADCAST`` - 物理层广播的数据包。"

#: ../../library/socket.rst:187
msgid ""
"``PACKET_MULTIHOST`` - Packet sent to a physical-layer multicast address."
msgstr "``PACKET_MULTIHOST`` - 发送到物理层多播地址的数据包。"

#: ../../library/socket.rst:188
msgid ""
"``PACKET_OTHERHOST`` - Packet to some other host that has been caught by a "
"device driver in promiscuous mode."
msgstr "``PACKET_OTHERHOST`` - 被（处于混杂模式的）网卡驱动捕获的、发送到其他主机的数据包。"

#: ../../library/socket.rst:190
msgid ""
"``PACKET_OUTGOING`` - Packet originating from the local host that is looped "
"back to a packet socket."
msgstr "``PACKET_OUTGOING`` - 来自本地主机的、回环到一个套接字的数据包。"

#: ../../library/socket.rst:192
msgid "*hatype* - Optional integer specifying the ARP hardware address type."
msgstr "*hatype* - 可选整数，指定 ARP 硬件地址类型。"

#: ../../library/socket.rst:193
msgid ""
"*addr* - Optional bytes-like object specifying the hardware physical "
"address, whose interpretation depends on the device."
msgstr "*addr* - 可选的类字节串对象，用于指定硬件物理地址，其解释取决于各设备。"

#: ../../library/socket.rst:196
msgid ""
":const:`AF_QIPCRTR` is a Linux-only socket based interface for communicating"
" with services running on co-processors in Qualcomm platforms. The address "
"family is represented as a ``(node, port)`` tuple where the *node* and "
"*port* are non-negative integers."
msgstr ""
":const:`AF_QIPCRTR` 是一个仅 Linux 可用的、基于套接字的接口，用于与高通平台中协处理器上运行的服务进行通信。该地址簇用一个 "
"``(node, port)`` 元组表示，其中 *node* 和 *port* 为非负整数。"

#: ../../library/socket.rst:203
msgid ""
"If you use a hostname in the *host* portion of IPv4/v6 socket address, the "
"program may show a nondeterministic behavior, as Python uses the first "
"address returned from the DNS resolution.  The socket address will be "
"resolved differently into an actual IPv4/v6 address, depending on the "
"results from DNS resolution and/or the host configuration.  For "
"deterministic behavior use a numeric address in *host* portion."
msgstr ""
"如果你在 IPv4/v6 套接字地址的 *host* 部分中使用了一个主机名，此程序可能会表现不确定行为，因为 Python 使用 DNS "
"解析返回的第一个地址。套接字地址在实际的 IPv4/v6 中以不同方式解析，根据 DNS 解析和/或 host 配置。为了确定行为，在 *host* "
"部分中使用数字的地址。"

#: ../../library/socket.rst:210
msgid ""
"All errors raise exceptions.  The normal exceptions for invalid argument "
"types and out-of-memory conditions can be raised; starting from Python 3.3, "
"errors related to socket or address semantics raise :exc:`OSError` or one of"
" its subclasses (they used to raise :exc:`socket.error`)."
msgstr ""
"所有的错误都抛出异常。对于无效的参数类型和内存溢出异常情况可能抛出普通异常；从 Python 3.3 开始，与套接字或地址语义有关的错误抛出 "
":exc:`OSError` 或它的子类之一（常用 :exc:`socket.error`）。"

#: ../../library/socket.rst:215
msgid ""
"Non-blocking mode is supported through :meth:`~socket.setblocking`.  A "
"generalization of this based on timeouts is supported through "
":meth:`~socket.settimeout`."
msgstr ""
"可以用 :meth:`~socket.setblocking` 设置非阻塞模式。一个基于超时的 generalization 通过 "
":meth:`~socket.settimeout` 支持。"

#: ../../library/socket.rst:221
msgid "Module contents"
msgstr "模块内容"

#: ../../library/socket.rst:223
msgid "The module :mod:`socket` exports the following elements."
msgstr ":mod:`socket` 模块导出以下元素。"

#: ../../library/socket.rst:227
msgid "Exceptions"
msgstr "异常"

#: ../../library/socket.rst:231
msgid "A deprecated alias of :exc:`OSError`."
msgstr "一个被弃用的 :exc:`OSError` 的别名。"

#: ../../library/socket.rst:233
msgid "Following :pep:`3151`, this class was made an alias of :exc:`OSError`."
msgstr "根据 :pep:`3151`，这个类是 :exc:`OSError` 的别名。"

#: ../../library/socket.rst:239
msgid ""
"A subclass of :exc:`OSError`, this exception is raised for address-related "
"errors, i.e. for functions that use *h_errno* in the POSIX C API, including "
":func:`gethostbyname_ex` and :func:`gethostbyaddr`. The accompanying value "
"is a pair ``(h_errno, string)`` representing an error returned by a library "
"call.  *h_errno* is a numeric value, while *string* represents the "
"description of *h_errno*, as returned by the :c:func:`hstrerror` C function."
msgstr ""
":exc:`OSError` 的子类，本异常通常表示与地址相关的错误，比如那些在 POSIX C API 中使用了 *h_errno* 的函数，包括 "
":func:`gethostbyname_ex` 和 :func:`gethostbyaddr`。附带的值是一对 ``(h_errno, "
"string)``，代表库调用返回的错误。*h_errno* 是一个数字，而 *string* 表示 *h_errno* 的描述，它们由 C 函数 "
":c:func:`hstrerror` 返回。"

#: ../../library/socket.rst:247 ../../library/socket.rst:260
#: ../../library/socket.rst:271
msgid "This class was made a subclass of :exc:`OSError`."
msgstr "此类是 :exc:`OSError` 的子类。"

#: ../../library/socket.rst:252
msgid ""
"A subclass of :exc:`OSError`, this exception is raised for address-related "
"errors by :func:`getaddrinfo` and :func:`getnameinfo`. The accompanying "
"value is a pair ``(error, string)`` representing an error returned by a "
"library call.  *string* represents the description of *error*, as returned "
"by the :c:func:`gai_strerror` C function.  The numeric *error* value will "
"match one of the :const:`EAI_\\*` constants defined in this module."
msgstr ""
":exc:`OSError` 的子类，本异常来自 :func:`getaddrinfo` 和 "
":func:`getnameinfo`，表示与地址相关的错误。附带的值是一对 ``(error, "
"string)``，代表库调用返回的错误。*string* 表示 *error* 的描述，它由 C 函数 :c:func:`gai_strerror` "
"返回。数字值 *error* 与本模块中定义的 :const:`EAI_\\*` 常量之一匹配。"

#: ../../library/socket.rst:265
msgid ""
"A subclass of :exc:`OSError`, this exception is raised when a timeout occurs"
" on a socket which has had timeouts enabled via a prior call to "
":meth:`~socket.settimeout` (or implicitly through "
":func:`~socket.setdefaulttimeout`).  The accompanying value is a string "
"whose value is currently always \"timed out\"."
msgstr ""
":exc:`OSError` 的子类，当套接字发生超时，且事先已调用过 :meth:`~socket.settimeout` （或隐式地通过 "
":func:`~socket.setdefaulttimeout` ）启用了超时，则会抛出此异常。附带的值是一个字符串，其值总是 \"timed "
"out\"。"

#: ../../library/socket.rst:276
msgid "Constants"
msgstr "常数"

#: ../../library/socket.rst:278
msgid ""
"The AF_* and SOCK_* constants are now :class:`AddressFamily` and "
":class:`SocketKind` :class:`.IntEnum` collections."
msgstr ""
"AF_* 和 SOCK_* 常量现在都在 :class:`AddressFamily` 和 :class:`SocketKind` 这两个 "
":class:`.IntEnum` 集合内。"

#: ../../library/socket.rst:287
msgid ""
"These constants represent the address (and protocol) families, used for the "
"first argument to :func:`.socket`.  If the :const:`AF_UNIX` constant is not "
"defined then this protocol is unsupported.  More constants may be available "
"depending on the system."
msgstr ""
"这些常量表示地址（和协议）簇，用于 :func:`.socket` 的第一个参数。如果 :const:`AF_UNIX` "
"常量未定义，即表示不支持该协议。不同系统可能会有更多其他常量可用。"

#: ../../library/socket.rst:299
msgid ""
"These constants represent the socket types, used for the second argument to "
":func:`.socket`.  More constants may be available depending on the system. "
"(Only :const:`SOCK_STREAM` and :const:`SOCK_DGRAM` appear to be generally "
"useful.)"
msgstr ""
"这些常量表示套接字类型，用于 :func:`.socket` 的第二个参数。不同系统可能会有更多其他常量可用。（一般只有 "
":const:`SOCK_STREAM` 和 :const:`SOCK_DGRAM` 可用）"

#: ../../library/socket.rst:307
msgid ""
"These two constants, if defined, can be combined with the socket types and "
"allow you to set some flags atomically (thus avoiding possible race "
"conditions and the need for separate calls)."
msgstr "这两个常量（如果已定义）可以与上述套接字类型结合使用，允许你设置这些原子性相关的 flags （从而避免可能的竞争条件和单独调用的需要）。"

#: ../../library/socket.rst:313
msgid ""
"`Secure File Descriptor Handling "
"<http://udrepper.livejournal.com/20407.html>`_ for a more thorough "
"explanation."
msgstr ""
"`Secure File Descriptor Handling （安全地处理文件描述符） "
"<http://udrepper.livejournal.com/20407.html>`_ 提供了更详尽的解释。"

#: ../../library/socket.rst:317
msgid ":ref:`Availability <availability>`: Linux >= 2.6.27."
msgstr ":ref:`可用性 <availability>`： Linux >= 2.6.27。"

#: ../../library/socket.rst:335
msgid ""
"Many constants of these forms, documented in the Unix documentation on "
"sockets and/or the IP protocol, are also defined in the socket module. They "
"are generally used in arguments to the :meth:`setsockopt` and "
":meth:`getsockopt` methods of socket objects.  In most cases, only those "
"symbols that are defined in the Unix header files are defined; for a few "
"symbols, default values are provided."
msgstr ""
"此列表内的许多常量，记载在 Unix 文档中的套接字和/或 IP 协议部分，同时也定义在本 socket 模块中。它们通常用于套接字对象的 "
":meth:`setsockopt` 和 :meth:`getsockopt` 方法的参数中。在大多数情况下，仅那些在 Unix "
"头文件中有定义的符号会在本模块中定义，部分符号提供了默认值。"

#: ../../library/socket.rst:342
msgid ""
"``SO_DOMAIN``, ``SO_PROTOCOL``, ``SO_PEERSEC``, ``SO_PASSSEC``, "
"``TCP_USER_TIMEOUT``, ``TCP_CONGESTION`` were added."
msgstr ""
"添加了 "
"``SO_DOMAIN``、``SO_PROTOCOL``、``SO_PEERSEC``、``SO_PASSSEC``、``TCP_USER_TIMEOUT``、``TCP_CONGESTION``。"

#: ../../library/socket.rst:346
msgid ""
"On Windows, ``TCP_FASTOPEN``, ``TCP_KEEPCNT`` appear if run-time Windows "
"supports."
msgstr "在 Windows 上，如果 Windows 运行时支持，则 ``TCP_FASTOPEN``、``TCP_KEEPCNT`` 可用。"

#: ../../library/socket.rst:350
msgid "``TCP_NOTSENT_LOWAT`` was added."
msgstr "添加了 ``TCP_NOTSENT_LOWAT``。"

#: ../../library/socket.rst:353
msgid ""
"On Windows, ``TCP_KEEPIDLE``, ``TCP_KEEPINTVL`` appear if run-time Windows "
"supports."
msgstr "在 Windows 上，如果 Windows 运行时支持，则 ``TCP_KEEPIDLE``、``TCP_KEEPINTVL`` 可用。"

#: ../../library/socket.rst:361 ../../library/socket.rst:408
#: ../../library/socket.rst:419
msgid ""
"Many constants of these forms, documented in the Linux documentation, are "
"also defined in the socket module."
msgstr "此列表内的许多常量，记载在 Linux 文档中，同时也定义在本 socket 模块中。"

#: ../../library/socket.rst:365 ../../library/socket.rst:376
#: ../../library/socket.rst:400
msgid ":ref:`Availability <availability>`: Linux >= 2.6.25."
msgstr ":ref:`可用性 <availability>`： Linux >= 2.6.25。"

#: ../../library/socket.rst:371
msgid ""
"CAN_BCM, in the CAN protocol family, is the broadcast manager (BCM) "
"protocol. Broadcast manager constants, documented in the Linux "
"documentation, are also defined in the socket module."
msgstr ""
"CAN 协议簇内的 CAN_BCM 是广播管理器（Bbroadcast Manager -- BCM）协议，广播管理器常量在 Linux "
"文档中有所记载，在本 socket 模块中也有定义。"

#: ../../library/socket.rst:378
msgid ""
"The :data:`CAN_BCM_CAN_FD_FRAME` flag is only available on Linux >= 4.8."
msgstr ":data:`CAN_BCM_CAN_FD_FRAME` 旗标仅在 Linux >= 4.8 时可用。"

#: ../../library/socket.rst:384
msgid ""
"Enables CAN FD support in a CAN_RAW socket. This is disabled by default. "
"This allows your application to send both CAN and CAN FD frames; however, "
"you must accept both CAN and CAN FD frames when reading from the socket."
msgstr ""
"在 CAN_RAW 套接字中启用 CAN FD 支持，默认是禁用的。它使应用程序可以发送 CAN 和 CAN FD "
"帧。但是，从套接字读取时，也必须同时接受 CAN 和 CAN FD 帧。"

#: ../../library/socket.rst:388
msgid "This constant is documented in the Linux documentation."
msgstr "此常量在 Linux 文档中有所记载。"

#: ../../library/socket.rst:391
msgid ":ref:`Availability <availability>`: Linux >= 3.6."
msgstr ":ref:`可用性 <availability>`： Linux >= 3.6。"

#: ../../library/socket.rst:396
msgid ""
"CAN_ISOTP, in the CAN protocol family, is the ISO-TP (ISO 15765-2) protocol."
" ISO-TP constants, documented in the Linux documentation."
msgstr ""
"CAN 协议簇中的 CAN_ISOTP 就是 ISO-TP (ISO 15765-2) 协议。ISO-TP 常量在 Linux 文档中有所记载。"

#: ../../library/socket.rst:411
msgid ":ref:`Availability <availability>`: Linux >= 2.2."
msgstr ":ref:`可用性 <availability>`： Linux >= 2.2。"

#: ../../library/socket.rst:423
msgid ":ref:`Availability <availability>`: Linux >= 2.6.30."
msgstr ":ref:`可用性 <availability>`： Linux >= 2.6.30。"

#: ../../library/socket.rst:432
msgid ""
"Constants for Windows' WSAIoctl(). The constants are used as arguments to "
"the :meth:`~socket.socket.ioctl` method of socket objects."
msgstr ""
"Windows 的 WSAIoctl() 的常量。这些常量用于套接字对象的 :meth:`~socket.socket.ioctl` 方法的参数。"

#: ../../library/socket.rst:435 ../../library/socket.rst:1269
msgid "``SIO_LOOPBACK_FAST_PATH`` was added."
msgstr "添加了 ``SIO_LOOPBACK_FAST_PATH``。"

#: ../../library/socket.rst:441
msgid ""
"TIPC related constants, matching the ones exported by the C socket API. See "
"the TIPC documentation for more information."
msgstr "TIPC 相关常量，与 C socket API 导出的常量一致。更多信息请参阅 TIPC 文档。"

#: ../../library/socket.rst:448
msgid "Constants for Linux Kernel cryptography."
msgstr "用于 Linux 内核加密算法的常量。"

#: ../../library/socket.rst:451 ../../library/socket.rst:1569
msgid ":ref:`Availability <availability>`: Linux >= 2.6.38."
msgstr ":ref:`可用性 <availability>`： Linux >= 2.6.38。"

#: ../../library/socket.rst:460
msgid "Constants for Linux host/guest communication."
msgstr "用于 Linux 宿主机/虚拟机通讯的常量。"

#: ../../library/socket.rst:463
msgid ":ref:`Availability <availability>`: Linux >= 4.8."
msgstr ":ref:`可用性 <availability>`： Linux >= 4.8。"

#: ../../library/socket.rst:469
msgid ":ref:`Availability <availability>`: BSD, OSX."
msgstr ":ref:`可用性 <availability>`： BSD、OSX。"

#: ../../library/socket.rst:474
msgid ""
"This constant contains a boolean value which indicates if IPv6 is supported "
"on this platform."
msgstr "本常量为一个布尔值，该值指示当前平台是否支持 IPv6。"

#: ../../library/socket.rst:480
msgid ""
"These are string constants containing Bluetooth addresses with special "
"meanings. For example, :const:`BDADDR_ANY` can be used to indicate any "
"address when specifying the binding socket with :const:`BTPROTO_RFCOMM`."
msgstr ""
"这些是字符串常量，包含蓝牙地址，这些地址具有特殊含义。例如，当用 :const:`BTPROTO_RFCOMM` 指定绑定套接字时， "
":const:`BDADDR_ANY` 表示“任何地址”。"

#: ../../library/socket.rst:489
msgid ""
"For use with :const:`BTPROTO_HCI`. :const:`HCI_FILTER` is not available for "
"NetBSD or DragonFlyBSD. :const:`HCI_TIME_STAMP` and :const:`HCI_DATA_DIR` "
"are not available for FreeBSD, NetBSD, or DragonFlyBSD."
msgstr ""
"与 :const:`BTPROTO_HCI` 一起使用。 :const:`HCI_FILTER` 在 NetBSD 或 DragonFlyBSD "
"上不可用。 :const:`HCI_TIME_STAMP` 和 :const:`HCI_DATA_DIR` 在 FreeBSD、NetBSD 或 "
"DragonFlyBSD 上不可用。"

#: ../../library/socket.rst:496
msgid ""
"Constant for Qualcomm's IPC router protocol, used to communicate with "
"service providing remote processors."
msgstr "高通 IPC 路由协议的常数，用于与提供远程处理器的服务进行通信。"

#: ../../library/socket.rst:499
msgid ":ref:`Availability <availability>`: Linux >= 4.7."
msgstr ":ref:`可用性 <availability>`： Linux >= 4.7。"

#: ../../library/socket.rst:502
msgid "Functions"
msgstr "函数"

#: ../../library/socket.rst:505
msgid "Creating sockets"
msgstr "创建套接字"

#: ../../library/socket.rst:507
msgid ""
"The following functions all create :ref:`socket objects <socket-objects>`."
msgstr "下列函数都能创建 :ref:`套接字对象 <socket-objects>`."

#: ../../library/socket.rst:512
msgid ""
"Create a new socket using the given address family, socket type and protocol"
" number.  The address family should be :const:`AF_INET` (the default), "
":const:`AF_INET6`, :const:`AF_UNIX`, :const:`AF_CAN`, :const:`AF_PACKET`, or"
" :const:`AF_RDS`. The socket type should be :const:`SOCK_STREAM` (the "
"default), :const:`SOCK_DGRAM`, :const:`SOCK_RAW` or perhaps one of the other"
" ``SOCK_`` constants. The protocol number is usually zero and may be omitted"
" or in the case where the address family is :const:`AF_CAN` the protocol "
"should be one of :const:`CAN_RAW`, :const:`CAN_BCM` or :const:`CAN_ISOTP`."
msgstr ""
"使用给定的地址簇、套接字类型和协议号创建一个新的套接字。地址簇应为 :const:`AF_INET` "
"（默认）、:const:`AF_INET6`、:const:`AF_UNIX`、:const:`AF_CAN`、:const:`AF_PACKET` 或"
" :const:`AF_RDS` 其中之一。套接字类型应为 :const:`SOCK_STREAM` "
"（默认）、:const:`SOCK_DGRAM`、:const:`SOCK_RAW` 或其他 ``SOCK_`` "
"常量之一。协议号通常为零，可以省略，或者在地址簇为 :const:`AF_CAN` 的情况下，协议号应为 "
":const:`CAN_RAW`、:const:`CAN_BCM` 或 :const:`CAN_ISOTP` 之一。"

#: ../../library/socket.rst:521
msgid ""
"If *fileno* is specified, the values for *family*, *type*, and *proto* are "
"auto-detected from the specified file descriptor.  Auto-detection can be "
"overruled by calling the function with explicit *family*, *type*, or *proto*"
" arguments.  This only affects how Python represents e.g. the return value "
"of :meth:`socket.getpeername` but not the actual OS resource.  Unlike "
":func:`socket.fromfd`, *fileno* will return the same socket and not a "
"duplicate. This may help close a detached socket using "
":meth:`socket.close()`."
msgstr ""
"如果指定了 *fileno*，那么将从这一指定的文件描述符中自动检测 *family*、*type* 和 *proto* "
"的值。如果调用本函数时显式指定了 *family*、*type* 或 *proto* 参数，可以覆盖自动检测的值。这只会影响 Python 表示诸如 "
":meth:`socket.getpeername` 一类函数的返回值的方式，而不影响实际的操作系统资源。与 :func:`socket.fromfd`"
" 不同，*fileno* 将返回原先的套接字，而不是复制出新的套接字。这有助于在分离的套接字上调用 :meth:`socket.close()` "
"来关闭它。"

#: ../../library/socket.rst:530 ../../library/socket.rst:661
#: ../../library/socket.rst:1099 ../../library/socket.rst:1186
msgid "The newly created socket is :ref:`non-inheritable <fd_inheritance>`."
msgstr "新创建的套接字是 :ref:`不可继承的 <fd_inheritance>`。"

#: ../../library/socket.rst:533
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.__new__`` with arguments"
" ``self``, ``family``, ``type``, ``protocol``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``socket.__new__`` 附带参数 "
"``self``、``family``、``type``、``protocol``。"

#: ../../library/socket.rst:534
msgid "The AF_CAN family was added. The AF_RDS family was added."
msgstr "添加了 AF_CAN 簇。添加了 AF_RDS 簇。"

#: ../../library/socket.rst:538
msgid "The CAN_BCM protocol was added."
msgstr "添加了 CAN_BCM 协议。"

#: ../../library/socket.rst:541 ../../library/socket.rst:663
msgid "The returned socket is now non-inheritable."
msgstr "返回的套接字现在是不可继承的。"

#: ../../library/socket.rst:544
msgid "The CAN_ISOTP protocol was added."
msgstr "添加了 CAN_ISOTP 协议。"

#: ../../library/socket.rst:547
msgid ""
"When :const:`SOCK_NONBLOCK` or :const:`SOCK_CLOEXEC` bit flags are applied "
"to *type* they are cleared, and :attr:`socket.type` will not reflect them.  "
"They are still passed to the underlying system `socket()` call.  Therefore,"
msgstr ""
"当将 :const:`SOCK_NONBLOCK` 或 :const:`SOCK_CLOEXEC` 标志位应用于 *type* 上时，它们会被清除，且 "
":attr:`socket.type` 反映不出它们。但它们仍将传递给底层系统的 `socket()` 调用。因此，"

#: ../../library/socket.rst:559
msgid ""
"will still create a non-blocking socket on OSes that support "
"``SOCK_NONBLOCK``, but ``sock.type`` will be set to ``socket.SOCK_STREAM``."
msgstr ""
"仍将在支持 ``SOCK_NONBLOCK`` 的系统上创建一个非阻塞的套接字，但是 ``sock.type`` 会被置为 "
"``socket.SOCK_STREAM``。"

#: ../../library/socket.rst:565
msgid ""
"Build a pair of connected socket objects using the given address family, "
"socket type, and protocol number.  Address family, socket type, and protocol"
" number are as for the :func:`.socket` function above. The default family is"
" :const:`AF_UNIX` if defined on the platform; otherwise, the default is "
":const:`AF_INET`."
msgstr ""
"构建一对已连接的套接字对象，使用给定的地址簇、套接字类型和协议号。地址簇、套接字类型和协议号与上述 :func:`.socket` "
"函数相同。默认地址簇为 :const:`AF_UNIX` （需要当前平台支持，不支持则默认为 :const:`AF_INET` ）。"

#: ../../library/socket.rst:570
msgid "The newly created sockets are :ref:`non-inheritable <fd_inheritance>`."
msgstr "新创建的套接字都是 :ref:`不可继承的 <fd_inheritance>`。"

#: ../../library/socket.rst:572
msgid ""
"The returned socket objects now support the whole socket API, rather than a "
"subset."
msgstr "现在，返回的套接字对象支持全部套接字 API，而不是全部 API 的一个子集。"

#: ../../library/socket.rst:576
msgid "The returned sockets are now non-inheritable."
msgstr "返回的套接字现在都是不可继承的。"

#: ../../library/socket.rst:579
msgid "Windows support added."
msgstr "添加了 Windows 支持。"

#: ../../library/socket.rst:585
msgid ""
"Connect to a TCP service listening on the Internet *address* (a 2-tuple "
"``(host, port)``), and return the socket object.  This is a higher-level "
"function than :meth:`socket.connect`: if *host* is a non-numeric hostname, "
"it will try to resolve it for both :data:`AF_INET` and :data:`AF_INET6`, and"
" then try to connect to all possible addresses in turn until a connection "
"succeeds.  This makes it easy to write clients that are compatible to both "
"IPv4 and IPv6."
msgstr ""
"连接到一个 TCP 服务，该服务正在侦听 Internet *address* （用二元组 ``(host, port)`` "
"表示）。连接后返回套接字对象。这是比 :meth:`socket.connect` 更高级的函数：如果 *host* 是非数字主机名，它将尝试从 "
":data:`AF_INET` 和 :data:`AF_INET6` 解析它，然后依次尝试连接到所有可能的地址，直到连接成功。这使得编写兼容 IPv4 "
"和 IPv6 的客户端变得容易。"

#: ../../library/socket.rst:593
msgid ""
"Passing the optional *timeout* parameter will set the timeout on the socket "
"instance before attempting to connect.  If no *timeout* is supplied, the "
"global default timeout setting returned by :func:`getdefaulttimeout` is "
"used."
msgstr ""
"传入可选参数 *timeout* 可以在套接字实例上设置超时（在尝试连接前）。如果未提供 *timeout*，则使用由 "
":func:`getdefaulttimeout` 返回的全局默认超时设置。"

#: ../../library/socket.rst:598
msgid ""
"If supplied, *source_address* must be a 2-tuple ``(host, port)`` for the "
"socket to bind to as its source address before connecting.  If host or port "
"are '' or 0 respectively the OS default behavior will be used."
msgstr ""
"如果提供了 *source_address*，它必须为二元组 ``(host, port)``，以便套接字在连接之前绑定为其源地址。如果 host 或 "
"port 分别为 '' 或 0，则使用操作系统默认行为。"

#: ../../library/socket.rst:602
msgid "*source_address* was added."
msgstr "添加了 *source_address*。"

#: ../../library/socket.rst:607
msgid ""
"Convenience function which creates a TCP socket bound to *address* (a "
"2-tuple ``(host, port)``) and return the socket object."
msgstr "便捷函数，创建绑定到 *address* （二元组 ``(host, port)`` ）的 TCP 套接字，返回套接字对象。"

#: ../../library/socket.rst:610
msgid ""
"*family* should be either :data:`AF_INET` or :data:`AF_INET6`. *backlog* is "
"the queue size passed to :meth:`socket.listen`; when ``0`` a default "
"reasonable value is chosen. *reuse_port* dictates whether to set the "
":data:`SO_REUSEPORT` socket option."
msgstr ""
"*family* 应设置为 :data:`AF_INET` 或 :data:`AF_INET6`。*backlog* 是传递给 "
":meth:`socket.listen` 的队列大小，当它为 ``0`` 则表示默认的合理值。*reuse_port* 表示是否设置 "
":data:`SO_REUSEPORT` 套接字选项。"

#: ../../library/socket.rst:615
msgid ""
"If *dualstack_ipv6* is true and the platform supports it the socket will be "
"able to accept both IPv4 and IPv6 connections, else it will raise "
":exc:`ValueError`. Most POSIX platforms and Windows are supposed to support "
"this functionality. When this functionality is enabled the address returned "
"by :meth:`socket.getpeername` when an IPv4 connection occurs will be an IPv6"
" address represented as an IPv4-mapped IPv6 address. If *dualstack_ipv6* is "
"false it will explicitly disable this functionality on platforms that enable"
" it by default (e.g. Linux). This parameter can be used in conjunction with "
":func:`has_dualstack_ipv6`:"
msgstr ""
"如果 *dualstack_ipv6* 为 true 且平台支持，则套接字能接受 IPv4 和 IPv6 连接，否则将抛出 "
":exc:`ValueError` 异常。大多数 POSIX 平台和 Windows "
"应该支持此功能。启用此功能后，:meth:`socket.getpeername` 在进行 IPv4 连接时返回的地址将是一个（映射到 IPv4 "
"的）IPv6 地址。在默认启用该功能的平台上（如 Linux），如果 *dualstack_ipv6* 为 false，即显式禁用此功能。该参数可以与 "
":func:`has_dualstack_ipv6` 结合使用："

#: ../../library/socket.rst:637
msgid ""
"On POSIX platforms the :data:`SO_REUSEADDR` socket option is set in order to"
" immediately reuse previous sockets which were bound on the same *address* "
"and remained in TIME_WAIT state."
msgstr ""
"在 POSIX 平台上，设置 :data:`SO_REUSEADDR` 套接字选项是为了立即重用以前绑定在同一 *address* 上并保持 "
"TIME_WAIT 状态的套接字。"

#: ../../library/socket.rst:645
msgid ""
"Return ``True`` if the platform supports creating a TCP socket which can "
"handle both IPv4 and IPv6 connections."
msgstr "如果平台支持创建 IPv4 和 IPv6 连接都可以处理的 TCP 套接字，则返回 ``True``。"

#: ../../library/socket.rst:652
msgid ""
"Duplicate the file descriptor *fd* (an integer as returned by a file "
"object's :meth:`fileno` method) and build a socket object from the result.  "
"Address family, socket type and protocol number are as for the "
":func:`.socket` function above. The file descriptor should refer to a "
"socket, but this is not checked --- subsequent operations on the object may "
"fail if the file descriptor is invalid. This function is rarely needed, but "
"can be used to get or set socket options on a socket passed to a program as "
"standard input or output (such as a server started by the Unix inet daemon)."
"  The socket is assumed to be in blocking mode."
msgstr ""
"复制文件描述符 *fd* （一个由文件对象的 :meth:`fileno` "
"方法返回的整数），然后从结果中构建一个套接字对象。地址簇、套接字类型和协议号与上述 :func:`.socket` "
"函数相同。文件描述符应指向一个套接字，但不会专门去检查——如果文件描述符是无效的，则对该对象的后续操作可能会失败。本函数很少用到，但是在将套接字作为标准输入或输出传递给程序（如"
" Unix inet 守护程序启动的服务器）时，可以使用本函数获取或设置套接字选项。套接字须处于阻塞模式。"

#: ../../library/socket.rst:669
msgid ""
"Instantiate a socket from data obtained from the :meth:`socket.share` "
"method.  The socket is assumed to be in blocking mode."
msgstr ""

#: ../../library/socket.rst:673 ../../library/socket.rst:1670
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`可用性 <availability>`: Windows。"

#: ../../library/socket.rst:679
msgid ""
"This is a Python type object that represents the socket object type. It is "
"the same as ``type(socket(...))``."
msgstr ""

#: ../../library/socket.rst:684
msgid "Other functions"
msgstr "其他功能"

#: ../../library/socket.rst:686
msgid "The :mod:`socket` module also offers various network-related services:"
msgstr ""

#: ../../library/socket.rst:691
msgid ""
"Close a socket file descriptor. This is like :func:`os.close`, but for "
"sockets. On some platforms (most noticeable Windows) :func:`os.close` does "
"not work for socket file descriptors."
msgstr ""

#: ../../library/socket.rst:699
msgid ""
"Translate the *host*/*port* argument into a sequence of 5-tuples that "
"contain all the necessary arguments for creating a socket connected to that "
"service. *host* is a domain name, a string representation of an IPv4/v6 "
"address or ``None``. *port* is a string service name such as ``'http'``, a "
"numeric port number or ``None``.  By passing ``None`` as the value of *host*"
" and *port*, you can pass ``NULL`` to the underlying C API."
msgstr ""

#: ../../library/socket.rst:706
msgid ""
"The *family*, *type* and *proto* arguments can be optionally specified in "
"order to narrow the list of addresses returned.  Passing zero as a value for"
" each of these arguments selects the full range of results. The *flags* "
"argument can be one or several of the ``AI_*`` constants, and will influence"
" how results are computed and returned. For example, :const:`AI_NUMERICHOST`"
" will disable domain name resolution and will raise an error if *host* is a "
"domain name."
msgstr ""

#: ../../library/socket.rst:714
msgid "The function returns a list of 5-tuples with the following structure:"
msgstr ""

#: ../../library/socket.rst:716
msgid "``(family, type, proto, canonname, sockaddr)``"
msgstr ""

#: ../../library/socket.rst:718
msgid ""
"In these tuples, *family*, *type*, *proto* are all integers and are meant to"
" be passed to the :func:`.socket` function.  *canonname* will be a string "
"representing the canonical name of the *host* if :const:`AI_CANONNAME` is "
"part of the *flags* argument; else *canonname* will be empty.  *sockaddr* is"
" a tuple describing a socket address, whose format depends on the returned "
"*family* (a ``(address, port)`` 2-tuple for :const:`AF_INET`, a ``(address, "
"port, flow info, scope id)`` 4-tuple for :const:`AF_INET6`), and is meant to"
" be passed to the :meth:`socket.connect` method."
msgstr ""

#: ../../library/socket.rst:729
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.getaddrinfo`` with "
"arguments ``host``, ``port``, ``family``, ``type``, ``protocol``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``socket.getaddrinfo`` 附带参数 "
"``host``、``port``、``family``、``type``、``protocol``。"

#: ../../library/socket.rst:730
msgid ""
"The following example fetches address information for a hypothetical TCP "
"connection to ``example.org`` on port 80 (results may differ on your system "
"if IPv6 isn't enabled)::"
msgstr ""

#: ../../library/socket.rst:740
msgid "parameters can now be passed using keyword arguments."
msgstr ""

#: ../../library/socket.rst:743
msgid ""
"for IPv6 multicast addresses, string representing an address will not "
"contain ``%scope`` part."
msgstr ""

#: ../../library/socket.rst:749
msgid ""
"Return a fully qualified domain name for *name*. If *name* is omitted or "
"empty, it is interpreted as the local host.  To find the fully qualified "
"name, the hostname returned by :func:`gethostbyaddr` is checked, followed by"
" aliases for the host, if available.  The first name which includes a period"
" is selected.  In case no fully qualified domain name is available, the "
"hostname as returned by :func:`gethostname` is returned."
msgstr ""

#: ../../library/socket.rst:759
msgid ""
"Translate a host name to IPv4 address format.  The IPv4 address is returned "
"as a string, such as  ``'100.50.200.5'``.  If the host name is an IPv4 "
"address itself it is returned unchanged.  See :func:`gethostbyname_ex` for a"
" more complete interface. :func:`gethostbyname` does not support IPv6 name "
"resolution, and :func:`getaddrinfo` should be used instead for IPv4/v6 dual "
"stack support."
msgstr ""

#: ../../library/socket.rst:765 ../../library/socket.rst:779
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.gethostbyname`` with "
"argument ``hostname``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``socket.gethostbyname``，附带参数 ``hostname``。"

#: ../../library/socket.rst:770
msgid ""
"Translate a host name to IPv4 address format, extended interface. Return a "
"triple ``(hostname, aliaslist, ipaddrlist)`` where *hostname* is the primary"
" host name responding to the given *ip_address*, *aliaslist* is a (possibly "
"empty) list of alternative host names for the same address, and *ipaddrlist*"
" is a list of IPv4 addresses for the same interface on the same host (often "
"but not always a single address). :func:`gethostbyname_ex` does not support "
"IPv6 name resolution, and :func:`getaddrinfo` should be used instead for "
"IPv4/v6 dual stack support."
msgstr ""

#: ../../library/socket.rst:784
msgid ""
"Return a string containing the hostname of the machine where  the Python "
"interpreter is currently executing."
msgstr ""

#: ../../library/socket.rst:788
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.gethostname`` with no "
"arguments."
msgstr "引发一个 :ref:`审计事件 <auditing>` ``socket.gethostname``，没有附带参数。"

#: ../../library/socket.rst:789
msgid ""
"Note: :func:`gethostname` doesn't always return the fully qualified domain "
"name; use :func:`getfqdn` for that."
msgstr ""

#: ../../library/socket.rst:795
msgid ""
"Return a triple ``(hostname, aliaslist, ipaddrlist)`` where *hostname* is "
"the primary host name responding to the given *ip_address*, *aliaslist* is a"
" (possibly empty) list of alternative host names for the same address, and "
"*ipaddrlist* is a list of IPv4/v6 addresses for the same interface on the "
"same host (most likely containing only a single address). To find the fully "
"qualified domain name, use the function :func:`getfqdn`. "
":func:`gethostbyaddr` supports both IPv4 and IPv6."
msgstr ""

#: ../../library/socket.rst:803
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.gethostbyaddr`` with "
"argument ``ip_address``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``socket.gethostbyaddr``，附带参数 ``ip_address``。"

#: ../../library/socket.rst:808
msgid ""
"Translate a socket address *sockaddr* into a 2-tuple ``(host, port)``. "
"Depending on the settings of *flags*, the result can contain a fully-"
"qualified domain name or numeric address representation in *host*.  "
"Similarly, *port* can contain a string port name or a numeric port number."
msgstr ""

#: ../../library/socket.rst:813
msgid ""
"For IPv6 addresses, ``%scope`` is appended to the host part if *sockaddr* "
"contains meaningful *scopeid*. Usually this happens for multicast addresses."
msgstr ""

#: ../../library/socket.rst:816
msgid ""
"For more information about *flags* you can consult "
":manpage:`getnameinfo(3)`."
msgstr ""

#: ../../library/socket.rst:818
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.getnameinfo`` with "
"argument ``sockaddr``."
msgstr "引发一个 :ref:`审计事件 <auditing>` ``socket.getnameinfo``，附带参数 ``sockaddr``。"

#: ../../library/socket.rst:822
msgid ""
"Translate an Internet protocol name (for example, ``'icmp'``) to a constant "
"suitable for passing as the (optional) third argument to the :func:`.socket`"
" function.  This is usually only needed for sockets opened in \"raw\" mode "
"(:const:`SOCK_RAW`); for the normal socket modes, the correct protocol is "
"chosen automatically if the protocol is omitted or zero."
msgstr ""

#: ../../library/socket.rst:831
msgid ""
"Translate an Internet service name and protocol name to a port number for "
"that service.  The optional protocol name, if given, should be ``'tcp'`` or "
"``'udp'``, otherwise any protocol will match."
msgstr ""

#: ../../library/socket.rst:835
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.getservbyname`` with "
"arguments ``servicename``, ``protocolname``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``socket.getservbyname``，附带参数 "
"``servicename``、``protocolname``。"

#: ../../library/socket.rst:840
msgid ""
"Translate an Internet port number and protocol name to a service name for "
"that service.  The optional protocol name, if given, should be ``'tcp'`` or "
"``'udp'``, otherwise any protocol will match."
msgstr ""

#: ../../library/socket.rst:844
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.getservbyport`` with "
"arguments ``port``, ``protocolname``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``socket.getservbyport``，附带参数 "
"``port``、``protocolname``。"

#: ../../library/socket.rst:849
msgid ""
"Convert 32-bit positive integers from network to host byte order.  On "
"machines where the host byte order is the same as network byte order, this "
"is a no-op; otherwise, it performs a 4-byte swap operation."
msgstr ""

#: ../../library/socket.rst:856
msgid ""
"Convert 16-bit positive integers from network to host byte order.  On "
"machines where the host byte order is the same as network byte order, this "
"is a no-op; otherwise, it performs a 2-byte swap operation."
msgstr ""

#: ../../library/socket.rst:860 ../../library/socket.rst:880
msgid ""
"In case *x* does not fit in 16-bit unsigned integer, but does fit in a "
"positive C int, it is silently truncated to 16-bit unsigned integer. This "
"silent truncation feature is deprecated, and will raise an exception in "
"future versions of Python."
msgstr ""

#: ../../library/socket.rst:869
msgid ""
"Convert 32-bit positive integers from host to network byte order.  On "
"machines where the host byte order is the same as network byte order, this "
"is a no-op; otherwise, it performs a 4-byte swap operation."
msgstr ""

#: ../../library/socket.rst:876
msgid ""
"Convert 16-bit positive integers from host to network byte order.  On "
"machines where the host byte order is the same as network byte order, this "
"is a no-op; otherwise, it performs a 2-byte swap operation."
msgstr ""

#: ../../library/socket.rst:889
msgid ""
"Convert an IPv4 address from dotted-quad string format (for example, "
"'123.45.67.89') to 32-bit packed binary format, as a bytes object four "
"characters in length.  This is useful when conversing with a program that "
"uses the standard C library and needs objects of type :c:type:`struct "
"in_addr`, which is the C type for the 32-bit packed binary this function "
"returns."
msgstr ""

#: ../../library/socket.rst:895
msgid ""
":func:`inet_aton` also accepts strings with less than three dots; see the "
"Unix manual page :manpage:`inet(3)` for details."
msgstr ""

#: ../../library/socket.rst:898
msgid ""
"If the IPv4 address string passed to this function is invalid, "
":exc:`OSError` will be raised. Note that exactly what is valid depends on "
"the underlying C implementation of :c:func:`inet_aton`."
msgstr ""

#: ../../library/socket.rst:902
msgid ""
":func:`inet_aton` does not support IPv6, and :func:`inet_pton` should be "
"used instead for IPv4/v6 dual stack support."
msgstr ""

#: ../../library/socket.rst:908
msgid ""
"Convert a 32-bit packed IPv4 address (a :term:`bytes-like object` four bytes"
" in length) to its standard dotted-quad string representation (for example, "
"'123.45.67.89').  This is useful when conversing with a program that uses "
"the standard C library and needs objects of type :c:type:`struct in_addr`, "
"which is the C type for the 32-bit packed binary data this function takes as"
" an argument."
msgstr ""

#: ../../library/socket.rst:915
msgid ""
"If the byte sequence passed to this function is not exactly 4 bytes in "
"length, :exc:`OSError` will be raised. :func:`inet_ntoa` does not support "
"IPv6, and :func:`inet_ntop` should be used instead for IPv4/v6 dual stack "
"support."
msgstr ""

#: ../../library/socket.rst:926
msgid ""
"Convert an IP address from its family-specific string format to a packed, "
"binary format. :func:`inet_pton` is useful when a library or network "
"protocol calls for an object of type :c:type:`struct in_addr` (similar to "
":func:`inet_aton`) or :c:type:`struct in6_addr`."
msgstr ""

#: ../../library/socket.rst:931
msgid ""
"Supported values for *address_family* are currently :const:`AF_INET` and "
":const:`AF_INET6`. If the IP address string *ip_string* is invalid, "
":exc:`OSError` will be raised. Note that exactly what is valid depends on "
"both the value of *address_family* and the underlying implementation of "
":c:func:`inet_pton`."
msgstr ""

#: ../../library/socket.rst:938 ../../library/socket.rst:958
msgid ""
":ref:`Availability <availability>`: Unix (maybe not all platforms), Windows."
msgstr ":ref:`可用性 <availability>`： Unix（可能非所有平台都可用）、Windows。"

#: ../../library/socket.rst:939 ../../library/socket.rst:959
msgid "Windows support added"
msgstr ""

#: ../../library/socket.rst:945
msgid ""
"Convert a packed IP address (a :term:`bytes-like object` of some number of "
"bytes) to its standard, family-specific string representation (for example, "
"``'7.10.0.5'`` or ``'5aef:2b::8'``). :func:`inet_ntop` is useful when a "
"library or network protocol returns an object of type :c:type:`struct "
"in_addr` (similar to :func:`inet_ntoa`) or :c:type:`struct in6_addr`."
msgstr ""

#: ../../library/socket.rst:952
msgid ""
"Supported values for *address_family* are currently :const:`AF_INET` and "
":const:`AF_INET6`. If the bytes object *packed_ip* is not the correct length"
" for the specified address family, :exc:`ValueError` will be raised. "
":exc:`OSError` is raised for errors from the call to :func:`inet_ntop`."
msgstr ""

#: ../../library/socket.rst:974
msgid ""
"Return the total length, without trailing padding, of an ancillary data item"
" with associated data of the given *length*.  This value can often be used "
"as the buffer size for :meth:`~socket.recvmsg` to receive a single item of "
"ancillary data, but :rfc:`3542` requires portable applications to use "
":func:`CMSG_SPACE` and thus include space for padding, even when the item "
"will be the last in the buffer.  Raises :exc:`OverflowError` if *length* is "
"outside the permissible range of values."
msgstr ""

#: ../../library/socket.rst:984 ../../library/socket.rst:1005
#: ../../library/socket.rst:1405 ../../library/socket.rst:1447
#: ../../library/socket.rst:1553
msgid ""
":ref:`Availability <availability>`: most Unix platforms, possibly others."
msgstr ":ref:`可用性 <availability>`： 大多数 Unix 平台，其他平台也可能可用。"

#: ../../library/socket.rst:990
msgid ""
"Return the buffer size needed for :meth:`~socket.recvmsg` to receive an "
"ancillary data item with associated data of the given *length*, along with "
"any trailing padding.  The buffer space needed to receive multiple items is "
"the sum of the :func:`CMSG_SPACE` values for their associated data lengths."
"  Raises :exc:`OverflowError` if *length* is outside the permissible range "
"of values."
msgstr ""

#: ../../library/socket.rst:998
msgid ""
"Note that some systems might support ancillary data without providing this "
"function.  Also note that setting the buffer size using the results of this "
"function may not precisely limit the amount of ancillary data that can be "
"received, since additional data may be able to fit into the padding area."
msgstr ""

#: ../../library/socket.rst:1011
msgid ""
"Return the default timeout in seconds (float) for new socket objects. A "
"value of ``None`` indicates that new socket objects have no timeout. When "
"the socket module is first imported, the default is ``None``."
msgstr ""

#: ../../library/socket.rst:1018
msgid ""
"Set the default timeout in seconds (float) for new socket objects.  When the"
" socket module is first imported, the default is ``None``.  See "
":meth:`~socket.settimeout` for possible values and their respective "
"meanings."
msgstr ""

#: ../../library/socket.rst:1026
msgid ""
"Set the machine's hostname to *name*.  This will raise an :exc:`OSError` if "
"you don't have enough rights."
msgstr ""

#: ../../library/socket.rst:1030
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.sethostname`` with "
"argument ``name``."
msgstr "引发一个 :ref:`审计事件 <auditing>` ``socket.sethostname``，附带参数 ``name``。"

#: ../../library/socket.rst:1032
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`Availability <availability>`: Unix."

#: ../../library/socket.rst:1038
msgid ""
"Return a list of network interface information (index int, name string) "
"tuples. :exc:`OSError` if the system call fails."
msgstr ""

#: ../../library/socket.rst:1043 ../../library/socket.rst:1057
#: ../../library/socket.rst:1071
msgid ":ref:`Availability <availability>`: Unix, Windows."
msgstr ":ref:`可用性 <availability>`: Unix, Windows。"

#: ../../library/socket.rst:1046 ../../library/socket.rst:1060
#: ../../library/socket.rst:1074
msgid "Windows support was added."
msgstr ""

#: ../../library/socket.rst:1052
msgid ""
"Return a network interface index number corresponding to an interface name. "
":exc:`OSError` if no interface with the given name exists."
msgstr ""

#: ../../library/socket.rst:1066
msgid ""
"Return a network interface name corresponding to an interface index number. "
":exc:`OSError` if no interface with the given index exists."
msgstr ""

#: ../../library/socket.rst:1081
msgid "Socket Objects"
msgstr ""

#: ../../library/socket.rst:1083
msgid ""
"Socket objects have the following methods.  Except for "
":meth:`~socket.makefile`, these correspond to Unix system calls applicable "
"to sockets."
msgstr ""

#: ../../library/socket.rst:1087
msgid ""
"Support for the :term:`context manager` protocol was added.  Exiting the "
"context manager is equivalent to calling :meth:`~socket.close`."
msgstr ""

#: ../../library/socket.rst:1094
msgid ""
"Accept a connection. The socket must be bound to an address and listening "
"for connections. The return value is a pair ``(conn, address)`` where *conn*"
" is a *new* socket object usable to send and receive data on the connection,"
" and *address* is the address bound to the socket on the other end of the "
"connection."
msgstr ""

#: ../../library/socket.rst:1101 ../../library/socket.rst:1188
msgid "The socket is now non-inheritable."
msgstr ""

#: ../../library/socket.rst:1104 ../../library/socket.rst:1319
#: ../../library/socket.rst:1333 ../../library/socket.rst:1408
#: ../../library/socket.rst:1479 ../../library/socket.rst:1498
#: ../../library/socket.rst:1515 ../../library/socket.rst:1558
msgid ""
"If the system call is interrupted and the signal handler does not raise an "
"exception, the method now retries the system call instead of raising an "
":exc:`InterruptedError` exception (see :pep:`475` for the rationale)."
msgstr ""

#: ../../library/socket.rst:1112
msgid ""
"Bind the socket to *address*.  The socket must not already be bound. (The "
"format of *address* depends on the address family --- see above.)"
msgstr ""

#: ../../library/socket.rst:1115
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.bind`` with arguments "
"``self``, ``address``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``socket.bind``，附带参数 ``self``、``address``。"

#: ../../library/socket.rst:1119
msgid ""
"Mark the socket closed.  The underlying system resource (e.g. a file "
"descriptor) is also closed when all file objects from :meth:`makefile()` are"
" closed.  Once that happens, all future operations on the socket object will"
" fail. The remote end will receive no more data (after queued data is "
"flushed)."
msgstr ""

#: ../../library/socket.rst:1125
msgid ""
"Sockets are automatically closed when they are garbage-collected, but it is "
"recommended to :meth:`close` them explicitly, or to use a :keyword:`with` "
"statement around them."
msgstr ""

#: ../../library/socket.rst:1129
msgid ""
":exc:`OSError` is now raised if an error occurs when the underlying "
":c:func:`close` call is made."
msgstr ""

#: ../../library/socket.rst:1135
msgid ""
":meth:`close()` releases the resource associated with a connection but does "
"not necessarily close the connection immediately.  If you want to close the "
"connection in a timely fashion, call :meth:`shutdown()` before "
":meth:`close()`."
msgstr ""

#: ../../library/socket.rst:1143
msgid ""
"Connect to a remote socket at *address*. (The format of *address* depends on"
" the address family --- see above.)"
msgstr ""

#: ../../library/socket.rst:1146
msgid ""
"If the connection is interrupted by a signal, the method waits until the "
"connection completes, or raise a :exc:`socket.timeout` on timeout, if the "
"signal handler doesn't raise an exception and the socket is blocking or has "
"a timeout. For non-blocking sockets, the method raises an "
":exc:`InterruptedError` exception if the connection is interrupted by a "
"signal (or the exception raised by the signal handler)."
msgstr ""

#: ../../library/socket.rst:1154 ../../library/socket.rst:1171
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.connect`` with arguments"
" ``self``, ``address``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``socket.connect``，附带参数 ``self``、``address``。"

#: ../../library/socket.rst:1155
msgid ""
"The method now waits until the connection completes instead of raising an "
":exc:`InterruptedError` exception if the connection is interrupted by a "
"signal, the signal handler doesn't raise an exception and the socket is "
"blocking or has a timeout (see the :pep:`475` for the rationale)."
msgstr ""

#: ../../library/socket.rst:1164
msgid ""
"Like ``connect(address)``, but return an error indicator instead of raising "
"an exception for errors returned by the C-level :c:func:`connect` call "
"(other problems, such as \"host not found,\" can still raise exceptions).  "
"The error indicator is ``0`` if the operation succeeded, otherwise the value"
" of the :c:data:`errno` variable.  This is useful to support, for example, "
"asynchronous connects."
msgstr ""

#: ../../library/socket.rst:1175
msgid ""
"Put the socket object into closed state without actually closing the "
"underlying file descriptor.  The file descriptor is returned, and can be "
"reused for other purposes."
msgstr ""

#: ../../library/socket.rst:1184
msgid "Duplicate the socket."
msgstr ""

#: ../../library/socket.rst:1194
msgid ""
"Return the socket's file descriptor (a small integer), or -1 on failure. "
"This is useful with :func:`select.select`."
msgstr ""

#: ../../library/socket.rst:1197
msgid ""
"Under Windows the small integer returned by this method cannot be used where"
" a file descriptor can be used (such as :func:`os.fdopen`).  Unix does not "
"have this limitation."
msgstr ""

#: ../../library/socket.rst:1203
msgid ""
"Get the :ref:`inheritable flag <fd_inheritance>` of the socket's file "
"descriptor or socket's handle: ``True`` if the socket can be inherited in "
"child processes, ``False`` if it cannot."
msgstr ""

#: ../../library/socket.rst:1212
msgid ""
"Return the remote address to which the socket is connected.  This is useful "
"to find out the port number of a remote IPv4/v6 socket, for instance. (The "
"format of the address returned depends on the address family --- see above.)"
"  On some systems this function is not supported."
msgstr ""

#: ../../library/socket.rst:1220
msgid ""
"Return the socket's own address.  This is useful to find out the port number"
" of an IPv4/v6 socket, for instance. (The format of the address returned "
"depends on the address family --- see above.)"
msgstr ""

#: ../../library/socket.rst:1227
msgid ""
"Return the value of the given socket option (see the Unix man page "
":manpage:`getsockopt(2)`).  The needed symbolic constants (:const:`SO_\\*` "
"etc.) are defined in this module.  If *buflen* is absent, an integer option "
"is assumed and its integer value is returned by the function.  If *buflen* "
"is present, it specifies the maximum length of the buffer used to receive "
"the option in, and this buffer is returned as a bytes object.  It is up to "
"the caller to decode the contents of the buffer (see the optional built-in "
"module :mod:`struct` for a way to decode C structures encoded as byte "
"strings)."
msgstr ""

#: ../../library/socket.rst:1239
msgid ""
"Return ``True`` if socket is in blocking mode, ``False`` if in non-blocking."
msgstr ""

#: ../../library/socket.rst:1242
msgid "This is equivalent to checking ``socket.gettimeout() == 0``."
msgstr ""

#: ../../library/socket.rst:1249
msgid ""
"Return the timeout in seconds (float) associated with socket operations, or "
"``None`` if no timeout is set.  This reflects the last call to "
":meth:`setblocking` or :meth:`settimeout`."
msgstr ""

#: ../../library/socket.rst:0
msgid "platform"
msgstr ""

#: ../../library/socket.rst:1256
msgid "Windows"
msgstr "Windows"

#: ../../library/socket.rst:1258
msgid ""
"The :meth:`ioctl` method is a limited interface to the WSAIoctl system "
"interface.  Please refer to the `Win32 documentation "
"<https://msdn.microsoft.com/en-us/library/ms741621%28VS.85%29.aspx>`_ for "
"more information."
msgstr ""

#: ../../library/socket.rst:1263
msgid ""
"On other platforms, the generic :func:`fcntl.fcntl` and :func:`fcntl.ioctl` "
"functions may be used; they accept a socket object as their first argument."
msgstr ""

#: ../../library/socket.rst:1266
msgid ""
"Currently only the following control codes are supported: ``SIO_RCVALL``, "
"``SIO_KEEPALIVE_VALS``, and ``SIO_LOOPBACK_FAST_PATH``."
msgstr ""

#: ../../library/socket.rst:1274
msgid ""
"Enable a server to accept connections.  If *backlog* is specified, it must "
"be at least 0 (if it is lower, it is set to 0); it specifies the number of "
"unaccepted connections that the system will allow before refusing new "
"connections. If not specified, a default reasonable value is chosen."
msgstr ""

#: ../../library/socket.rst:1279
msgid "The *backlog* parameter is now optional."
msgstr ""

#: ../../library/socket.rst:1287
msgid ""
"Return a :term:`file object` associated with the socket.  The exact returned"
" type depends on the arguments given to :meth:`makefile`.  These arguments "
"are interpreted the same way as by the built-in :func:`open` function, "
"except the only supported *mode* values are ``'r'`` (default), ``'w'`` and "
"``'b'``."
msgstr ""

#: ../../library/socket.rst:1292
msgid ""
"The socket must be in blocking mode; it can have a timeout, but the file "
"object's internal buffer may end up in an inconsistent state if a timeout "
"occurs."
msgstr ""

#: ../../library/socket.rst:1296
msgid ""
"Closing the file object returned by :meth:`makefile` won't close the "
"original socket unless all other file objects have been closed and "
":meth:`socket.close` has been called on the socket object."
msgstr ""

#: ../../library/socket.rst:1302
msgid ""
"On Windows, the file-like object created by :meth:`makefile` cannot be used "
"where a file object with a file descriptor is expected, such as the stream "
"arguments of :meth:`subprocess.Popen`."
msgstr ""

#: ../../library/socket.rst:1309
msgid ""
"Receive data from the socket.  The return value is a bytes object "
"representing the data received.  The maximum amount of data to be received "
"at once is specified by *bufsize*.  See the Unix manual page "
":manpage:`recv(2)` for the meaning of the optional argument *flags*; it "
"defaults to zero."
msgstr ""

#: ../../library/socket.rst:1316
msgid ""
"For best match with hardware and network realities, the value of  *bufsize* "
"should be a relatively small power of 2, for example, 4096."
msgstr ""

#: ../../library/socket.rst:1327
msgid ""
"Receive data from the socket.  The return value is a pair ``(bytes, "
"address)`` where *bytes* is a bytes object representing the data received "
"and *address* is the address of the socket sending the data.  See the Unix "
"manual page :manpage:`recv(2)` for the meaning of the optional argument "
"*flags*; it defaults to zero. (The format of *address* depends on the "
"address family --- see above.)"
msgstr ""

#: ../../library/socket.rst:1338
msgid ""
"For multicast IPv6 address, first item of *address* does not contain "
"``%scope`` part anymore. In order to get full IPv6 address use "
":func:`getnameinfo`."
msgstr ""

#: ../../library/socket.rst:1345
msgid ""
"Receive normal data (up to *bufsize* bytes) and ancillary data from the "
"socket.  The *ancbufsize* argument sets the size in bytes of the internal "
"buffer used to receive the ancillary data; it defaults to 0, meaning that no"
" ancillary data will be received.  Appropriate buffer sizes for ancillary "
"data can be calculated using :func:`CMSG_SPACE` or :func:`CMSG_LEN`, and "
"items which do not fit into the buffer might be truncated or discarded.  The"
" *flags* argument defaults to 0 and has the same meaning as for "
":meth:`recv`."
msgstr ""

#: ../../library/socket.rst:1355
msgid ""
"The return value is a 4-tuple: ``(data, ancdata, msg_flags, address)``.  The"
" *data* item is a :class:`bytes` object holding the non-ancillary data "
"received.  The *ancdata* item is a list of zero or more tuples "
"``(cmsg_level, cmsg_type, cmsg_data)`` representing the ancillary data "
"(control messages) received: *cmsg_level* and *cmsg_type* are integers "
"specifying the protocol level and protocol-specific type respectively, and "
"*cmsg_data* is a :class:`bytes` object holding the associated data.  The "
"*msg_flags* item is the bitwise OR of various flags indicating conditions on"
" the received message; see your system documentation for details. If the "
"receiving socket is unconnected, *address* is the address of the sending "
"socket, if available; otherwise, its value is unspecified."
msgstr ""

#: ../../library/socket.rst:1369
msgid ""
"On some systems, :meth:`sendmsg` and :meth:`recvmsg` can be used to pass "
"file descriptors between processes over an :const:`AF_UNIX` socket.  When "
"this facility is used (it is often restricted to :const:`SOCK_STREAM` "
"sockets), :meth:`recvmsg` will return, in its ancillary data, items of the "
"form ``(socket.SOL_SOCKET, socket.SCM_RIGHTS, fds)``, where *fds* is a "
":class:`bytes` object representing the new file descriptors as a binary "
"array of the native C :c:type:`int` type.  If :meth:`recvmsg` raises an "
"exception after the system call returns, it will first attempt to close any "
"file descriptors received via this mechanism."
msgstr ""

#: ../../library/socket.rst:1380
msgid ""
"Some systems do not indicate the truncated length of ancillary data items "
"which have been only partially received.  If an item appears to extend "
"beyond the end of the buffer, :meth:`recvmsg` will issue a "
":exc:`RuntimeWarning`, and will return the part of it which is inside the "
"buffer provided it has not been truncated before the start of its associated"
" data."
msgstr ""

#: ../../library/socket.rst:1387
msgid ""
"On systems which support the :const:`SCM_RIGHTS` mechanism, the following "
"function will receive up to *maxfds* file descriptors, returning the message"
" data and a list containing the descriptors (while ignoring unexpected "
"conditions such as unrelated control messages being received).  See also "
":meth:`sendmsg`. ::"
msgstr ""

#: ../../library/socket.rst:1416
msgid ""
"Receive normal data and ancillary data from the socket, behaving as "
":meth:`recvmsg` would, but scatter the non-ancillary data into a series of "
"buffers instead of returning a new bytes object.  The *buffers* argument "
"must be an iterable of objects that export writable buffers (e.g. "
":class:`bytearray` objects); these will be filled with successive chunks of "
"the non-ancillary data until it has all been written or there are no more "
"buffers.  The operating system may set a limit (:func:`~os.sysconf` value "
"``SC_IOV_MAX``) on the number of buffers that can be used.  The *ancbufsize*"
" and *flags* arguments have the same meaning as for :meth:`recvmsg`."
msgstr ""

#: ../../library/socket.rst:1427
msgid ""
"The return value is a 4-tuple: ``(nbytes, ancdata, msg_flags, address)``, "
"where *nbytes* is the total number of bytes of non-ancillary data written "
"into the buffers, and *ancdata*, *msg_flags* and *address* are the same as "
"for :meth:`recvmsg`."
msgstr ""

#: ../../library/socket.rst:1432
msgid "Example::"
msgstr "示例::"

#: ../../library/socket.rst:1453
msgid ""
"Receive data from the socket, writing it into *buffer* instead of creating a"
" new bytestring.  The return value is a pair ``(nbytes, address)`` where "
"*nbytes* is the number of bytes received and *address* is the address of the"
" socket sending the data.  See the Unix manual page :manpage:`recv(2)` for "
"the meaning of the optional argument *flags*; it defaults to zero.  (The "
"format of *address* depends on the address family --- see above.)"
msgstr ""

#: ../../library/socket.rst:1463
msgid ""
"Receive up to *nbytes* bytes from the socket, storing the data into a buffer"
" rather than creating a new bytestring.  If *nbytes* is not specified (or "
"0), receive up to the size available in the given buffer.  Returns the "
"number of bytes received.  See the Unix manual page :manpage:`recv(2)` for "
"the meaning of the optional argument *flags*; it defaults to zero."
msgstr ""

#: ../../library/socket.rst:1472
msgid ""
"Send data to the socket.  The socket must be connected to a remote socket.  "
"The optional *flags* argument has the same meaning as for :meth:`recv` "
"above. Returns the number of bytes sent. Applications are responsible for "
"checking that all data has been sent; if only some of the data was "
"transmitted, the application needs to attempt delivery of the remaining "
"data. For further information on this topic, consult the :ref:`socket-"
"howto`."
msgstr ""

#: ../../library/socket.rst:1487
msgid ""
"Send data to the socket.  The socket must be connected to a remote socket.  "
"The optional *flags* argument has the same meaning as for :meth:`recv` "
"above. Unlike :meth:`send`, this method continues to send data from *bytes* "
"until either all data has been sent or an error occurs.  ``None`` is "
"returned on success.  On error, an exception is raised, and there is no way "
"to determine how much data, if any, was successfully sent."
msgstr ""

#: ../../library/socket.rst:1494
msgid ""
"The socket timeout is no more reset each time data is sent successfully. The"
" socket timeout is now the maximum total duration to send all data."
msgstr ""

#: ../../library/socket.rst:1507
msgid ""
"Send data to the socket.  The socket should not be connected to a remote "
"socket, since the destination socket is specified by *address*.  The "
"optional *flags* argument has the same meaning as for :meth:`recv` above.  "
"Return the number of bytes sent. (The format of *address* depends on the "
"address family --- see above.)"
msgstr ""

#: ../../library/socket.rst:1514
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.sendto`` with arguments "
"``self``, ``address``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``socket.sendto``，附带参数 ``self``、``address``。"

#: ../../library/socket.rst:1523
msgid ""
"Send normal and ancillary data to the socket, gathering the non-ancillary "
"data from a series of buffers and concatenating it into a single message.  "
"The *buffers* argument specifies the non-ancillary data as an iterable of "
":term:`bytes-like objects <bytes-like object>` (e.g. :class:`bytes` "
"objects); the operating system may set a limit (:func:`~os.sysconf` value "
"``SC_IOV_MAX``) on the number of buffers that can be used.  The *ancdata* "
"argument specifies the ancillary data (control messages) as an iterable of "
"zero or more tuples ``(cmsg_level, cmsg_type, cmsg_data)``, where "
"*cmsg_level* and *cmsg_type* are integers specifying the protocol level and "
"protocol-specific type respectively, and *cmsg_data* is a bytes-like object "
"holding the associated data.  Note that some systems (in particular, systems"
" without :func:`CMSG_SPACE`) might support sending only one control message "
"per call.  The *flags* argument defaults to 0 and has the same meaning as "
"for :meth:`send`.  If *address* is supplied and not ``None``, it sets a "
"destination address for the message.  The return value is the number of "
"bytes of non-ancillary data sent."
msgstr ""

#: ../../library/socket.rst:1543
msgid ""
"The following function sends the list of file descriptors *fds* over an "
":const:`AF_UNIX` socket, on systems which support the :const:`SCM_RIGHTS` "
"mechanism.  See also :meth:`recvmsg`. ::"
msgstr ""

#: ../../library/socket.rst:1555
msgid ""
"Raises an :ref:`auditing event <auditing>` ``socket.sendmsg`` with arguments"
" ``self``, ``address``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``socket.sendmsg``，附带参数 ``self``、``address``。"

#: ../../library/socket.rst:1565
msgid ""
"Specialized version of :meth:`~socket.sendmsg` for :const:`AF_ALG` socket. "
"Set mode, IV, AEAD associated data length and flags for :const:`AF_ALG` "
"socket."
msgstr ""

#: ../../library/socket.rst:1574
msgid ""
"Send a file until EOF is reached by using high-performance "
":mod:`os.sendfile` and return the total number of bytes which were sent. "
"*file* must be a regular file object opened in binary mode. If "
":mod:`os.sendfile` is not available (e.g. Windows) or *file* is not a "
"regular file :meth:`send` will be used instead. *offset* tells from where to"
" start reading the file. If specified, *count* is the total number of bytes "
"to transmit as opposed to sending the file until EOF is reached. File "
"position is updated on return or also in case of error in which case "
":meth:`file.tell() <io.IOBase.tell>` can be used to figure out the number of"
" bytes which were sent. The socket must be of :const:`SOCK_STREAM` type. "
"Non-blocking sockets are not supported."
msgstr ""

#: ../../library/socket.rst:1590
msgid ""
"Set the :ref:`inheritable flag <fd_inheritance>` of the socket's file "
"descriptor or socket's handle."
msgstr ""

#: ../../library/socket.rst:1598
msgid ""
"Set blocking or non-blocking mode of the socket: if *flag* is false, the "
"socket is set to non-blocking, else to blocking mode."
msgstr ""

#: ../../library/socket.rst:1601
msgid ""
"This method is a shorthand for certain :meth:`~socket.settimeout` calls:"
msgstr ""

#: ../../library/socket.rst:1603
msgid "``sock.setblocking(True)`` is equivalent to ``sock.settimeout(None)``"
msgstr ""

#: ../../library/socket.rst:1605
msgid "``sock.setblocking(False)`` is equivalent to ``sock.settimeout(0.0)``"
msgstr ""

#: ../../library/socket.rst:1607
msgid ""
"The method no longer applies :const:`SOCK_NONBLOCK` flag on "
":attr:`socket.type`."
msgstr ""

#: ../../library/socket.rst:1614
msgid ""
"Set a timeout on blocking socket operations.  The *value* argument can be a "
"nonnegative floating point number expressing seconds, or ``None``. If a non-"
"zero value is given, subsequent socket operations will raise a "
":exc:`timeout` exception if the timeout period *value* has elapsed before "
"the operation has completed.  If zero is given, the socket is put in non-"
"blocking mode. If ``None`` is given, the socket is put in blocking mode."
msgstr ""

#: ../../library/socket.rst:1621
msgid ""
"For further information, please consult the :ref:`notes on socket timeouts "
"<socket-timeouts>`."
msgstr ""

#: ../../library/socket.rst:1623
msgid ""
"The method no longer toggles :const:`SOCK_NONBLOCK` flag on "
":attr:`socket.type`."
msgstr ""

#: ../../library/socket.rst:1634
msgid ""
"Set the value of the given socket option (see the Unix manual page "
":manpage:`setsockopt(2)`).  The needed symbolic constants are defined in the"
" :mod:`socket` module (:const:`SO_\\*` etc.).  The value can be an integer, "
"``None`` or a :term:`bytes-like object` representing a buffer. In the later "
"case it is up to the caller to ensure that the bytestring contains the "
"proper bits (see the optional built-in module :mod:`struct` for a way to "
"encode C structures as bytestrings). When *value* is set to ``None``, "
"*optlen* argument is required. It's equivalent to call :c:func:`setsockopt` "
"C function with ``optval=NULL`` and ``optlen=optlen``."
msgstr ""

#: ../../library/socket.rst:1648
msgid "setsockopt(level, optname, None, optlen: int) form added."
msgstr ""

#: ../../library/socket.rst:1654
msgid ""
"Shut down one or both halves of the connection.  If *how* is "
":const:`SHUT_RD`, further receives are disallowed.  If *how* is "
":const:`SHUT_WR`, further sends are disallowed.  If *how* is "
":const:`SHUT_RDWR`, further sends and receives are disallowed."
msgstr ""

#: ../../library/socket.rst:1662
msgid ""
"Duplicate a socket and prepare it for sharing with a target process.  The "
"target process must be provided with *process_id*.  The resulting bytes "
"object can then be passed to the target process using some form of "
"interprocess communication and the socket can be recreated there using "
":func:`fromshare`. Once this method has been called, it is safe to close the"
" socket since the operating system has already duplicated it for the target "
"process."
msgstr ""

#: ../../library/socket.rst:1674
msgid ""
"Note that there are no methods :meth:`read` or :meth:`write`; use "
":meth:`~socket.recv` and :meth:`~socket.send` without *flags* argument "
"instead."
msgstr ""

#: ../../library/socket.rst:1677
msgid ""
"Socket objects also have these (read-only) attributes that correspond to the"
" values given to the :class:`~socket.socket` constructor."
msgstr ""

#: ../../library/socket.rst:1683
msgid "The socket family."
msgstr ""

#: ../../library/socket.rst:1688
msgid "The socket type."
msgstr ""

#: ../../library/socket.rst:1693
msgid "The socket protocol."
msgstr ""

#: ../../library/socket.rst:1700
msgid "Notes on socket timeouts"
msgstr ""

#: ../../library/socket.rst:1702
msgid ""
"A socket object can be in one of three modes: blocking, non-blocking, or "
"timeout.  Sockets are by default always created in blocking mode, but this "
"can be changed by calling :func:`setdefaulttimeout`."
msgstr ""

#: ../../library/socket.rst:1706
msgid ""
"In *blocking mode*, operations block until complete or the system returns an"
" error (such as connection timed out)."
msgstr ""

#: ../../library/socket.rst:1709
msgid ""
"In *non-blocking mode*, operations fail (with an error that is unfortunately"
" system-dependent) if they cannot be completed immediately: functions from "
"the :mod:`select` can be used to know when and whether a socket is available"
" for reading or writing."
msgstr ""

#: ../../library/socket.rst:1714
msgid ""
"In *timeout mode*, operations fail if they cannot be completed within the "
"timeout specified for the socket (they raise a :exc:`timeout` exception) or "
"if the system returns an error."
msgstr ""

#: ../../library/socket.rst:1719
msgid ""
"At the operating system level, sockets in *timeout mode* are internally set "
"in non-blocking mode.  Also, the blocking and timeout modes are shared "
"between file descriptors and socket objects that refer to the same network "
"endpoint. This implementation detail can have visible consequences if e.g. "
"you decide to use the :meth:`~socket.fileno()` of a socket."
msgstr ""

#: ../../library/socket.rst:1726
msgid "Timeouts and the ``connect`` method"
msgstr ""

#: ../../library/socket.rst:1728
msgid ""
"The :meth:`~socket.connect` operation is also subject to the timeout "
"setting, and in general it is recommended to call :meth:`~socket.settimeout`"
" before calling :meth:`~socket.connect` or pass a timeout parameter to "
":meth:`create_connection`.  However, the system network stack may also "
"return a connection timeout error of its own regardless of any Python socket"
" timeout setting."
msgstr ""

#: ../../library/socket.rst:1736
msgid "Timeouts and the ``accept`` method"
msgstr ""

#: ../../library/socket.rst:1738
msgid ""
"If :func:`getdefaulttimeout` is not :const:`None`, sockets returned by the "
":meth:`~socket.accept` method inherit that timeout.  Otherwise, the "
"behaviour depends on settings of the listening socket:"
msgstr ""

#: ../../library/socket.rst:1742
msgid ""
"if the listening socket is in *blocking mode* or in *timeout mode*, the "
"socket returned by :meth:`~socket.accept` is in *blocking mode*;"
msgstr ""

#: ../../library/socket.rst:1745
msgid ""
"if the listening socket is in *non-blocking mode*, whether the socket "
"returned by :meth:`~socket.accept` is in blocking or non-blocking mode is "
"operating system-dependent.  If you want to ensure cross-platform behaviour,"
" it is recommended you manually override this setting."
msgstr ""

#: ../../library/socket.rst:1754
msgid "Example"
msgstr "示例"

#: ../../library/socket.rst:1756
msgid ""
"Here are four minimal example programs using the TCP/IP protocol: a server "
"that echoes all data that it receives back (servicing only one client), and "
"a client using it.  Note that a server must perform the sequence "
":func:`.socket`, :meth:`~socket.bind`, :meth:`~socket.listen`, "
":meth:`~socket.accept` (possibly repeating the :meth:`~socket.accept` to "
"service more than one client), while a client only needs the sequence "
":func:`.socket`, :meth:`~socket.connect`.  Also note that the server does "
"not :meth:`~socket.sendall`/:meth:`~socket.recv` on the socket it is "
"listening on but on the new socket returned by :meth:`~socket.accept`."
msgstr ""

#: ../../library/socket.rst:1766
msgid "The first two examples support IPv4 only. ::"
msgstr ""

#: ../../library/socket.rst:1797
msgid ""
"The next two examples are identical to the above two, but support both IPv4 "
"and IPv6. The server side will listen to the first address family available "
"(it should listen to both instead). On most of IPv6-ready systems, IPv6 will"
" take precedence and the server may not accept IPv4 traffic. The client side"
" will try to connect to the all addresses returned as a result of the name "
"resolution, and sends traffic to the first one connected successfully. ::"
msgstr ""

#: ../../library/socket.rst:1869
msgid ""
"The next example shows how to write a very simple network sniffer with raw "
"sockets on Windows. The example requires administrator privileges to modify "
"the interface::"
msgstr ""

#: ../../library/socket.rst:1894
msgid ""
"The next example shows how to use the socket interface to communicate to a "
"CAN network using the raw socket protocol. To use CAN with the broadcast "
"manager protocol instead, open a socket with::"
msgstr ""

#: ../../library/socket.rst:1900
msgid ""
"After binding (:const:`CAN_RAW`) or connecting (:const:`CAN_BCM`) the "
"socket, you can use the :meth:`socket.send`, and the :meth:`socket.recv` "
"operations (and their counterparts) on the socket object as usual."
msgstr ""

#: ../../library/socket.rst:1904
msgid "This last example might require special privileges::"
msgstr ""

#: ../../library/socket.rst:1944
msgid ""
"Running an example several times with too small delay between executions, "
"could lead to this error::"
msgstr ""

#: ../../library/socket.rst:1949
msgid ""
"This is because the previous execution has left the socket in a "
"``TIME_WAIT`` state, and can't be immediately reused."
msgstr ""

#: ../../library/socket.rst:1952
msgid ""
"There is a :mod:`socket` flag to set, in order to prevent this, "
":data:`socket.SO_REUSEADDR`::"
msgstr ""

#: ../../library/socket.rst:1959
msgid ""
"the :data:`SO_REUSEADDR` flag tells the kernel to reuse a local socket in "
"``TIME_WAIT`` state, without waiting for its natural timeout to expire."
msgstr ""

#: ../../library/socket.rst:1965
msgid ""
"For an introduction to socket programming (in C), see the following papers:"
msgstr ""

#: ../../library/socket.rst:1967
msgid ""
"*An Introductory 4.3BSD Interprocess Communication Tutorial*, by Stuart "
"Sechrest"
msgstr ""

#: ../../library/socket.rst:1969
msgid ""
"*An Advanced 4.3BSD Interprocess Communication Tutorial*, by Samuel J.  "
"Leffler et al,"
msgstr ""

#: ../../library/socket.rst:1972
msgid ""
"both in the UNIX Programmer's Manual, Supplementary Documents 1 (sections "
"PS1:7 and PS1:8).  The platform-specific reference material for the various "
"socket-related system calls are also a valuable source of information on the"
" details of socket semantics.  For Unix, refer to the manual pages; for "
"Windows, see the WinSock (or Winsock 2) specification.  For IPv6-ready APIs,"
" readers may want to refer to :rfc:`3493` titled Basic Socket Interface "
"Extensions for IPv6."
msgstr ""
