# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Jerry Chen <jerrychen9657@gmail.com>, 2017
# Fei Yin <icebirds@163.com>, 2018
# ww song <sww4718168@gmail.com>, 2018
# Kade For, 2019
# ppcfish <ppcfish@gmail.com>, 2019
# dogn he <hedogn@163.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-20 11:27+0900\n"
"PO-Revision-Date: 2017-02-16 23:27+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sqlite3.rst:2
msgid ":mod:`sqlite3` --- DB-API 2.0 interface for SQLite databases"
msgstr ":mod:`sqlite3` --- SQLite 数据库 DB-API 2.0 接口模块"

#: ../../library/sqlite3.rst:9
msgid "**Source code:** :source:`Lib/sqlite3/`"
msgstr "**源代码：** :source:`Lib/sqlite3/`"

#: ../../library/sqlite3.rst:13
msgid ""
"SQLite is a C library that provides a lightweight disk-based database that "
"doesn't require a separate server process and allows accessing the database "
"using a nonstandard variant of the SQL query language. Some applications can"
" use SQLite for internal data storage.  It's also possible to prototype an "
"application using SQLite and then port the code to a larger database such as"
" PostgreSQL or Oracle."
msgstr ""
"SQLite 是一个C语言库，它可以提供一种轻量级的基于磁盘的数据库，这种数据库不需要独立的服务器进程，也允许需要使用一种非标准的 SQL "
"查询语言来访问它。一些应用程序可以使用 SQLite 作为内部数据存储。可以用它来创建一个应用程序原型，然后再迁移到更大的数据库，比如 "
"PostgreSQL 或 Oracle。"

#: ../../library/sqlite3.rst:20
msgid ""
"The sqlite3 module was written by Gerhard Häring.  It provides a SQL "
"interface compliant with the DB-API 2.0 specification described by "
":pep:`249`."
msgstr ""
"sqlite3 模块是由  Gerhard Häring 编写。它提供了符合 DB-API 2.0 规范的接口，这个规范是 :pep:`249`。"

#: ../../library/sqlite3.rst:23
msgid ""
"To use the module, you must first create a :class:`Connection` object that "
"represents the database.  Here the data will be stored in the "
":file:`example.db` file::"
msgstr ""
"要使用这个模块，必须先创建一个  :class:`Connection` 对象，它代表数据库。下面例子中，数据将存储在 "
":file:`example.db` 文件中："

#: ../../library/sqlite3.rst:30
msgid ""
"You can also supply the special name ``:memory:`` to create a database in "
"RAM."
msgstr "你也可以使用 ``:memory:`` 来创建一个内存中的数据库"

#: ../../library/sqlite3.rst:32
msgid ""
"Once you have a :class:`Connection`, you can create a :class:`Cursor`  "
"object and call its :meth:`~Cursor.execute` method to perform SQL commands::"
msgstr ""
"当有了 :class:`Connection` 对象后，你可以创建一个 :class:`Cursor` 游标对象，然后调用它的 "
":meth:`~Cursor.execute` 方法来执行 SQL 语句："

#: ../../library/sqlite3.rst:51
msgid ""
"The data you've saved is persistent and is available in subsequent "
"sessions::"
msgstr "这些数据被持久化保存了，而且可以在之后的会话中使用它们："

#: ../../library/sqlite3.rst:57
msgid ""
"Usually your SQL operations will need to use values from Python variables.  "
"You shouldn't assemble your query using Python's string operations because "
"doing so is insecure; it makes your program vulnerable to an SQL injection "
"attack (see https://xkcd.com/327/ for humorous example of what can go "
"wrong)."
msgstr ""
"通常你的 SQL 操作需要使用一些 Python 变量的值。你不应该使用 Python "
"的字符串操作来创建你的查询语句，因为那样做不安全；它会使你的程序容易受到 SQL 注入攻击（在 https://xkcd.com/327/ "
"上有一个搞笑的例子，看看有什么后果）"

#: ../../library/sqlite3.rst:62
msgid ""
"Instead, use the DB-API's parameter substitution.  Put ``?`` as a "
"placeholder wherever you want to use a value, and then provide a tuple of "
"values as the second argument to the cursor's :meth:`~Cursor.execute` "
"method.  (Other database modules may use a different placeholder, such as "
"``%s`` or ``:1``.) For example::"
msgstr ""
"推荐另外一种方法：使用 DB-API 的参数替换。在你的 SQL 语句中，使用 ``?`` 占位符来代替值，然后把对应的值组成的元组做为 "
":meth:`~Cursor.execute` 方法的第二个参数。（其他数据库可能会使用不同的占位符，比如 ``%s`` 或者 ``:1``）例如："

#: ../../library/sqlite3.rst:84
msgid ""
"To retrieve data after executing a SELECT statement, you can either treat "
"the cursor as an :term:`iterator`, call the cursor's "
":meth:`~Cursor.fetchone` method to retrieve a single matching row, or call "
":meth:`~Cursor.fetchall` to get a list of the matching rows."
msgstr ""
"要在执行 SELECT 语句后获取数据，你可以把游标作为 :term:`iterator`，然后调用它的 "
":meth:`~Cursor.fetchone` 方法来获取一条匹配的行，也可以调用 :meth:`~Cursor.fetchall` "
"来得到包含多个匹配行的列表。"

#: ../../library/sqlite3.rst:89
msgid "This example uses the iterator form::"
msgstr "下面是一个使用迭代器形式的例子："

#: ../../library/sqlite3.rst:104
msgid "https://github.com/ghaering/pysqlite"
msgstr "https://github.com/ghaering/pysqlite"

#: ../../library/sqlite3.rst:103
msgid ""
"The pysqlite web page -- sqlite3 is developed externally under the name "
"\"pysqlite\"."
msgstr "pysqlite的主页 -- sqlite3 在外部使用 “pysqlite” 名字进行开发。"

#: ../../library/sqlite3.rst:108
msgid "https://www.sqlite.org"
msgstr "https://www.sqlite.org"

#: ../../library/sqlite3.rst:107
msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr "SQLite的主页；它的文档详细描述了它所支持的 SQL 方言的语法和可用的数据类型。"

#: ../../library/sqlite3.rst:111
msgid "https://www.w3schools.com/sql/"
msgstr "https://www.w3schools.com/sql/"

#: ../../library/sqlite3.rst:111
msgid "Tutorial, reference and examples for learning SQL syntax."
msgstr "学习 SQL 语法的教程、参考和例子。"

#: ../../library/sqlite3.rst:113
msgid ":pep:`249` - Database API Specification 2.0"
msgstr ":pep:`249` - DB-API 2.0 规范"

#: ../../library/sqlite3.rst:114
msgid "PEP written by Marc-André Lemburg."
msgstr "Marc-André Lemburg 写的 PEP。"

#: ../../library/sqlite3.rst:120
msgid "Module functions and constants"
msgstr "模块函数和常量"

#: ../../library/sqlite3.rst:125
msgid ""
"The version number of this module, as a string. This is not the version of "
"the SQLite library."
msgstr "这个模块的版本号，是一个字符串。不是 SQLite 库的版本号。"

#: ../../library/sqlite3.rst:131
msgid ""
"The version number of this module, as a tuple of integers. This is not the "
"version of the SQLite library."
msgstr "这个模块的版本号，是一个由整数组成的元组。不是 SQLite 库的版本号。"

#: ../../library/sqlite3.rst:137
msgid "The version number of the run-time SQLite library, as a string."
msgstr "使用中的 SQLite 库的版本号，是一个字符串。"

#: ../../library/sqlite3.rst:142
msgid ""
"The version number of the run-time SQLite library, as a tuple of integers."
msgstr "使用中的 SQLite 库的版本号，是一个整数组成的元组。"

#: ../../library/sqlite3.rst:147 ../../library/sqlite3.rst:160
msgid ""
"This constant is meant to be used with the *detect_types* parameter of the "
":func:`connect` function."
msgstr "这个常量可以作为 :func:`connect` 函数的 *detect_types* 参数。"

#: ../../library/sqlite3.rst:150
msgid ""
"Setting it makes the :mod:`sqlite3` module parse the declared type for each "
"column it returns.  It will parse out the first word of the declared type, "
"i. e.  for \"integer primary key\", it will parse out \"integer\", or for "
"\"number(10)\" it will parse out \"number\". Then for that column, it will "
"look into the converters dictionary and use the converter function "
"registered for that type there."
msgstr ""
"设置这个参数后，:mod:`sqlite3` 模块将解析它返回的每一列申明的类型。它会申明的类型的第一个单词，比如“integer primary "
"key”，它会解析出“integer”，再比如“number(10)”，它会解析出“number”。然后，它会在转换器字典里查找那个类型注册的转换器函数，并调用它。"

#: ../../library/sqlite3.rst:163
msgid ""
"Setting this makes the SQLite interface parse the column name for each "
"column it returns.  It will look for a string formed [mytype] in there, and "
"then decide that 'mytype' is the type of the column. It will try to find an "
"entry of 'mytype' in the converters dictionary and then use the converter "
"function found there to return the value. The column name found in "
":attr:`Cursor.description` is only the first word of the column name, i.  e."
" if you use something like ``'as \"x [datetime]\"'`` in your SQL, then we "
"will parse out everything until the first blank for the column name: the "
"column name would simply be \"x\"."
msgstr ""
"设置这个参数后，SQLite 接口将解析它返回的每一列的列名。它会在其中查找 [mytype] "
"这个形式的字符串，然后用‘mytype’来决定那个列的类型。它会尝试在转换器字典中查找‘mytype’键对应的转换器函数，然后用这个转换器函数返回的值来做为列的类型。在"
" :attr:`Cursor.description` 中找到的列名仅仅是列名的第一个单词，比如你在 SQL 中使用 ``'as \"x "
"[datetime]\"'``，然后它会解析出第一个空白字符前的所有字符来作为列名：列名就是“x”。"

#: ../../library/sqlite3.rst:175
msgid ""
"Opens a connection to the SQLite database file *database*. By default "
"returns a :class:`Connection` object, unless a custom *factory* is given."
msgstr ""
"连接 SQLite 数据库 *database*。默认返回 :class:`Connection` 对象，除非使用了自定义的 *factory* 参数。"

#: ../../library/sqlite3.rst:178
msgid ""
"*database* is a :term:`path-like object` giving the pathname (absolute or "
"relative to the current  working directory) of the database file to be "
"opened. You can use ``\":memory:\"`` to open a database connection to a "
"database that resides in RAM instead of on disk."
msgstr ""
"*database* 是准备打开的数据库文件的路径（绝对路径或相对于当前目录的相对路径），它是 :term:`path-like "
"object`。你也可以用 ``\":memory:\"`` 在内存中打开一个数据库。"

#: ../../library/sqlite3.rst:183
msgid ""
"When a database is accessed by multiple connections, and one of the "
"processes modifies the database, the SQLite database is locked until that "
"transaction is committed. The *timeout* parameter specifies how long the "
"connection should wait for the lock to go away until raising an exception. "
"The default for the timeout parameter is 5.0 (five seconds)."
msgstr ""
"当一个数据库被多个连接访问的时候，如果其中一个进程修改这个数据库，在这个事务提交之前，这个 SQLite 数据库将会被一直锁定。*timeout* "
"参数指定了这个连接等待锁释放的超时时间，超时之后会引发一个异常。这个超时时间默认是 5.0（5秒）。"

#: ../../library/sqlite3.rst:189
msgid ""
"For the *isolation_level* parameter, please see the "
":attr:`~Connection.isolation_level` property of :class:`Connection` objects."
msgstr ""
"*isolation_level* 参数，请查看 :class:`Connection` 对象的 "
":attr:`~Connection.isolation_level` 属性。"

#: ../../library/sqlite3.rst:192
msgid ""
"SQLite natively supports only the types TEXT, INTEGER, REAL, BLOB and NULL. "
"If you want to use other types you must add support for them yourself. The "
"*detect_types* parameter and the using custom **converters** registered with"
" the module-level :func:`register_converter` function allow you to easily do"
" that."
msgstr ""
"SQLite 原生只支持5种类型：TEXT，INTEGER，REAL，BLOB 和 NULL。如果你想用其它类型，你必须自己添加相应的支持。使用 "
"*detect_types* 参数和模块级别的 :func:`register_converter` 函数注册**转换器** 可以简单的实现。"

#: ../../library/sqlite3.rst:197
msgid ""
"*detect_types* defaults to 0 (i. e. off, no type detection), you can set it "
"to any combination of :const:`PARSE_DECLTYPES` and :const:`PARSE_COLNAMES` "
"to turn type detection on."
msgstr ""
"*detect_types* 默认为0（即关闭，没有类型检测）。你也可以组合 :const:`PARSE_DECLTYPES` 和 "
":const:`PARSE_COLNAMES` 来开启类型检测。"

#: ../../library/sqlite3.rst:201
msgid ""
"By default, *check_same_thread* is :const:`True` and only the creating "
"thread may use the connection. If set :const:`False`, the returned "
"connection may be shared across multiple threads. When using multiple "
"threads with the same connection writing operations should be serialized by "
"the user to avoid data corruption."
msgstr ""
"默认情况下，*check_same_thread* 为 :const:`True`，只有当前的线程可以使用该连接。 如果设置为 "
":const:`False`，则多个线程可以共享返回的连接。 当多个线程使用同一个连接的时候，用户应该把写操作进行序列化，以避免数据损坏。"

#: ../../library/sqlite3.rst:206
msgid ""
"By default, the :mod:`sqlite3` module uses its :class:`Connection` class for"
" the connect call.  You can, however, subclass the :class:`Connection` class"
" and make :func:`connect` use your class instead by providing your class for"
" the *factory* parameter."
msgstr ""
"默认情况下，当调用 connect 方法的时候，:mod:`sqlite3` 模块使用了它的 :class:`Connection` "
"类。当然，你也可以创建 :class:`Connection` 类的子类，然后创建提供了 *factory* 参数的 :func:`connect` "
"方法。"

#: ../../library/sqlite3.rst:211
msgid "Consult the section :ref:`sqlite3-types` of this manual for details."
msgstr "详情请查阅当前手册的 :ref:`sqlite3-types` 部分。"

#: ../../library/sqlite3.rst:213
msgid ""
"The :mod:`sqlite3` module internally uses a statement cache to avoid SQL "
"parsing overhead. If you want to explicitly set the number of statements "
"that are cached for the connection, you can set the *cached_statements* "
"parameter. The currently implemented default is to cache 100 statements."
msgstr ""
":mod:`sqlite3` 模块在内部使用语句缓存来避免 SQL 解析开销。 如果要显式设置当前连接可以缓存的语句数，可以设置 "
"*cached_statements* 参数。 当前实现的默认值是缓存100条语句。"

#: ../../library/sqlite3.rst:218
msgid ""
"If *uri* is true, *database* is interpreted as a URI. This allows you to "
"specify options. For example, to open a database in read-only mode you can "
"use::"
msgstr "如果 *uri* 为真，则 *database* 被解释为 URI。 它允许您指定选项。 例如，以只读模式打开数据库："

#: ../../library/sqlite3.rst:224
msgid ""
"More information about this feature, including a list of recognized options,"
" can be found in the `SQLite URI documentation "
"<https://www.sqlite.org/uri.html>`_."
msgstr ""
"有关此功能的更多信息，包括已知选项的列表，可以在 ` SQLite URI 文档 <https://www.sqlite.org/uri.html>`_"
" 中找到。"

#: ../../library/sqlite3.rst:227
msgid "Added the *uri* parameter."
msgstr "增加了 *uri* 参数。"

#: ../../library/sqlite3.rst:230
msgid ""
"*database* can now also be a :term:`path-like object`, not only a string."
msgstr "*database* 现在可以是一个 :term:`path-like object` 对象了，不仅仅是字符串。"

#: ../../library/sqlite3.rst:236
msgid ""
"Registers a callable to convert a bytestring from the database into a custom"
" Python type. The callable will be invoked for all database values that are "
"of the type *typename*. Confer the parameter *detect_types* of the "
":func:`connect` function for how the type detection works. Note that "
"*typename* and the name of the type in your query are matched in case-"
"insensitive manner."
msgstr ""
"注册一个回调对象 *callable*, 用来转换数据库中的字节串为自定的 Python 类型。所有类型为 *typename* "
"的数据库的值在转换时，都会调用这个回调对象。通过指定 :func:`connect` 函数的 *detect-types* "
"参数来设置类型检测的方式。注意，*typename* 与查询语句中的类型名进行匹配时不区分大小写。"

#: ../../library/sqlite3.rst:245
msgid ""
"Registers a callable to convert the custom Python type *type* into one of "
"SQLite's supported types. The callable *callable* accepts as single "
"parameter the Python value, and must return a value of the following types: "
"int, float, str or bytes."
msgstr ""
"注册一个回调对象 *callable*，用来转换自定义Python类型为一个 SQLite 支持的类型。 这个回调对象 *callable* 仅接受一个"
" Python 值作为参数，而且必须返回以下某个类型的值：int，float，str 或 bytes。"

#: ../../library/sqlite3.rst:253
msgid ""
"Returns :const:`True` if the string *sql* contains one or more complete SQL "
"statements terminated by semicolons. It does not verify that the SQL is "
"syntactically correct, only that there are no unclosed string literals and "
"the statement is terminated by a semicolon."
msgstr ""
"如果字符串 *sql* 包含一个或多个完整的 SQL 语句（以分号结束）则返回 :const:`True`。它不会验证 SQL "
"语法是否正确，仅会验证字符串字面上是否完整，以及是否以分号结束。"

#: ../../library/sqlite3.rst:258
msgid ""
"This can be used to build a shell for SQLite, as in the following example:"
msgstr "它可以用来构建一个 SQLite shell，下面是一个例子："

#: ../../library/sqlite3.rst:266
msgid ""
"By default you will not get any tracebacks in user-defined functions, "
"aggregates, converters, authorizer callbacks etc. If you want to debug them,"
" you can call this function with *flag* set to ``True``. Afterwards, you "
"will get tracebacks from callbacks on ``sys.stderr``. Use :const:`False` to "
"disable the feature again."
msgstr ""
"默认情况下，您不会获得任何用户定义函数中的回溯消息，比如聚合，转换器，授权器回调等。如果要调试它们，可以设置 *flag* 参数为 ``True`` "
"并调用此函数。 之后，回调中的回溯信息将会输出到 ``sys.stderr``。 再次使用 :const:`False` 来禁用该功能。"

#: ../../library/sqlite3.rst:276
msgid "Connection Objects"
msgstr "连接对象（Connection）"

#: ../../library/sqlite3.rst:280
msgid "A SQLite database connection has the following attributes and methods:"
msgstr "SQLite 数据库连接对象有如下的属性和方法："

#: ../../library/sqlite3.rst:284
msgid ""
"Get or set the current default isolation level. :const:`None` for autocommit"
" mode or one of \"DEFERRED\", \"IMMEDIATE\" or \"EXCLUSIVE\". See section "
":ref:`sqlite3-controlling-transactions` for a more detailed explanation."
msgstr ""
"获取或设置当前默认的隔离级别。 表示自动提交模式的 :const:`None` 以及 \"DEFERRED\", \"IMMEDIATE\" 或 "
"\"EXCLUSIVE\" 其中之一。 详细描述请参阅 :ref:`sqlite3-controlling-transactions`。"

#: ../../library/sqlite3.rst:290
msgid ""
":const:`True` if a transaction is active (there are uncommitted changes), "
":const:`False` otherwise.  Read-only attribute."
msgstr "如果是在活动事务中（还没有提交改变），返回 :const:`True`，否则，返回 :const:`False`。它是一个只读属性。"

#: ../../library/sqlite3.rst:297
msgid ""
"The cursor method accepts a single optional parameter *factory*. If "
"supplied, this must be a callable returning an instance of :class:`Cursor` "
"or its subclasses."
msgstr ""
"这个方法接受一个可选参数 *factory*，如果要指定这个参数，它必须是一个可调用对象，而且必须返回 :class:`Cursor` "
"类的一个实例或者子类。"

#: ../../library/sqlite3.rst:303
msgid ""
"This method commits the current transaction. If you don't call this method, "
"anything you did since the last call to ``commit()`` is not visible from "
"other database connections. If you wonder why you don't see the data you've "
"written to the database, please check you didn't forget to call this method."
msgstr ""
"这个方法提交当前事务。如果没有调用这个方法，那么从上一次提交 ``commit()`` "
"以来所有的变化在其他数据库连接上都是不可见的。如果你往数据库里写了数据，但是又查询不到，请检查是否忘记了调用这个方法。"

#: ../../library/sqlite3.rst:310
msgid ""
"This method rolls back any changes to the database since the last call to "
":meth:`commit`."
msgstr "这个方法回滚从上一次调用 :meth:`commit` 以来所有数据库的改变。"

#: ../../library/sqlite3.rst:315
msgid ""
"This closes the database connection. Note that this does not automatically "
"call :meth:`commit`. If you just close your database connection without "
"calling :meth:`commit` first, your changes will be lost!"
msgstr ""
"关闭数据库连接。注意，它不会自动调用 :meth:`commit` 方法。如果在关闭数据库连接之前没有调用 "
":meth:`commit`，那么你的修改将会丢失！"

#: ../../library/sqlite3.rst:321
msgid ""
"This is a nonstandard shortcut that creates a cursor object by calling the "
":meth:`~Connection.cursor` method, calls the cursor's "
":meth:`~Cursor.execute` method with the *parameters* given, and returns the "
"cursor."
msgstr ""
"这是一个非标准的快捷方法，它会调用 :meth:`~Connection.cursor` 方法来创建一个游标对象，并使用给定的 *parameters*"
" 参数来调用游标对象的 :meth:`~Cursor.execute` 方法，最后返回这个游标对象。"

#: ../../library/sqlite3.rst:328
msgid ""
"This is a nonstandard shortcut that creates a cursor object by calling the "
":meth:`~Connection.cursor` method, calls the cursor's "
":meth:`~Cursor.executemany` method with the *parameters* given, and returns "
"the cursor."
msgstr ""
"这是一个非标准的快捷方法，它会调用 :meth:`~Connection.cursor` 方法来创建一个游标对象，并使用给定的 *parameters*"
" 参数来调用游标对象的 :meth:`~Cursor.executemany` 方法，最后返回这个游标对象。"

#: ../../library/sqlite3.rst:335
msgid ""
"This is a nonstandard shortcut that creates a cursor object by calling the "
":meth:`~Connection.cursor` method, calls the cursor's "
":meth:`~Cursor.executescript` method with the given *sql_script*, and "
"returns the cursor."
msgstr ""
"这是一个非标准的快捷方法，它会调用 :meth:`~Connection.cursor` 方法来创建一个游标对象，并使用给定的 *sql_script*"
" 参数来调用游标对象的 :meth:`~Cursor.executescript` 方法，最后返回这个游标对象。"

#: ../../library/sqlite3.rst:342
msgid ""
"Creates a user-defined function that you can later use from within SQL "
"statements under the function name *name*. *num_params* is the number of "
"parameters the function accepts (if *num_params* is -1, the function may "
"take any number of arguments), and *func* is a Python callable that is "
"called as the SQL function."
msgstr ""
"创建一个可以在 SQL 语句中使用的自定义函数，其中参数 *name* 为 SQL 语句中使用的函数名，*num_params* "
"是这个函数接受的参数个数（如果 *num_params* 为 -1，那这个函数可以接受任意数量的参数），最后一个参数 *func* 是作为 SQL "
"函数调用的一个 Python 可调用对象。"

#: ../../library/sqlite3.rst:348
msgid ""
"The function can return any of the types supported by SQLite: bytes, str, "
"int, float and ``None``."
msgstr "此函数可返回任何 SQLite 所支持的类型: bytes, str, int, float 和 ``None``。"

#: ../../library/sqlite3.rst:351 ../../library/sqlite3.rst:368
#: ../../library/sqlite3.rst:482 ../../library/sqlite3.rst:639
msgid "Example:"
msgstr "示例:"

#: ../../library/sqlite3.rst:358
msgid "Creates a user-defined aggregate function."
msgstr "创建一个自定义的聚合函数。"

#: ../../library/sqlite3.rst:360
msgid ""
"The aggregate class must implement a ``step`` method, which accepts the "
"number of parameters *num_params* (if *num_params* is -1, the function may "
"take any number of arguments), and a ``finalize`` method which will return "
"the final result of the aggregate."
msgstr ""
"参数中 *aggregate_class* 类必须实现两个方法：``step`` 和 ``finalize``。``step`` 方法接受 "
"*num_params* 个参数（如果 *num_params* 为 -1，那么这个函数可以接受任意数量的参数）；``finalize`` "
"方法返回最终的聚合结果。"

#: ../../library/sqlite3.rst:365
msgid ""
"The ``finalize`` method can return any of the types supported by SQLite: "
"bytes, str, int, float and ``None``."
msgstr "``finalize`` 方法可以返回任何 SQLite 支持的类型：bytes，str，int，float 和 ``None``。"

#: ../../library/sqlite3.rst:375
msgid ""
"Creates a collation with the specified *name* and *callable*. The callable "
"will be passed two string arguments. It should return -1 if the first is "
"ordered lower than the second, 0 if they are ordered equal and 1 if the "
"first is ordered higher than the second.  Note that this controls sorting "
"(ORDER BY in SQL) so your comparisons don't affect other SQL operations."
msgstr ""
"使用 *name* 和 *callable* 创建排序规则。这个 *callable* 接受两个字符串对象，如果第一个小于第二个则返回 -1， "
"如果两个相等则返回 0，如果第一个大于第二个则返回 1。注意，这是用来控制排序的（SQL 中的 ORDER BY），所以它不会影响其它的 SQL 操作。"

#: ../../library/sqlite3.rst:381
msgid ""
"Note that the callable will get its parameters as Python bytestrings, which "
"will normally be encoded in UTF-8."
msgstr "注意，这个 *callable* 可调用对象会把它的参数作为 Python 字节串，通常会以 UTF-8 编码格式对它进行编码。"

#: ../../library/sqlite3.rst:384
msgid ""
"The following example shows a custom collation that sorts \"the wrong way\":"
msgstr "以下示例显示了使用“错误方式”进行排序的自定义排序规则："

#: ../../library/sqlite3.rst:388
msgid ""
"To remove a collation, call ``create_collation`` with ``None`` as callable::"
msgstr "要移除一个排序规则，需要调用 ``create_collation`` 并设置 callable 参数为 ``None``。"

#: ../../library/sqlite3.rst:395
msgid ""
"You can call this method from a different thread to abort any queries that "
"might be executing on the connection. The query will then abort and the "
"caller will get an exception."
msgstr ""
"可以从不同的线程调用这个方法来终止所有查询操作，这些查询操作可能正在连接上执行。此方法调用之后， 查询将会终止，而且查询的调用者会获得一个异常。"

#: ../../library/sqlite3.rst:402
msgid ""
"This routine registers a callback. The callback is invoked for each attempt "
"to access a column of a table in the database. The callback should return "
":const:`SQLITE_OK` if access is allowed, :const:`SQLITE_DENY` if the entire "
"SQL statement should be aborted with an error and :const:`SQLITE_IGNORE` if "
"the column should be treated as a NULL value. These constants are available "
"in the :mod:`sqlite3` module."
msgstr ""
"此方法注册一个授权回调对象。每次在访问数据库中某个表的某一列的时候，这个回调对象将会被调用。如果要允许访问，则返回 "
":const:`SQLITE_OK`，如果要终止整个 SQL 语句，则返回 :const:`SQLITE_DENY`，如果这一列需要当做 NULL "
"值处理，则返回 :const:`SQLITE_IGNORE`。这些常量可以在  :mod:`sqlite3` 模块中找到。"

#: ../../library/sqlite3.rst:409
msgid ""
"The first argument to the callback signifies what kind of operation is to be"
" authorized. The second and third argument will be arguments or "
":const:`None` depending on the first argument. The 4th argument is the name "
"of the database (\"main\", \"temp\", etc.) if applicable. The 5th argument "
"is the name of the inner-most trigger or view that is responsible for the "
"access attempt or :const:`None` if this access attempt is directly from "
"input SQL code."
msgstr ""
"回调的第一个参数表示要授权的操作类型。 第二个和第三个参数将是参数或 :const:`None`，具体取决于第一个参数的值。 第 4 "
"个参数是数据库的名称（“main”，“temp”等），如果需要的话。 第 5 "
"个参数是负责访问尝试的最内层触发器或视图的名称，或者如果此访问尝试直接来自输入 SQL 代码，则为 :const:`None`。"

#: ../../library/sqlite3.rst:416
msgid ""
"Please consult the SQLite documentation about the possible values for the "
"first argument and the meaning of the second and third argument depending on"
" the first one. All necessary constants are available in the :mod:`sqlite3` "
"module."
msgstr ""
"请参阅 SQLite 文档，了解第一个参数的可能值以及第二个和第三个参数的含义，具体取决于第一个参数。 所有必需的常量都可以在 "
":mod:`sqlite3` 模块中找到。"

#: ../../library/sqlite3.rst:423
msgid ""
"This routine registers a callback. The callback is invoked for every *n* "
"instructions of the SQLite virtual machine. This is useful if you want to "
"get called from SQLite during long-running operations, for example to update"
" a GUI."
msgstr ""
"此例程注册回调。 对SQLite虚拟机的每个多指令调用回调。 如果要在长时间运行的操作期间从SQLite调用（例如更新用户界面），这非常有用。"

#: ../../library/sqlite3.rst:428
msgid ""
"If you want to clear any previously installed progress handler, call the "
"method with :const:`None` for *handler*."
msgstr "如果要清除以前安装的任何进度处理程序，调用该方法时请将 *handler* 参数设置为 :const:`None`。"

#: ../../library/sqlite3.rst:431
msgid ""
"Returning a non-zero value from the handler function will terminate the "
"currently executing query and cause it to raise an :exc:`OperationalError` "
"exception."
msgstr "从处理函数返回非零值将终止当前正在执行的查询并导致它引发 :exc:`OperationalError` 异常。"

#: ../../library/sqlite3.rst:438
msgid ""
"Registers *trace_callback* to be called for each SQL statement that is "
"actually executed by the SQLite backend."
msgstr "为每个 SQLite 后端实际执行的 SQL 语句注册要调用的 *trace_callback*。"

#: ../../library/sqlite3.rst:441
msgid ""
"The only argument passed to the callback is the statement (as string) that "
"is being executed. The return value of the callback is ignored. Note that "
"the backend does not only run statements passed to the "
":meth:`Cursor.execute` methods.  Other sources include the transaction "
"management of the Python module and the execution of triggers defined in the"
" current database."
msgstr ""
"传递给回调的唯一参数是正在执行的语句（作为字符串）。 回调的返回值将被忽略。 请注意，后端不仅运行传递给 :meth:`Cursor.execute` "
"方法的语句。 其他来源包括 Python 模块的事务管理和当前数据库中定义的触发器的执行。"

#: ../../library/sqlite3.rst:447
msgid ""
"Passing :const:`None` as *trace_callback* will disable the trace callback."
msgstr "将传入的 *trace_callback* 设为 :const:`None` 将禁用跟踪回调。"

#: ../../library/sqlite3.rst:454
msgid ""
"This routine allows/disallows the SQLite engine to load SQLite extensions "
"from shared libraries.  SQLite extensions can define new functions, "
"aggregates or whole new virtual table implementations.  One well-known "
"extension is the fulltext-search extension distributed with SQLite."
msgstr ""
"此例程允许/禁止SQLite引擎从共享库加载SQLite扩展。 SQLite扩展可以定义新功能，聚合或全新的虚拟表实现。 "
"一个众所周知的扩展是与SQLite一起分发的全文搜索扩展。"

#: ../../library/sqlite3.rst:459 ../../library/sqlite3.rst:471
msgid "Loadable extensions are disabled by default. See [#f1]_."
msgstr "默认情况下禁用可加载扩展。 见 [#f1]_."

#: ../../library/sqlite3.rst:467
msgid ""
"This routine loads a SQLite extension from a shared library.  You have to "
"enable extension loading with :meth:`enable_load_extension` before you can "
"use this routine."
msgstr ""
"此例程从共享库加载SQLite扩展。 在使用此例程之前，必须使用 :meth:`enable_load_extension` 启用扩展加载。"

#: ../../library/sqlite3.rst:477
msgid ""
"You can change this attribute to a callable that accepts the cursor and the "
"original row as a tuple and will return the real result row.  This way, you "
"can implement more advanced ways of returning results, such  as returning an"
" object that can also access columns by name."
msgstr ""
"您可以将此属性更改为可接受游标和原始行作为元组的可调用对象，并将返回实际结果行。 "
"这样，您可以实现更高级的返回结果的方法，例如返回一个可以按名称访问列的对象。"

#: ../../library/sqlite3.rst:486
msgid ""
"If returning a tuple doesn't suffice and you want name-based access to "
"columns, you should consider setting :attr:`row_factory` to the highly-"
"optimized :class:`sqlite3.Row` type. :class:`Row` provides both index-based "
"and case-insensitive name-based access to columns with almost no memory "
"overhead. It will probably be better than your own custom dictionary-based "
"approach or even a db_row based solution."
msgstr ""
"如果返回一个元组是不够的，并且你想要对列进行基于名称的访问，你应该考虑将 :attr:`row_factory` 设置为高度优化的 "
":class:`sqlite3.Row` 类型。 :class:`Row` 提供基于索引和不区分大小写的基于名称的访问，几乎没有内存开销。 "
"它可能比您自己的基于字典的自定义方法甚至基于 db_row 的解决方案更好。"

#: ../../library/sqlite3.rst:498
msgid ""
"Using this attribute you can control what objects are returned for the "
"``TEXT`` data type. By default, this attribute is set to :class:`str` and "
"the :mod:`sqlite3` module will return Unicode objects for ``TEXT``. If you "
"want to return bytestrings instead, you can set it to :class:`bytes`."
msgstr ""
"使用此属性可以控制为 ``TEXT`` 数据类型返回的对象。 默认情况下，此属性设置为 :class:`str` 和 :mod:`sqlite3` "
"模块将返回 ``TEXT`` 的 Unicode 对象。 如果要返回字节串，可以将其设置为 :class:`bytes`。"

#: ../../library/sqlite3.rst:503
msgid ""
"You can also set it to any other callable that accepts a single bytestring "
"parameter and returns the resulting object."
msgstr "您还可以将其设置为接受单个 bytestring 参数的任何其他可调用对象，并返回结果对象。"

#: ../../library/sqlite3.rst:506
msgid "See the following example code for illustration:"
msgstr "请参阅以下示例代码以进行说明："

#: ../../library/sqlite3.rst:513
msgid ""
"Returns the total number of database rows that have been modified, inserted,"
" or deleted since the database connection was opened."
msgstr "返回自打开数据库连接以来已修改，插入或删除的数据库行的总数。"

#: ../../library/sqlite3.rst:519
msgid ""
"Returns an iterator to dump the database in an SQL text format.  Useful when"
" saving an in-memory database for later restoration.  This function provides"
" the same capabilities as the :kbd:`.dump` command in the :program:`sqlite3`"
" shell."
msgstr ""
"返回以SQL文本格式转储数据库的迭代器。 保存内存数据库以便以后恢复时很有用。 此函数提供与 :program:``sqlite3` shell 中的 "
":kbd:`.dump` 命令相同的功能。"

#: ../../library/sqlite3.rst:524
msgid "Example::"
msgstr "示例::"

#: ../../library/sqlite3.rst:538
msgid ""
"This method makes a backup of a SQLite database even while it's being "
"accessed by other clients, or concurrently by the same connection.  The copy"
" will be written into the mandatory argument *target*, that must be another "
":class:`Connection` instance."
msgstr ""
"即使在 SQLite 数据库被其他客户端访问时，或者同时由同一连接访问，该方法也会对其进行备份。 该副本将写入强制参数 "
"*target*，该参数必须是另一个 :class:`Connection` 实例。"

#: ../../library/sqlite3.rst:543
msgid ""
"By default, or when *pages* is either ``0`` or a negative integer, the "
"entire database is copied in a single step; otherwise the method performs a "
"loop copying up to *pages* pages at a time."
msgstr ""
"默认情况下，或者当 *pages* 为 ``0`` 或负整数时，整个数据库将在一个步骤中复制；否则该方法一次循环复制 *pages* 规定数量的页面。"

#: ../../library/sqlite3.rst:547
msgid ""
"If *progress* is specified, it must either be ``None`` or a callable object "
"that will be executed at each iteration with three integer arguments, "
"respectively the *status* of the last iteration, the *remaining* number of "
"pages still to be copied and the *total* number of pages."
msgstr ""

#: ../../library/sqlite3.rst:552
msgid ""
"The *name* argument specifies the database name that will be copied: it must"
" be a string containing either ``\"main\"``, the default, to indicate the "
"main database, ``\"temp\"`` to indicate the temporary database or the name "
"specified after the ``AS`` keyword in an ``ATTACH DATABASE`` statement for "
"an attached database."
msgstr ""

#: ../../library/sqlite3.rst:558
msgid ""
"The *sleep* argument specifies the number of seconds to sleep by between "
"successive attempts to backup remaining pages, can be specified either as an"
" integer or a floating point value."
msgstr ""

#: ../../library/sqlite3.rst:562
msgid "Example 1, copy an existing database into another::"
msgstr "示例一，将现有数据库复制到另一个数据库中："

#: ../../library/sqlite3.rst:576
msgid "Example 2, copy an existing database into a transient copy::"
msgstr "示例二，将现有数据库复制到临时副本中："

#: ../../library/sqlite3.rst:584
msgid "Availability: SQLite 3.6.11 or higher"
msgstr "可用性：SQLite 3.6.11 或以上版本"

#: ../../library/sqlite3.rst:592
msgid "Cursor Objects"
msgstr "Cursor 对象"

#: ../../library/sqlite3.rst:596
msgid "A :class:`Cursor` instance has the following attributes and methods."
msgstr ":class:`Cursor` 游标实例具有以下属性和方法。"

#: ../../library/sqlite3.rst:603
msgid ""
"Executes an SQL statement. The SQL statement may be parameterized (i. e. "
"placeholders instead of SQL literals). The :mod:`sqlite3` module supports "
"two kinds of placeholders: question marks (qmark style) and named "
"placeholders (named style)."
msgstr ""
"执行SQL语句。 可以是参数化 SQL 语句（即，在 SQL 语句中使用占位符）。:mod:`sqlite3` "
"模块支持两种占位符：问号（qmark风格）和命名占位符（命名风格）。"

#: ../../library/sqlite3.rst:608
msgid "Here's an example of both styles:"
msgstr "以下是两种风格的示例："

#: ../../library/sqlite3.rst:612
msgid ""
":meth:`execute` will only execute a single SQL statement. If you try to "
"execute more than one statement with it, it will raise a :exc:`.Warning`. "
"Use :meth:`executescript` if you want to execute multiple SQL statements "
"with one call."
msgstr ""

#: ../../library/sqlite3.rst:620
msgid ""
"Executes an SQL command against all parameter sequences or mappings found in"
" the sequence *seq_of_parameters*.  The :mod:`sqlite3` module also allows "
"using an :term:`iterator` yielding parameters instead of a sequence."
msgstr ""

#: ../../library/sqlite3.rst:626
msgid "Here's a shorter example using a :term:`generator`:"
msgstr "这是一个使用生成器 :term:`generator` 的简短示例："

#: ../../library/sqlite3.rst:633
msgid ""
"This is a nonstandard convenience method for executing multiple SQL "
"statements at once. It issues a ``COMMIT`` statement first, then executes "
"the SQL script it gets as a parameter."
msgstr ""

#: ../../library/sqlite3.rst:637
msgid "*sql_script* can be an instance of :class:`str`."
msgstr ""

#: ../../library/sqlite3.rst:646
msgid ""
"Fetches the next row of a query result set, returning a single sequence, or "
":const:`None` when no more data is available."
msgstr ""

#: ../../library/sqlite3.rst:652
msgid ""
"Fetches the next set of rows of a query result, returning a list.  An empty "
"list is returned when no more rows are available."
msgstr ""

#: ../../library/sqlite3.rst:655
msgid ""
"The number of rows to fetch per call is specified by the *size* parameter. "
"If it is not given, the cursor's arraysize determines the number of rows to "
"be fetched. The method should try to fetch as many rows as indicated by the "
"size parameter. If this is not possible due to the specified number of rows "
"not being available, fewer rows may be returned."
msgstr ""

#: ../../library/sqlite3.rst:661
msgid ""
"Note there are performance considerations involved with the *size* "
"parameter. For optimal performance, it is usually best to use the arraysize "
"attribute. If the *size* parameter is used, then it is best for it to retain"
" the same value from one :meth:`fetchmany` call to the next."
msgstr ""

#: ../../library/sqlite3.rst:668
msgid ""
"Fetches all (remaining) rows of a query result, returning a list.  Note that"
" the cursor's arraysize attribute can affect the performance of this "
"operation. An empty list is returned when no rows are available."
msgstr ""

#: ../../library/sqlite3.rst:674
msgid "Close the cursor now (rather than whenever ``__del__`` is called)."
msgstr ""

#: ../../library/sqlite3.rst:676
msgid ""
"The cursor will be unusable from this point forward; a "
":exc:`ProgrammingError` exception will be raised if any operation is "
"attempted with the cursor."
msgstr ""

#: ../../library/sqlite3.rst:681
msgid ""
"Although the :class:`Cursor` class of the :mod:`sqlite3` module implements "
"this attribute, the database engine's own support for the determination of "
"\"rows affected\"/\"rows selected\" is quirky."
msgstr ""

#: ../../library/sqlite3.rst:685
msgid ""
"For :meth:`executemany` statements, the number of modifications are summed "
"up into :attr:`rowcount`."
msgstr ""

#: ../../library/sqlite3.rst:688
msgid ""
"As required by the Python DB API Spec, the :attr:`rowcount` attribute \"is "
"-1 in case no ``executeXX()`` has been performed on the cursor or the "
"rowcount of the last operation is not determinable by the interface\". This "
"includes ``SELECT`` statements because we cannot determine the number of "
"rows a query produced until all rows were fetched."
msgstr ""

#: ../../library/sqlite3.rst:694
msgid ""
"With SQLite versions before 3.6.5, :attr:`rowcount` is set to 0 if you make "
"a ``DELETE FROM table`` without any condition."
msgstr ""

#: ../../library/sqlite3.rst:699
msgid ""
"This read-only attribute provides the rowid of the last modified row. It is "
"only set if you issued an ``INSERT`` or a ``REPLACE`` statement using the "
":meth:`execute` method.  For operations other than ``INSERT`` or ``REPLACE``"
" or when :meth:`executemany` is called, :attr:`lastrowid` is set to "
":const:`None`."
msgstr ""

#: ../../library/sqlite3.rst:705
msgid ""
"If the ``INSERT`` or ``REPLACE`` statement failed to insert the previous "
"successful rowid is returned."
msgstr ""

#: ../../library/sqlite3.rst:708
msgid "Added support for the ``REPLACE`` statement."
msgstr "增加了 ``REPLACE`` 语句的支持。"

#: ../../library/sqlite3.rst:713
msgid ""
"Read/write attribute that controls the number of rows returned by "
":meth:`fetchmany`. The default value is 1 which means a single row would be "
"fetched per call."
msgstr ""

#: ../../library/sqlite3.rst:718
msgid ""
"This read-only attribute provides the column names of the last query. To "
"remain compatible with the Python DB API, it returns a 7-tuple for each "
"column where the last six items of each tuple are :const:`None`."
msgstr ""

#: ../../library/sqlite3.rst:722
msgid "It is set for ``SELECT`` statements without any matching rows as well."
msgstr ""

#: ../../library/sqlite3.rst:726
msgid ""
"This read-only attribute provides the SQLite database :class:`Connection` "
"used by the :class:`Cursor` object.  A :class:`Cursor` object created by "
"calling :meth:`con.cursor() <Connection.cursor>` will have a "
":attr:`connection` attribute that refers to *con*::"
msgstr ""

#: ../../library/sqlite3.rst:739
msgid "Row Objects"
msgstr "行对象*Row*"

#: ../../library/sqlite3.rst:743
msgid ""
"A :class:`Row` instance serves as a highly optimized "
":attr:`~Connection.row_factory` for :class:`Connection` objects. It tries to"
" mimic a tuple in most of its features."
msgstr ""

#: ../../library/sqlite3.rst:747
msgid ""
"It supports mapping access by column name and index, iteration, "
"representation, equality testing and :func:`len`."
msgstr ""

#: ../../library/sqlite3.rst:750
msgid ""
"If two :class:`Row` objects have exactly the same columns and their members "
"are equal, they compare equal."
msgstr ""

#: ../../library/sqlite3.rst:755
msgid ""
"This method returns a list of column names. Immediately after a query, it is"
" the first member of each tuple in :attr:`Cursor.description`."
msgstr ""

#: ../../library/sqlite3.rst:758
msgid "Added support of slicing."
msgstr ""

#: ../../library/sqlite3.rst:761
msgid "Let's assume we initialize a table as in the example given above::"
msgstr ""

#: ../../library/sqlite3.rst:773
msgid "Now we plug :class:`Row` in::"
msgstr ""

#: ../../library/sqlite3.rst:805
msgid "Exceptions"
msgstr "异常"

#: ../../library/sqlite3.rst:809
msgid "A subclass of :exc:`Exception`."
msgstr ":exc:`Exception` 的一个子类。"

#: ../../library/sqlite3.rst:813
msgid ""
"The base class of the other exceptions in this module.  It is a subclass of "
":exc:`Exception`."
msgstr "此模块中其他异常的基类。 它是 :exc:`Exception` 的一个子类。"

#: ../../library/sqlite3.rst:818
msgid "Exception raised for errors that are related to the database."
msgstr ""

#: ../../library/sqlite3.rst:822
msgid ""
"Exception raised when the relational integrity of the database is affected, "
"e.g. a foreign key check fails.  It is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:827
msgid ""
"Exception raised for programming errors, e.g. table not found or already "
"exists, syntax error in the SQL statement, wrong number of parameters "
"specified, etc.  It is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:833
msgid ""
"Exception raised for errors that are related to the database's operation and"
" not necessarily under the control of the programmer, e.g. an unexpected "
"disconnect occurs, the data source name is not found, a transaction could "
"not be processed, etc.  It is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:840
msgid ""
"Exception raised in case a method or database API was used which is not "
"supported by the database, e.g. calling the :meth:`~Connection.rollback` "
"method on a connection that does not support transaction or has transactions"
" turned off.  It is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:849
msgid "SQLite and Python types"
msgstr "SQLite 与 Python 类型"

#: ../../library/sqlite3.rst:853
msgid "Introduction"
msgstr "概述"

#: ../../library/sqlite3.rst:855
msgid ""
"SQLite natively supports the following types: ``NULL``, ``INTEGER``, "
"``REAL``, ``TEXT``, ``BLOB``."
msgstr "SQLite 原生支持如下的类型： ``NULL``，``INTEGER``，``REAL``，``TEXT``，``BLOB``。"

#: ../../library/sqlite3.rst:858
msgid ""
"The following Python types can thus be sent to SQLite without any problem:"
msgstr "因此可以将以下Python类型发送到SQLite而不会出现任何问题："

#: ../../library/sqlite3.rst:861 ../../library/sqlite3.rst:878
msgid "Python type"
msgstr "Python 类型"

#: ../../library/sqlite3.rst:861 ../../library/sqlite3.rst:878
msgid "SQLite type"
msgstr "SQLite 类型"

#: ../../library/sqlite3.rst:863 ../../library/sqlite3.rst:880
msgid ":const:`None`"
msgstr ":const:`None`"

#: ../../library/sqlite3.rst:863 ../../library/sqlite3.rst:880
msgid "``NULL``"
msgstr "``NULL``"

#: ../../library/sqlite3.rst:865 ../../library/sqlite3.rst:882
msgid ":class:`int`"
msgstr ":class:`int`"

#: ../../library/sqlite3.rst:865 ../../library/sqlite3.rst:882
msgid "``INTEGER``"
msgstr "``INTEGER``"

#: ../../library/sqlite3.rst:867 ../../library/sqlite3.rst:884
msgid ":class:`float`"
msgstr ":class:`float`"

#: ../../library/sqlite3.rst:867 ../../library/sqlite3.rst:884
msgid "``REAL``"
msgstr "``REAL``"

#: ../../library/sqlite3.rst:869
msgid ":class:`str`"
msgstr ":class:`str`"

#: ../../library/sqlite3.rst:869 ../../library/sqlite3.rst:886
msgid "``TEXT``"
msgstr "``TEXT``"

#: ../../library/sqlite3.rst:871 ../../library/sqlite3.rst:889
msgid ":class:`bytes`"
msgstr ":class:`bytes`"

#: ../../library/sqlite3.rst:871 ../../library/sqlite3.rst:889
msgid "``BLOB``"
msgstr "``BLOB``"

#: ../../library/sqlite3.rst:875
msgid "This is how SQLite types are converted to Python types by default:"
msgstr "这是SQLite类型默认转换为Python类型的方式："

#: ../../library/sqlite3.rst:886
msgid "depends on :attr:`~Connection.text_factory`, :class:`str` by default"
msgstr "取决于 :attr:`~Connection.text_factory` , 默认为 :class:`str` "

#: ../../library/sqlite3.rst:892
msgid ""
"The type system of the :mod:`sqlite3` module is extensible in two ways: you "
"can store additional Python types in a SQLite database via object "
"adaptation, and you can let the :mod:`sqlite3` module convert SQLite types "
"to different Python types via converters."
msgstr ""

#: ../../library/sqlite3.rst:899
msgid "Using adapters to store additional Python types in SQLite databases"
msgstr ""

#: ../../library/sqlite3.rst:901
msgid ""
"As described before, SQLite supports only a limited set of types natively. "
"To use other Python types with SQLite, you must **adapt** them to one of the"
" sqlite3 module's supported types for SQLite: one of NoneType, int, float, "
"str, bytes."
msgstr ""

#: ../../library/sqlite3.rst:906
msgid ""
"There are two ways to enable the :mod:`sqlite3` module to adapt a custom "
"Python type to one of the supported ones."
msgstr ""

#: ../../library/sqlite3.rst:911
msgid "Letting your object adapt itself"
msgstr ""

#: ../../library/sqlite3.rst:913
msgid ""
"This is a good approach if you write the class yourself. Let's suppose you "
"have a class like this::"
msgstr ""

#: ../../library/sqlite3.rst:920
msgid ""
"Now you want to store the point in a single SQLite column.  First you'll "
"have to choose one of the supported types first to be used for representing "
"the point. Let's just use str and separate the coordinates using a "
"semicolon. Then you need to give your class a method ``__conform__(self, "
"protocol)`` which must return the converted value. The parameter *protocol* "
"will be :class:`PrepareProtocol`."
msgstr ""

#: ../../library/sqlite3.rst:930
msgid "Registering an adapter callable"
msgstr ""

#: ../../library/sqlite3.rst:932
msgid ""
"The other possibility is to create a function that converts the type to the "
"string representation and register the function with "
":meth:`register_adapter`."
msgstr ""

#: ../../library/sqlite3.rst:937
msgid ""
"The :mod:`sqlite3` module has two default adapters for Python's built-in "
":class:`datetime.date` and :class:`datetime.datetime` types.  Now let's "
"suppose we want to store :class:`datetime.datetime` objects not in ISO "
"representation, but as a Unix timestamp."
msgstr ""

#: ../../library/sqlite3.rst:946
msgid "Converting SQLite values to custom Python types"
msgstr ""

#: ../../library/sqlite3.rst:948
msgid ""
"Writing an adapter lets you send custom Python types to SQLite. But to make "
"it really useful we need to make the Python to SQLite to Python roundtrip "
"work."
msgstr ""

#: ../../library/sqlite3.rst:951
msgid "Enter converters."
msgstr ""

#: ../../library/sqlite3.rst:953
msgid ""
"Let's go back to the :class:`Point` class. We stored the x and y coordinates"
" separated via semicolons as strings in SQLite."
msgstr ""

#: ../../library/sqlite3.rst:956
msgid ""
"First, we'll define a converter function that accepts the string as a "
"parameter and constructs a :class:`Point` object from it."
msgstr ""

#: ../../library/sqlite3.rst:961
msgid ""
"Converter functions **always** get called with a :class:`bytes` object, no "
"matter under which data type you sent the value to SQLite."
msgstr ""

#: ../../library/sqlite3.rst:970
msgid ""
"Now you need to make the :mod:`sqlite3` module know that what you select "
"from the database is actually a point. There are two ways of doing this:"
msgstr ""

#: ../../library/sqlite3.rst:973
msgid "Implicitly via the declared type"
msgstr ""

#: ../../library/sqlite3.rst:975
msgid "Explicitly via the column name"
msgstr ""

#: ../../library/sqlite3.rst:977
msgid ""
"Both ways are described in section :ref:`sqlite3-module-contents`, in the "
"entries for the constants :const:`PARSE_DECLTYPES` and "
":const:`PARSE_COLNAMES`."
msgstr ""

#: ../../library/sqlite3.rst:980
msgid "The following example illustrates both approaches."
msgstr ""

#: ../../library/sqlite3.rst:986
msgid "Default adapters and converters"
msgstr ""

#: ../../library/sqlite3.rst:988
msgid ""
"There are default adapters for the date and datetime types in the datetime "
"module. They will be sent as ISO dates/ISO timestamps to SQLite."
msgstr ""

#: ../../library/sqlite3.rst:991
msgid ""
"The default converters are registered under the name \"date\" for "
":class:`datetime.date` and under the name \"timestamp\" for "
":class:`datetime.datetime`."
msgstr ""

#: ../../library/sqlite3.rst:995
msgid ""
"This way, you can use date/timestamps from Python without any additional "
"fiddling in most cases. The format of the adapters is also compatible with "
"the experimental SQLite date/time functions."
msgstr ""

#: ../../library/sqlite3.rst:999
msgid "The following example demonstrates this."
msgstr ""

#: ../../library/sqlite3.rst:1003
msgid ""
"If a timestamp stored in SQLite has a fractional part longer than 6 numbers,"
" its value will be truncated to microsecond precision by the timestamp "
"converter."
msgstr ""

#: ../../library/sqlite3.rst:1011
msgid "Controlling Transactions"
msgstr ""

#: ../../library/sqlite3.rst:1013
msgid ""
"The underlying ``sqlite3`` library operates in ``autocommit`` mode by "
"default, but the Python :mod:`sqlite3` module by default does not."
msgstr ""

#: ../../library/sqlite3.rst:1016
msgid ""
"``autocommit`` mode means that statements that modify the database take "
"effect immediately.  A ``BEGIN`` or ``SAVEPOINT`` statement disables "
"``autocommit`` mode, and a ``COMMIT``, a ``ROLLBACK``, or a ``RELEASE`` that"
" ends the outermost transaction, turns ``autocommit`` mode back on."
msgstr ""

#: ../../library/sqlite3.rst:1021
msgid ""
"The Python :mod:`sqlite3` module by default issues a ``BEGIN`` statement "
"implicitly before a Data Modification Language (DML) statement (i.e. "
"``INSERT``/``UPDATE``/``DELETE``/``REPLACE``)."
msgstr ""

#: ../../library/sqlite3.rst:1025
msgid ""
"You can control which kind of ``BEGIN`` statements :mod:`sqlite3` implicitly"
" executes via the *isolation_level* parameter to the :func:`connect` call, "
"or via the :attr:`isolation_level` property of connections. If you specify "
"no *isolation_level*, a plain ``BEGIN`` is used, which is equivalent to "
"specifying ``DEFERRED``.  Other possible values are ``IMMEDIATE`` and "
"``EXCLUSIVE``."
msgstr ""

#: ../../library/sqlite3.rst:1032
msgid ""
"You can disable the :mod:`sqlite3` module's implicit transaction management "
"by setting :attr:`isolation_level` to ``None``.  This will leave the "
"underlying ``sqlite3`` library operating in ``autocommit`` mode.  You can "
"then completely control the transaction state by explicitly issuing "
"``BEGIN``, ``ROLLBACK``, ``SAVEPOINT``, and ``RELEASE`` statements in your "
"code."
msgstr ""

#: ../../library/sqlite3.rst:1038
msgid ""
":mod:`sqlite3` used to implicitly commit an open transaction before DDL "
"statements.  This is no longer the case."
msgstr ""

#: ../../library/sqlite3.rst:1044
msgid "Using :mod:`sqlite3` efficiently"
msgstr ""

#: ../../library/sqlite3.rst:1048
msgid "Using shortcut methods"
msgstr ""

#: ../../library/sqlite3.rst:1050
msgid ""
"Using the nonstandard :meth:`execute`, :meth:`executemany` and "
":meth:`executescript` methods of the :class:`Connection` object, your code "
"can be written more concisely because you don't have to create the (often "
"superfluous) :class:`Cursor` objects explicitly. Instead, the "
":class:`Cursor` objects are created implicitly and these shortcut methods "
"return the cursor objects. This way, you can execute a ``SELECT`` statement "
"and iterate over it directly using only a single call on the "
":class:`Connection` object."
msgstr ""

#: ../../library/sqlite3.rst:1062
msgid "Accessing columns by name instead of by index"
msgstr ""

#: ../../library/sqlite3.rst:1064
msgid ""
"One useful feature of the :mod:`sqlite3` module is the built-in "
":class:`sqlite3.Row` class designed to be used as a row factory."
msgstr ""

#: ../../library/sqlite3.rst:1067
msgid ""
"Rows wrapped with this class can be accessed both by index (like tuples) and"
" case-insensitively by name:"
msgstr ""

#: ../../library/sqlite3.rst:1074
msgid "Using the connection as a context manager"
msgstr "使用连接作为上下文管理器"

#: ../../library/sqlite3.rst:1076
msgid ""
"Connection objects can be used as context managers that automatically commit"
" or rollback transactions.  In the event of an exception, the transaction is"
" rolled back; otherwise, the transaction is committed:"
msgstr "连接对象可以用来作为上下文管理器，它可以自动提交或者回滚事务。如果出现异常，事务会被回滚；否则，事务会被提交。"

#: ../../library/sqlite3.rst:1085
msgid "Common issues"
msgstr "常见问题"

#: ../../library/sqlite3.rst:1088
msgid "Multithreading"
msgstr "多线程"

#: ../../library/sqlite3.rst:1090
msgid ""
"Older SQLite versions had issues with sharing connections between threads. "
"That's why the Python module disallows sharing connections and cursors "
"between threads. If you still try to do so, you will get an exception at "
"runtime."
msgstr ""

#: ../../library/sqlite3.rst:1094
msgid ""
"The only exception is calling the :meth:`~Connection.interrupt` method, "
"which only makes sense to call from a different thread."
msgstr ""

#: ../../library/sqlite3.rst:1098
msgid "Footnotes"
msgstr "脚注"

#: ../../library/sqlite3.rst:1099
msgid ""
"The sqlite3 module is not built with loadable extension support by default, "
"because some platforms (notably Mac OS X) have SQLite libraries which are "
"compiled without this feature. To get loadable extension support, you must "
"pass --enable-loadable-sqlite-extensions to configure."
msgstr ""
"sqlite3 模块默认没有构建可加载扩展支持，因为有一些平台带有不支持这个特性的 SQLite 库（特别是 Mac OS "
"X）。要获得可加载扩展的支持，那么在编译配置的时候必须指定 --enable-loadable-sqlite-extensions 选项。"
