# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Freesand Leo <yuqinju@163.com>, 2019
# walkinrain <walkinrain2008@163.com>, 2019
# Zombie110year <zombie110year@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-12 10:40+0900\n"
"PO-Revision-Date: 2017-02-16 23:21+0000\n"
"Last-Translator: Zombie110year <zombie110year@gmail.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pathlib.rst:3
msgid ":mod:`pathlib` --- Object-oriented filesystem paths"
msgstr ":mod:`pathlib` --- 面对对象的文件系统路径"

#: ../../library/pathlib.rst:10
msgid "**Source code:** :source:`Lib/pathlib.py`"
msgstr "**源代码** :source:`Lib/pathlib.py`"

#: ../../library/pathlib.rst:16
msgid ""
"This module offers classes representing filesystem paths with semantics "
"appropriate for different operating systems.  Path classes are divided "
"between :ref:`pure paths <pure-paths>`, which provide purely computational "
"operations without I/O, and :ref:`concrete paths <concrete-paths>`, which "
"inherit from pure paths but also provide I/O operations."
msgstr ""
"该模块提供表示文件系统路径的类，其语义适用于不同的操作系统。路径类被分为提供纯计算操作而没有 I/O 的 :ref:`纯路径 <pure-"
"paths>`，以及从纯路径继承而来但提供 I/O 操作的 :ref:`具体路径 <concrete-paths>`。"

#: ../../library/pathlib.rst:25
msgid ""
"If you've never used this module before or just aren't sure which class is "
"right for your task, :class:`Path` is most likely what you need. It "
"instantiates a :ref:`concrete path <concrete-paths>` for the platform the "
"code is running on."
msgstr ""
"如果你以前从未使用过此模块或者不确定在项目中使用哪一个类是正确的，则 :class:`Path` 总是你需要的。它在运行代码的平台上实例化为一个 "
":ref:`具体路径 <concrete-paths>`。"

#: ../../library/pathlib.rst:29
msgid "Pure paths are useful in some special cases; for example:"
msgstr "在一些用例中纯路径很有用，例如："

#: ../../library/pathlib.rst:31
msgid ""
"If you want to manipulate Windows paths on a Unix machine (or vice versa). "
"You cannot instantiate a :class:`WindowsPath` when running on Unix, but you "
"can instantiate :class:`PureWindowsPath`."
msgstr ""
"如果你想要在 Unix 设备上操作 Windows 路径（或者相反）。你不应在 Unix 上实例化一个 "
":class:`WindowsPath`，但是你可以实例化 :class:`PureWindowsPath`。"

#: ../../library/pathlib.rst:34
msgid ""
"You want to make sure that your code only manipulates paths without actually"
" accessing the OS. In this case, instantiating one of the pure classes may "
"be useful since those simply don't have any OS-accessing operations."
msgstr "你只想操作路径但不想实际访问操作系统。在这种情况下，实例化一个纯路径是有用的，因为它们没有任何访问操作系统的操作。"

#: ../../library/pathlib.rst:39
msgid ":pep:`428`: The pathlib module -- object-oriented filesystem paths."
msgstr ":pep:`428`： pathlib 模块 -- 面对对象的文件系统路径。"

#: ../../library/pathlib.rst:42
msgid ""
"For low-level path manipulation on strings, you can also use the "
":mod:`os.path` module."
msgstr "对于底层的路径字符串操作，你也可以使用 :mod:`os.path` 模块。"

#: ../../library/pathlib.rst:47
msgid "Basic use"
msgstr "基础使用"

#: ../../library/pathlib.rst:49
msgid "Importing the main class::"
msgstr "导入主类::"

#: ../../library/pathlib.rst:53
msgid "Listing subdirectories::"
msgstr "列出子目录::"

#: ../../library/pathlib.rst:60
msgid "Listing Python source files in this directory tree::"
msgstr "列出当前目录树下的所有 Python 源代码文件::"

#: ../../library/pathlib.rst:67
msgid "Navigating inside a directory tree::"
msgstr "在目录树中移动::"

#: ../../library/pathlib.rst:76
msgid "Querying path properties::"
msgstr "查询路径的属性::"

#: ../../library/pathlib.rst:83
msgid "Opening a file::"
msgstr "打开一个文件::"

#: ../../library/pathlib.rst:93
msgid "Pure paths"
msgstr "纯路径"

#: ../../library/pathlib.rst:95
msgid ""
"Pure path objects provide path-handling operations which don't actually "
"access a filesystem.  There are three ways to access these classes, which we"
" also call *flavours*:"
msgstr "纯路径对象提供了不实际访问文件系统的路径处理操作。有三种方式来访问这些类，也是不同的风格："

#: ../../library/pathlib.rst:101
msgid ""
"A generic class that represents the system's path flavour (instantiating it "
"creates either a :class:`PurePosixPath` or a :class:`PureWindowsPath`)::"
msgstr ""
"一个通用的类，代表当前系统的路径风格（实例化为 :class:`PurePosixPath` 或者 "
":class:`PureWindowsPath`）::"

#: ../../library/pathlib.rst:107
msgid ""
"Each element of *pathsegments* can be either a string representing a path "
"segment, an object implementing the :class:`os.PathLike` interface which "
"returns a string, or another path object::"
msgstr ""
"每一个 *pathsegments* 的元素可能是一个代表路径片段的字符串，一个返回字符串的实现了 :class:`os.PathLike` "
"接口的对象，或者另一个路径对象::"

#: ../../library/pathlib.rst:116
msgid "When *pathsegments* is empty, the current directory is assumed::"
msgstr "当 *pathsegments* 为空的时候，假定为当前目录::"

#: ../../library/pathlib.rst:121
msgid ""
"When several absolute paths are given, the last is taken as an anchor "
"(mimicking :func:`os.path.join`'s behaviour)::"
msgstr "当给出一些绝对路径，最后一位将被当作锚（模仿 :func:`os.path.join` 的行为）::"

#: ../../library/pathlib.rst:129
msgid ""
"However, in a Windows path, changing the local root doesn't discard the "
"previous drive setting::"
msgstr "但是，在 Windows 路径中，改变本地根目录并不会丢弃之前盘符的设置::"

#: ../../library/pathlib.rst:135
msgid ""
"Spurious slashes and single dots are collapsed, but double dots (``'..'``) "
"are not, since this would change the meaning of a path in the face of "
"symbolic links::"
msgstr "假斜线和单独的点都会被消除，但是双点 （``‘..’``） 不会，以防改变符号链接的含义。"

#: ../../library/pathlib.rst:146
msgid ""
"(a naïve approach would make ``PurePosixPath('foo/../bar')`` equivalent to "
"``PurePosixPath('bar')``, which is wrong if ``foo`` is a symbolic link to "
"another directory)"
msgstr ""
"（如果你想让 ``PurePosixPath('foo/../bar')`` 等同于 ``PurePosixPath('bar')``，那么 you "
"are too young, too simple, sometimes naive!  如果 ``foo`` "
"是一个指向其他其他目录的符号链接，那就出毛病啦。）"

#: ../../library/pathlib.rst:150
msgid ""
"Pure path objects implement the :class:`os.PathLike` interface, allowing "
"them to be used anywhere the interface is accepted."
msgstr "纯路径对象实现了 :class:`os.PathLike` 接口，允许它们在任何接受此接口的地方使用。"

#: ../../library/pathlib.rst:153
msgid "Added support for the :class:`os.PathLike` interface."
msgstr "添加了 :class:`os.PathLike` 接口支持。"

#: ../../library/pathlib.rst:158
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents non-Windows "
"filesystem paths::"
msgstr "一个 :class:`PurePath` 的子类，路径风格不同于 Windows 文件系统::"

#: ../../library/pathlib.rst:164 ../../library/pathlib.rst:174
#: ../../library/pathlib.rst:595 ../../library/pathlib.rst:605
#: ../../library/pathlib.rst:615
msgid "*pathsegments* is specified similarly to :class:`PurePath`."
msgstr "*pathsegments* 参数的指定和 :class:`PurePath` 相同。"

#: ../../library/pathlib.rst:168
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents Windows "
"filesystem paths::"
msgstr ":class:`PurePath` 的一个子类，路径风格为 Windows 文件系统路径::"

#: ../../library/pathlib.rst:176
msgid ""
"Regardless of the system you're running on, you can instantiate all of these"
" classes, since they don't provide any operation that does system calls."
msgstr "无论你正运行什么系统，你都可以实例化这些类，因为它们提供的操作不做任何系统调用。"

#: ../../library/pathlib.rst:181
msgid "General properties"
msgstr "通用性质"

#: ../../library/pathlib.rst:183
msgid ""
"Paths are immutable and hashable.  Paths of a same flavour are comparable "
"and orderable.  These properties respect the flavour's case-folding "
"semantics::"
msgstr "路径是不可变并可哈希的。相同风格的路径可以排序与比较。这些性质尊重对应风格的大小写转换语义::"

#: ../../library/pathlib.rst:196
msgid "Paths of a different flavour compare unequal and cannot be ordered::"
msgstr "不同风格的路径比较得到不等的结果并且无法被排序::"

#: ../../library/pathlib.rst:207
msgid "Operators"
msgstr "运算符"

#: ../../library/pathlib.rst:209
msgid ""
"The slash operator helps create child paths, similarly to "
":func:`os.path.join`::"
msgstr "斜杠 ``/`` 操作符有助于创建子路径，就像 :func:`os.path.join` 一样::"

#: ../../library/pathlib.rst:220
msgid ""
"A path object can be used anywhere an object implementing "
":class:`os.PathLike` is accepted::"
msgstr "文件对象可用于任何接受 :class:`os.PathLike` 接口实现的地方。"

#: ../../library/pathlib.rst:228
msgid ""
"The string representation of a path is the raw filesystem path itself (in "
"native form, e.g. with backslashes under Windows), which you can pass to any"
" function taking a file path as a string::"
msgstr ""
"路径的字符串表示法为它自己原始的文件系统路径（以原生形式，例如在 Windows 下使用反斜杠）。你可以传递给任何需要字符串形式路径的函数。"

#: ../../library/pathlib.rst:239
msgid ""
"Similarly, calling :class:`bytes` on a path gives the raw filesystem path as"
" a bytes object, as encoded by :func:`os.fsencode`::"
msgstr ""
"类似地，在路径上调用 :class:`bytes` 将原始文件系统路径作为字节对象给出，就像被 :func:`os.fsencode` 编码一样::"

#: ../../library/pathlib.rst:246
msgid ""
"Calling :class:`bytes` is only recommended under Unix.  Under Windows, the "
"unicode form is the canonical representation of filesystem paths."
msgstr "只推荐在 Unix 下调用 :class:`bytes`。在 Windows， unicode 形式是文件系统路径的规范表示法。"

#: ../../library/pathlib.rst:251
msgid "Accessing individual parts"
msgstr "访问个别部分"

#: ../../library/pathlib.rst:253
msgid ""
"To access the individual \"parts\" (components) of a path, use the following"
" property:"
msgstr "为了访问路径独立的部分 （组件），使用以下特征属性："

#: ../../library/pathlib.rst:258
msgid "A tuple giving access to the path's various components::"
msgstr "一个元组，可以访问路径的多个组件::"

#: ../../library/pathlib.rst:268
msgid "(note how the drive and local root are regrouped in a single part)"
msgstr "（注意盘符和本地根目录是如何重组的）"

#: ../../library/pathlib.rst:272
msgid "Methods and properties"
msgstr "方法和特征属性"

#: ../../library/pathlib.rst:278
msgid "Pure paths provide the following methods and properties:"
msgstr "纯路径提供以下方法和特征属性："

#: ../../library/pathlib.rst:282
msgid "A string representing the drive letter or name, if any::"
msgstr "一个表示驱动器盘符或命名的字符串，如果存在::"

#: ../../library/pathlib.rst:291
msgid "UNC shares are also considered drives::"
msgstr "UNC 分享也被认作驱动器::"

#: ../../library/pathlib.rst:298
msgid "A string representing the (local or global) root, if any::"
msgstr "一个表示（本地或全局）根的字符串，如果存在::"

#: ../../library/pathlib.rst:307
msgid "UNC shares always have a root::"
msgstr "UNC 分享一样拥有根::"

#: ../../library/pathlib.rst:314
msgid "The concatenation of the drive and root::"
msgstr "驱动器和根的联合::"

#: ../../library/pathlib.rst:328
msgid ""
"An immutable sequence providing access to the logical ancestors of the "
"path::"
msgstr " 提供对逻辑父路径访问的不可变序列::"

#: ../../library/pathlib.rst:342
msgid "The logical parent of the path::"
msgstr "此路径的逻辑父路径::"

#: ../../library/pathlib.rst:348
msgid "You cannot go past an anchor, or empty path::"
msgstr "你不能超过一个 anchor 或空路径::"

#: ../../library/pathlib.rst:358
msgid "This is a purely lexical operation, hence the following behaviour::"
msgstr "这是一个单纯的词法操作，因此有以下行为::"

#: ../../library/pathlib.rst:364
msgid ""
"If you want to walk an arbitrary filesystem path upwards, it is recommended "
"to first call :meth:`Path.resolve` so as to resolve symlinks and eliminate "
"`\"..\"` components."
msgstr "如果你想要向上移动任意文件系统路径，推荐先使用 :meth:`Path.resolve` 来解析符号链接以及消除 ``\"..\"`` 组件。"

#: ../../library/pathlib.rst:371
msgid ""
"A string representing the final path component, excluding the drive and "
"root, if any::"
msgstr "一个表示最后路径组件的字符串，排除了驱动器与根目录，如果存在的话::"

#: ../../library/pathlib.rst:377
msgid "UNC drive names are not considered::"
msgstr "UNC 驱动器名不被考虑::"

#: ../../library/pathlib.rst:387
msgid "The file extension of the final component, if any::"
msgstr "最后一个组件的文件扩展名，如果存在::"

#: ../../library/pathlib.rst:399
msgid "A list of the path's file extensions::"
msgstr "路径的文件扩展名列表::"

#: ../../library/pathlib.rst:411
msgid "The final path component, without its suffix::"
msgstr "最后一个路径组件，除去后缀::"

#: ../../library/pathlib.rst:423
msgid ""
"Return a string representation of the path with forward slashes (``/``)::"
msgstr "返回使用正斜杠（``/``）的路径字符串::"

#: ../../library/pathlib.rst:434
msgid ""
"Represent the path as a ``file`` URI.  :exc:`ValueError` is raised if the "
"path isn't absolute."
msgstr "将路径表示为 ``file`` URL。如果并非绝对路径，抛出 :exc:`ValueError`。"

#: ../../library/pathlib.rst:447
msgid ""
"Return whether the path is absolute or not.  A path is considered absolute "
"if it has both a root and (if the flavour allows) a drive::"
msgstr "返回此路径是否为绝对路径。如果路径同时拥有驱动器符与根路径（如果风格允许）则将被认作绝对路径。"

#: ../../library/pathlib.rst:467
msgid ""
"With :class:`PureWindowsPath`, return ``True`` if the path is considered "
"reserved under Windows, ``False`` otherwise.  With :class:`PurePosixPath`, "
"``False`` is always returned."
msgstr ""
"在 :class:`PureWindowsPath`，如果路径是被 Windows 保留的则返回 ``True``，否则 ``False``。在 "
":class:`PurePosixPath`，总是返回 ``False``。"

#: ../../library/pathlib.rst:476
msgid ""
"File system calls on reserved paths can fail mysteriously or have unintended"
" effects."
msgstr "当保留路径上的文件系统被调用，则可能出现玄学失败或者意料之外的效应。"

#: ../../library/pathlib.rst:482
msgid ""
"Calling this method is equivalent to combining the path with each of the "
"*other* arguments in turn::"
msgstr "调用此方法等同于将每个 *other* 参数中的项目连接在一起::"

#: ../../library/pathlib.rst:497
msgid ""
"Match this path against the provided glob-style pattern.  Return ``True`` if"
" matching is successful, ``False`` otherwise."
msgstr "将此路径与提供的通配符风格的模式匹配。如果匹配成功则返回 ``True``，否则返回 ``False``。"

#: ../../library/pathlib.rst:500
msgid ""
"If *pattern* is relative, the path can be either relative or absolute, and "
"matching is done from the right::"
msgstr "如果 *pattern* 是相对的，则路径可以是相对路径或绝对路径，并且匹配是从右侧完成的："

#: ../../library/pathlib.rst:510
msgid ""
"If *pattern* is absolute, the path must be absolute, and the whole path must"
" match::"
msgstr "如果 *pattern* 是绝对的，则路径必须是绝对的，并且路径必须完全匹配::"

#: ../../library/pathlib.rst:518
msgid "As with other methods, case-sensitivity is observed::"
msgstr "与其他方法一样，可以观察到大小写区分::"

#: ../../library/pathlib.rst:526
msgid ""
"Compute a version of this path relative to the path represented by *other*."
"  If it's impossible, ValueError is raised::"
msgstr "计算此路径相对 *other* 表示路径的版本。如果不可计算，则抛出 ValueError::"

#: ../../library/pathlib.rst:544
msgid ""
"Return a new path with the :attr:`name` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr "返回一个新的路径并修改 :attr:`name`。如果原本路径没有 name，ValueError 被抛出::"

#: ../../library/pathlib.rst:561
msgid ""
"Return a new path with the :attr:`suffix` changed.  If the original path "
"doesn't have a suffix, the new *suffix* is appended instead.  If the "
"*suffix* is an empty string, the original suffix is removed::"
msgstr ""
"返回一个新的路径并修改 :attr:`suffix`。如果原本的路径没有后缀，新的 *suffix* 则被追加以代替。如果 *suffix* "
"是空字符串，则原本的后缀被移除::"

#: ../../library/pathlib.rst:580
msgid "Concrete paths"
msgstr "具体路径"

#: ../../library/pathlib.rst:582
msgid ""
"Concrete paths are subclasses of the pure path classes.  In addition to "
"operations provided by the latter, they also provide methods to do system "
"calls on path objects.  There are three ways to instantiate concrete paths:"
msgstr "具体路径是纯路径的子类。除了后者提供的操作之外，它们还提供了对路径对象进行系统调用的方法。有三种方法可以实例化具体路径::"

#: ../../library/pathlib.rst:588
msgid ""
"A subclass of :class:`PurePath`, this class represents concrete paths of the"
" system's path flavour (instantiating it creates either a :class:`PosixPath`"
" or a :class:`WindowsPath`)::"
msgstr ""
"一个 :class:`PurePath` 的子类，此类以当前系统的路径风格表示路径（实例化为 :class:`PosixPath` 或 "
":class:`WindowsPath`）::"

#: ../../library/pathlib.rst:599
msgid ""
"A subclass of :class:`Path` and :class:`PurePosixPath`, this class "
"represents concrete non-Windows filesystem paths::"
msgstr ""
"一个 :class:`Path` 和 :class:`PurePosixPath` 的子类，此类表示一个非 Windows 文件系统的具体路径::"

#: ../../library/pathlib.rst:609
msgid ""
"A subclass of :class:`Path` and :class:`PureWindowsPath`, this class "
"represents concrete Windows filesystem paths::"
msgstr ""
":class:`Path` 和 :class:`PureWindowsPath` 的子类，从类表示一个 Windows 文件系统的具体路径::"

#: ../../library/pathlib.rst:617
msgid ""
"You can only instantiate the class flavour that corresponds to your system "
"(allowing system calls on non-compatible path flavours could lead to bugs or"
" failures in your application)::"
msgstr "你只能实例化与当前系统风格相同的类（允许系统调用作用于不兼容的路径风格可能在应用程序中导致缺陷或失败）::"

#: ../../library/pathlib.rst:637
msgid "Methods"
msgstr "方法"

#: ../../library/pathlib.rst:639
msgid ""
"Concrete paths provide the following methods in addition to pure paths "
"methods.  Many of these methods can raise an :exc:`OSError` if a system call"
" fails (for example because the path doesn't exist):"
msgstr "除纯路径方法外，具体路径还提供以下方法。如果系统调用失败（例如因为路径不存在），其中许多方法都会引发 :exc:`OSError`："

#: ../../library/pathlib.rst:645
msgid ""
"Return a new path object representing the current directory (as returned by "
":func:`os.getcwd`)::"
msgstr "返回一个新的表示当前目录的路径对象（和 :func:`os.getcwd` 返回的相同）::"

#: ../../library/pathlib.rst:654
msgid ""
"Return a new path object representing the user's home directory (as returned"
" by :func:`os.path.expanduser` with ``~`` construct)::"
msgstr "返回一个表示当前用户家目录的新路径对象（和 :func:`os.path.expanduser` 构造含 ``~`` 路径返回的相同）::"

#: ../../library/pathlib.rst:665
msgid ""
"Return information about this path (similarly to :func:`os.stat`). The "
"result is looked up at each call to this method."
msgstr ""

#: ../../library/pathlib.rst:679
msgid "Change the file mode and permissions, like :func:`os.chmod`::"
msgstr ""

#: ../../library/pathlib.rst:691
msgid "Whether the path points to an existing file or directory::"
msgstr ""

#: ../../library/pathlib.rst:703
msgid ""
"If the path points to a symlink, :meth:`exists` returns whether the symlink "
"*points to* an existing file or directory."
msgstr ""

#: ../../library/pathlib.rst:709
msgid ""
"Return a new path with expanded ``~`` and ``~user`` constructs, as returned "
"by :meth:`os.path.expanduser`::"
msgstr ""

#: ../../library/pathlib.rst:721
msgid ""
"Glob the given relative *pattern* in the directory represented by this path,"
" yielding all matching files (of any kind)::"
msgstr ""

#: ../../library/pathlib.rst:729
msgid ""
"The \"``**``\" pattern means \"this directory and all subdirectories, "
"recursively\".  In other words, it enables recursive globbing::"
msgstr ""

#: ../../library/pathlib.rst:740
msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr ""

#: ../../library/pathlib.rst:746
msgid ""
"Return the name of the group owning the file.  :exc:`KeyError` is raised if "
"the file's gid isn't found in the system database."
msgstr ""

#: ../../library/pathlib.rst:752
msgid ""
"Return ``True`` if the path points to a directory (or a symbolic link "
"pointing to a directory), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:755 ../../library/pathlib.rst:764
#: ../../library/pathlib.rst:793 ../../library/pathlib.rst:802
#: ../../library/pathlib.rst:811 ../../library/pathlib.rst:820
msgid ""
"``False`` is also returned if the path doesn't exist or is a broken symlink;"
" other errors (such as permission errors) are propagated."
msgstr ""

#: ../../library/pathlib.rst:761
msgid ""
"Return ``True`` if the path points to a regular file (or a symbolic link "
"pointing to a regular file), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:770
msgid ""
"Return ``True`` if the path is a :dfn:`mount point`: a point in a file "
"system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`path/..`, is on a different "
"device than *path*, or whether :file:`path/..` and *path* point to the same "
"i-node on the same device --- this should detect mount points for all Unix "
"and POSIX variants.  Not implemented on Windows."
msgstr ""

#: ../../library/pathlib.rst:782
msgid ""
"Return ``True`` if the path points to a symbolic link, ``False`` otherwise."
msgstr ""

#: ../../library/pathlib.rst:784
msgid ""
"``False`` is also returned if the path doesn't exist; other errors (such as "
"permission errors) are propagated."
msgstr ""

#: ../../library/pathlib.rst:790
msgid ""
"Return ``True`` if the path points to a Unix socket (or a symbolic link "
"pointing to a Unix socket), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:799
msgid ""
"Return ``True`` if the path points to a FIFO (or a symbolic link pointing to"
" a FIFO), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:808
msgid ""
"Return ``True`` if the path points to a block device (or a symbolic link "
"pointing to a block device), ``False`` if it points to another kind of file."
msgstr ""

#: ../../library/pathlib.rst:817
msgid ""
"Return ``True`` if the path points to a character device (or a symbolic link"
" pointing to a character device), ``False`` if it points to another kind of "
"file."
msgstr ""

#: ../../library/pathlib.rst:826
msgid ""
"When the path points to a directory, yield path objects of the directory "
"contents::"
msgstr ""

#: ../../library/pathlib.rst:842
msgid ""
"Like :meth:`Path.chmod` but, if the path points to a symbolic link, the "
"symbolic link's mode is changed rather than its target's."
msgstr ""

#: ../../library/pathlib.rst:848
msgid ""
"Like :meth:`Path.stat` but, if the path points to a symbolic link, return "
"the symbolic link's information rather than its target's."
msgstr ""

#: ../../library/pathlib.rst:854
msgid ""
"Create a new directory at this given path.  If *mode* is given, it is "
"combined with the process' ``umask`` value to determine the file mode and "
"access flags.  If the path already exists, :exc:`FileExistsError` is raised."
msgstr ""

#: ../../library/pathlib.rst:859
msgid ""
"If *parents* is true, any missing parents of this path are created as "
"needed; they are created with the default permissions without taking *mode* "
"into account (mimicking the POSIX ``mkdir -p`` command)."
msgstr ""

#: ../../library/pathlib.rst:863
msgid ""
"If *parents* is false (the default), a missing parent raises "
":exc:`FileNotFoundError`."
msgstr ""

#: ../../library/pathlib.rst:866
msgid ""
"If *exist_ok* is false (the default), :exc:`FileExistsError` is raised if "
"the target directory already exists."
msgstr ""

#: ../../library/pathlib.rst:869
msgid ""
"If *exist_ok* is true, :exc:`FileExistsError` exceptions will be ignored "
"(same behavior as the POSIX ``mkdir -p`` command), but only if the last path"
" component is not an existing non-directory file."
msgstr ""

#: ../../library/pathlib.rst:873
msgid "The *exist_ok* parameter was added."
msgstr ""

#: ../../library/pathlib.rst:879
msgid ""
"Open the file pointed to by the path, like the built-in :func:`open` "
"function does::"
msgstr ""

#: ../../library/pathlib.rst:891
msgid ""
"Return the name of the user owning the file.  :exc:`KeyError` is raised if "
"the file's uid isn't found in the system database."
msgstr ""

#: ../../library/pathlib.rst:897
msgid "Return the binary contents of the pointed-to file as a bytes object::"
msgstr ""

#: ../../library/pathlib.rst:910
msgid "Return the decoded contents of the pointed-to file as a string::"
msgstr ""

#: ../../library/pathlib.rst:918
msgid ""
"The file is opened and then closed. The optional parameters have the same "
"meaning as in :func:`open`."
msgstr ""

#: ../../library/pathlib.rst:926
msgid ""
"Rename this file or directory to the given *target*.  On Unix, if *target* "
"exists and is a file, it will be replaced silently if the user has "
"permission.  *target* can be either a string or another path object::"
msgstr ""

#: ../../library/pathlib.rst:941
msgid ""
"Rename this file or directory to the given *target*.  If *target* points to "
"an existing file or directory, it will be unconditionally replaced."
msgstr ""

#: ../../library/pathlib.rst:947
msgid ""
"Make the path absolute, resolving any symlinks.  A new path object is "
"returned::"
msgstr ""

#: ../../library/pathlib.rst:956
msgid ""
"\"``..``\" components are also eliminated (this is the only method to do "
"so)::"
msgstr ""

#: ../../library/pathlib.rst:962
msgid ""
"If the path doesn't exist and *strict* is ``True``, :exc:`FileNotFoundError`"
" is raised.  If *strict* is ``False``, the path is resolved as far as "
"possible and any remainder is appended without checking whether it exists.  "
"If an infinite loop is encountered along the resolution path, "
":exc:`RuntimeError` is raised."
msgstr ""

#: ../../library/pathlib.rst:968
msgid "The *strict* argument."
msgstr ""

#: ../../library/pathlib.rst:973
msgid ""
"This is like calling :func:`Path.glob` with \"``**/``\" added in front of "
"the given relative *pattern*::"
msgstr ""

#: ../../library/pathlib.rst:986
msgid "Remove this directory.  The directory must be empty."
msgstr ""

#: ../../library/pathlib.rst:991
msgid ""
"Return whether this path points to the same file as *other_path*, which can "
"be either a Path object, or a string.  The semantics are similar to "
":func:`os.path.samefile` and :func:`os.path.samestat`."
msgstr ""

#: ../../library/pathlib.rst:995
msgid ""
"An :exc:`OSError` can be raised if either file cannot be accessed for some "
"reason."
msgstr ""

#: ../../library/pathlib.rst:1012
msgid ""
"Make this path a symbolic link to *target*.  Under Windows, "
"*target_is_directory* must be true (default ``False``) if the link's target "
"is a directory.  Under POSIX, *target_is_directory*'s value is ignored."
msgstr ""

#: ../../library/pathlib.rst:1028
msgid ""
"The order of arguments (link, target) is the reverse of "
":func:`os.symlink`'s."
msgstr ""

#: ../../library/pathlib.rst:1034
msgid ""
"Create a file at this given path.  If *mode* is given, it is combined with "
"the process' ``umask`` value to determine the file mode and access flags.  "
"If the file already exists, the function succeeds if *exist_ok* is true (and"
" its modification time is updated to the current time), otherwise "
":exc:`FileExistsError` is raised."
msgstr ""

#: ../../library/pathlib.rst:1043
msgid ""
"Remove this file or symbolic link.  If the path points to a directory, use "
":func:`Path.rmdir` instead."
msgstr ""

#: ../../library/pathlib.rst:1049
msgid ""
"Open the file pointed to in bytes mode, write *data* to it, and close the "
"file::"
msgstr ""

#: ../../library/pathlib.rst:1058
msgid "An existing file of the same name is overwritten."
msgstr ""

#: ../../library/pathlib.rst:1065
msgid ""
"Open the file pointed to in text mode, write *data* to it, and close the "
"file::"
msgstr ""

#: ../../library/pathlib.rst:1077
msgid "Correspondence to tools in the :mod:`os` module"
msgstr ""

#: ../../library/pathlib.rst:1079
msgid ""
"Below is a table mapping various :mod:`os` functions to their corresponding "
":class:`PurePath`/:class:`Path` equivalent."
msgstr ""

#: ../../library/pathlib.rst:1084
msgid ""
"Although :func:`os.path.relpath` and :meth:`PurePath.relative_to` have some "
"overlapping use-cases, their semantics differ enough to warrant not "
"considering them equivalent."
msgstr ""

#: ../../library/pathlib.rst:1089
msgid "os and os.path"
msgstr ""

#: ../../library/pathlib.rst:1089
msgid "pathlib"
msgstr "pathlib"

#: ../../library/pathlib.rst:1091
msgid ":func:`os.path.abspath`"
msgstr ""

#: ../../library/pathlib.rst:1091
msgid ":meth:`Path.resolve`"
msgstr ":meth:`Path.resolve`"

#: ../../library/pathlib.rst:1092
msgid ":func:`os.chmod`"
msgstr ""

#: ../../library/pathlib.rst:1092
msgid ":meth:`Path.chmod`"
msgstr ""

#: ../../library/pathlib.rst:1093
msgid ":func:`os.mkdir`"
msgstr ""

#: ../../library/pathlib.rst:1093
msgid ":meth:`Path.mkdir`"
msgstr ""

#: ../../library/pathlib.rst:1094
msgid ":func:`os.rename`"
msgstr ""

#: ../../library/pathlib.rst:1094
msgid ":meth:`Path.rename`"
msgstr ""

#: ../../library/pathlib.rst:1095
msgid ":func:`os.replace`"
msgstr ""

#: ../../library/pathlib.rst:1095
msgid ":meth:`Path.replace`"
msgstr ""

#: ../../library/pathlib.rst:1096
msgid ":func:`os.rmdir`"
msgstr ""

#: ../../library/pathlib.rst:1096
msgid ":meth:`Path.rmdir`"
msgstr ""

#: ../../library/pathlib.rst:1097
msgid ":func:`os.remove`, :func:`os.unlink`"
msgstr ""

#: ../../library/pathlib.rst:1097
msgid ":meth:`Path.unlink`"
msgstr ""

#: ../../library/pathlib.rst:1098
msgid ":func:`os.getcwd`"
msgstr ""

#: ../../library/pathlib.rst:1098
msgid ":func:`Path.cwd`"
msgstr ""

#: ../../library/pathlib.rst:1099
msgid ":func:`os.path.exists`"
msgstr ""

#: ../../library/pathlib.rst:1099
msgid ":meth:`Path.exists`"
msgstr ":meth:`Path.exists`"

#: ../../library/pathlib.rst:1100
msgid ":func:`os.path.expanduser`"
msgstr ""

#: ../../library/pathlib.rst:1100
msgid ":meth:`Path.expanduser` and :meth:`Path.home`"
msgstr ""

#: ../../library/pathlib.rst:1102
msgid ":func:`os.path.isdir`"
msgstr ""

#: ../../library/pathlib.rst:1102
msgid ":meth:`Path.is_dir`"
msgstr ":meth:`Path.is_dir`"

#: ../../library/pathlib.rst:1103
msgid ":func:`os.path.isfile`"
msgstr ""

#: ../../library/pathlib.rst:1103
msgid ":meth:`Path.is_file`"
msgstr ":meth:`Path.is_file`"

#: ../../library/pathlib.rst:1104
msgid ":func:`os.path.islink`"
msgstr ""

#: ../../library/pathlib.rst:1104
msgid ":meth:`Path.is_symlink`"
msgstr ":meth:`Path.is_symlink`"

#: ../../library/pathlib.rst:1105
msgid ":func:`os.stat`"
msgstr ""

#: ../../library/pathlib.rst:1105
msgid ":meth:`Path.stat`, :meth:`Path.owner`, :meth:`Path.group`"
msgstr ":meth:`Path.stat`, :meth:`Path.owner`, :meth:`Path.group`"

#: ../../library/pathlib.rst:1108
msgid ":func:`os.path.isabs`"
msgstr ""

#: ../../library/pathlib.rst:1108
msgid ":meth:`PurePath.is_absolute`"
msgstr ":meth:`PurePath.is_absolute`"

#: ../../library/pathlib.rst:1109
msgid ":func:`os.path.join`"
msgstr ""

#: ../../library/pathlib.rst:1109
msgid ":func:`PurePath.joinpath`"
msgstr ""

#: ../../library/pathlib.rst:1110
msgid ":func:`os.path.basename`"
msgstr ""

#: ../../library/pathlib.rst:1110
msgid ":data:`PurePath.name`"
msgstr ""

#: ../../library/pathlib.rst:1111
msgid ":func:`os.path.dirname`"
msgstr ""

#: ../../library/pathlib.rst:1111
msgid ":data:`PurePath.parent`"
msgstr ""

#: ../../library/pathlib.rst:1112
msgid ":func:`os.path.samefile`"
msgstr ""

#: ../../library/pathlib.rst:1112
msgid ":meth:`Path.samefile`"
msgstr ""

#: ../../library/pathlib.rst:1113
msgid ":func:`os.path.splitext`"
msgstr ""

#: ../../library/pathlib.rst:1113
msgid ":data:`PurePath.suffix`"
msgstr ""
