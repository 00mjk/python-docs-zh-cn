# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 马强 <jackylvm@foxmail.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-01 10:14+0900\n"
"PO-Revision-Date: 2017-02-16 23:08+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.errors.rst:2
msgid ":mod:`email.errors`: Exception and Defect classes"
msgstr ":mod:`email.errors`: 异常和缺陷类"

#: ../../library/email.errors.rst:7
msgid "**Source code:** :source:`Lib/email/errors.py`"
msgstr "**源代码:** :source:`Lib/email/errors.py`"

#: ../../library/email.errors.rst:11
msgid ""
"The following exception classes are defined in the :mod:`email.errors` "
"module:"
msgstr "以下异常类在 :mod:`email.errors` 模块中定义："

#: ../../library/email.errors.rst:16
msgid ""
"This is the base class for all exceptions that the :mod:`email` package can "
"raise.  It is derived from the standard :exc:`Exception` class and defines "
"no additional methods."
msgstr ""
"这是 :mod:`email` 包可以引发的所有异常的基类。 它源自标准异常 :exc:`Exception` 类，这个类没有定义其他方法。"

#: ../../library/email.errors.rst:23
msgid ""
"This is the base class for exceptions raised by the "
":class:`~email.parser.Parser` class.  It is derived from "
":exc:`MessageError`.  This class is also used internally by the parser used "
"by :mod:`~email.headerregistry`."
msgstr ""
"这是由 class:`~email.parser.Parser` 类引发的异常的基类。 它源于 :exc:`MessageError`。 "
"此类也由解析器在内部通过 :mod:`~email.headerregistry` 使用。"

#: ../../library/email.errors.rst:31
msgid ""
"Raised under some error conditions when parsing the :rfc:`5322` headers of a"
" message, this class is derived from :exc:`MessageParseError`.  The "
":meth:`~email.message.EmailMessage.set_boundary` method will raise this "
"error if the content type is unknown when the method is called. "
":class:`~email.header.Header` may raise this error for certain base64 "
"decoding errors, and when an attempt is made to create a header that appears"
" to contain an embedded header (that is, there is what is supposed to be a "
"continuation line that has no leading whitespace and looks like a header)."
msgstr ""
"在解析消息的 :rfc:`5322` 标头时，某些错误条件下会触发，此类派生自 :exc:`MessageParseError`。 "
"如果在调用方法时内容类型未知，则 :meth:`~email.message.EmailMessage.set_boundary` 方法将引发此错误。 "
"当尝试创建一个看起来包含嵌入式标头的标头时 :class:`~email.header.Header` 可能会针对某些 base64 "
"解码错误引发此错误（也就是说，应该是一个 没有前导空格并且看起来像标题的延续行）。"

#: ../../library/email.errors.rst:43
msgid "Deprecated and no longer used."
msgstr "已弃用和不再使用的。"

#: ../../library/email.errors.rst:48
msgid ""
"Raised when a payload is added to a :class:`~email.message.Message` object "
"using :meth:`add_payload`, but the payload is already a scalar and the "
"message's :mailheader:`Content-Type` main type is not either "
":mimetype:`multipart` or missing.  :exc:`MultipartConversionError` multiply "
"inherits from :exc:`MessageError` and the built-in :exc:`TypeError`."
msgstr ""
"当使用 :meth:`add_payload` 将有效负载添加到 :class:`~email.message.Message` "
"对象时，有效负载已经是一个标量，而消息的 :mailheader:`Content-Type` 主类型不是 :mimetype:`multipart` "
"或者缺少时触发该异常。 :exc:`MultipartConversionError` 多重继承自 :exc:`MessageError` 和内置的 "
":exc:`TypeError`。"

#: ../../library/email.errors.rst:54
msgid ""
"Since :meth:`Message.add_payload` is deprecated, this exception is rarely "
"raised in practice.  However the exception may also be raised if the "
":meth:`~email.message.Message.attach` method is called on an instance of a "
"class derived from :class:`~email.mime.nonmultipart.MIMENonMultipart` (e.g. "
":class:`~email.mime.image.MIMEImage`)."
msgstr ""

#: ../../library/email.errors.rst:62
msgid ""
"Here is the list of the defects that the :class:`~email.parser.FeedParser` "
"can find while parsing messages.  Note that the defects are added to the "
"message where the problem was found, so for example, if a message nested "
"inside a :mimetype:`multipart/alternative` had a malformed header, that "
"nested message object would have a defect, but the containing messages would"
" not."
msgstr ""

#: ../../library/email.errors.rst:68
msgid ""
"All defect classes are subclassed from :class:`email.errors.MessageDefect`."
msgstr ""

#: ../../library/email.errors.rst:70
msgid ""
":class:`NoBoundaryInMultipartDefect` -- A message claimed to be a multipart,"
" but had no :mimetype:`boundary` parameter."
msgstr ""

#: ../../library/email.errors.rst:73
msgid ""
":class:`StartBoundaryNotFoundDefect` -- The start boundary claimed in the "
":mailheader:`Content-Type` header was never found."
msgstr ""

#: ../../library/email.errors.rst:76
msgid ""
":class:`CloseBoundaryNotFoundDefect` -- A start boundary was found, but no "
"corresponding close boundary was ever found."
msgstr ""

#: ../../library/email.errors.rst:81
msgid ""
":class:`FirstHeaderLineIsContinuationDefect` -- The message had a "
"continuation line as its first header line."
msgstr ""

#: ../../library/email.errors.rst:84
msgid ""
":class:`MisplacedEnvelopeHeaderDefect` - A \"Unix From\" header was found in"
" the middle of a header block."
msgstr ""

#: ../../library/email.errors.rst:87
msgid ""
":class:`MissingHeaderBodySeparatorDefect` - A line was found while parsing "
"headers that had no leading white space but contained no ':'.  Parsing "
"continues assuming that the line represents the first line of the body."
msgstr ""

#: ../../library/email.errors.rst:93
msgid ""
":class:`MalformedHeaderDefect` -- A header was found that was missing a "
"colon, or was otherwise malformed."
msgstr ""

#: ../../library/email.errors.rst:96
msgid "This defect has not been used for several Python versions."
msgstr ""

#: ../../library/email.errors.rst:99
msgid ""
":class:`MultipartInvariantViolationDefect` -- A message claimed to be a "
":mimetype:`multipart`, but no subparts were found.  Note that when a message"
" has this defect, its :meth:`~email.message.Message.is_multipart` method may"
" return false even though its content type claims to be "
":mimetype:`multipart`."
msgstr ""

#: ../../library/email.errors.rst:104
msgid ""
":class:`InvalidBase64PaddingDefect` -- When decoding a block of base64 "
"encoded bytes, the padding was not correct.  Enough padding is added to "
"perform the decode, but the resulting decoded bytes may be invalid."
msgstr ""

#: ../../library/email.errors.rst:108
msgid ""
":class:`InvalidBase64CharactersDefect` -- When decoding a block of base64 "
"encoded bytes, characters outside the base64 alphabet were encountered. The "
"characters are ignored, but the resulting decoded bytes may be invalid."
msgstr ""

#: ../../library/email.errors.rst:112
msgid ""
":class:`InvalidBase64LengthDefect` -- When decoding a block of base64 "
"encoded bytes, the number of non-padding base64 characters was invalid (1 "
"more than a multiple of 4).  The encoded block was kept as-is."
msgstr ""
