# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# ww song <sww4718168@gmail.com>, 2018
# Kder <kder@live.cn>, 2018
# Trim21 <i@trim21.me>, 2019
# rpish yao <rpishmail@gmail.com>, 2019
# JW H <hjwdhjwd@gmail.com>, 2019
# ppcfish <ppcfish@gmail.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2020
# Meng Du <alphanow@gmail.com>, 2020
# MuSheng Chen <sheng.2179@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-13 03:51+0000\n"
"PO-Revision-Date: 2017-02-16 23:32+0000\n"
"Last-Translator: MuSheng Chen <sheng.2179@gmail.com>, 2020\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- 类型标注支持"

#: ../../library/typing.rst:10
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**源码：** :source:`Lib/typing.py`"

#: ../../library/typing.rst:14
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr ""

#: ../../library/typing.rst:20
msgid ""
"This module provides runtime support for type hints as specified by "
":pep:`484`, :pep:`526`, :pep:`544`, :pep:`586`, :pep:`589`, and :pep:`591`. "
"The most fundamental support consists of the types :data:`Any`, "
":data:`Union`, :data:`Tuple`, :data:`Callable`, :class:`TypeVar`, and "
":class:`Generic`.  For full specification please see :pep:`484`.  For a "
"simplified introduction to type hints see :pep:`483`."
msgstr ""

#: ../../library/typing.rst:28
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr "函数接受并返回一个字符串，注释像下面这样::"

#: ../../library/typing.rst:33
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as"
" arguments."
msgstr ""
"在函数 ``greeting`` 中，参数 ``name`` 预期是 :class:`str` 类型，并且返回 :class:`str` "
"类型。子类型允许作为参数。"

#: ../../library/typing.rst:38
msgid "Type aliases"
msgstr "类型别名"

#: ../../library/typing.rst:40
msgid ""
"A type alias is defined by assigning the type to the alias. In this example,"
" ``Vector`` and ``List[float]`` will be treated as interchangeable "
"synonyms::"
msgstr "类型别名通过将类型分配给别名来定义。在这个例子中， ``Vector`` 和 ``List[float]`` 将被视为可互换的同义词::"

#: ../../library/typing.rst:52
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr "类型别名可用于简化复杂类型签名。例如::"

#: ../../library/typing.rst:70
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr "请注意，``None`` 作为类型提示是一种特殊情况，并且由 ``type(None)`` 取代。"

#: ../../library/typing.rst:76
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:78
msgid "Use the :func:`NewType` helper function to create distinct types::"
msgstr "使用 :func:`NewType` 辅助函数创建不同的类型::"

#: ../../library/typing.rst:85
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr "静态类型检查器会将新类型视为它是原始类型的子类。这对于帮助捕捉逻辑错误非常有用::"

#: ../../library/typing.rst:97
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent"
" you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"您仍然可以对 ``UserId`` 类型的变量执行所有的 ``int`` 支持的操作，但结果将始终为 ``int`` 类型。这可以让你在需要 "
"``int`` 的地方传入 ``UserId``，但会阻止你以无效的方式无意中创建 ``UserId``::"

#: ../../library/typing.rst:105
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a function that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce any overhead beyond that of a regular function call."
msgstr ""

#: ../../library/typing.rst:111
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr "更确切地说，表达式 ``some_value is Derived(some_value)`` 在运行时总是为真。"

#: ../../library/typing.rst:114
msgid ""
"This also means that it is not possible to create a subtype of ``Derived`` "
"since it is an identity function at runtime, not an actual type::"
msgstr "这也意味着无法创建 ``Derived`` 的子类型，因为它是运行时的标识函数，而不是实际的类型::"

#: ../../library/typing.rst:124
msgid ""
"However, it is possible to create a :func:`NewType` based on a 'derived' "
"``NewType``::"
msgstr "但是，可以基于'derived' ``NewType`` 创建 :func:`NewType` ::"

#: ../../library/typing.rst:132
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "并且 ``ProUserId`` 的类型检查将按预期工作。"

#: ../../library/typing.rst:134
msgid "See :pep:`484` for more details."
msgstr "有关更多详细信息，请参阅 :pep:`484`。"

#: ../../library/typing.rst:138
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to"
" one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""
"回想一下，使用类型别名声明两种类型彼此 *等效* 。``Alias = Original`` 将使静态类型检查对待所有情况下 ``Alias`` "
"*完全等同于* ``Original``。当您想简化复杂类型签名时，这很有用。"

#: ../../library/typing.rst:143
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"相反，``NewType`` 声明一种类型是另一种类型的子类型。``Derived = NewType('Derived', Original)`` "
"将使静态类型检查器将 ``Derived`` 当作 ``Original`` 的 *子类* ，这意味着 ``Original`` 类型的值不能用于 "
"``Derived`` 类型的值需要的地方。当您想以最小的运行时间成本防止逻辑错误时，这非常有用。"

#: ../../library/typing.rst:153
msgid "Callable"
msgstr "Callable"

#: ../../library/typing.rst:155
msgid ""
"Frameworks expecting callback functions of specific signatures might be type"
" hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""
"期望特定签名的回调函数的框架可以将类型标注为 ``Callable[[Arg1Type, Arg2Type], ReturnType]``。"

#: ../../library/typing.rst:158
msgid "For example::"
msgstr "例如::"

#: ../../library/typing.rst:169
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""
"通过用文字省略号替换类型提示中的参数列表： ``Callable[...，ReturnType]``，可以声明可调用的返回类型，而无需指定调用签名。"

#: ../../library/typing.rst:176
msgid "Generics"
msgstr "泛型(Generic)"

#: ../../library/typing.rst:178
msgid ""
"Since type information about objects kept in containers cannot be statically"
" inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr "由于无法以通用方式静态推断有关保存在容器中的对象的类型信息，因此抽象基类已扩展为支持订阅以表示容器元素的预期类型。"

#: ../../library/typing.rst:189
msgid ""
"Generics can be parameterized by using a new factory available in typing "
"called :class:`TypeVar`."
msgstr "泛型可以通过使用typing模块中名为 :class:`TypeVar` 的新工厂进行参数化。"

#: ../../library/typing.rst:203
msgid "User-defined generic types"
msgstr "用户定义的泛型类型"

#: ../../library/typing.rst:205
msgid "A user-defined class can be defined as a generic class."
msgstr "用户定义的类可以定义为泛型类。"

#: ../../library/typing.rst:231
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""
"``Generic[T]`` 作为基类定义了类 ``LoggedVar`` 采用单个类型参数 ``T``。这也使得 ``T`` "
"作为类体内的一个类型有效。"

#: ../../library/typing.rst:235
msgid ""
"The :class:`Generic` base class defines :meth:`__class_getitem__` so that "
"``LoggedVar[t]`` is valid as a type::"
msgstr ""

#: ../../library/typing.rst:244
msgid ""
"A generic type can have any number of type variables, and type variables may"
" be constrained::"
msgstr "泛型类型可以有任意数量的类型变量，并且类型变量可能会受到限制::"

#: ../../library/typing.rst:256
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ":class:`Generic` 每个参数的类型变量必须是不同的。这是无效的::"

#: ../../library/typing.rst:267
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr "您可以对 :class:`Generic` 使用多重继承::"

#: ../../library/typing.rst:276
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr "从泛型类继承时，某些类型变量可能是固定的::"

#: ../../library/typing.rst:285
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "在这种情况下，``MyDict`` 只有一个参数，``T``。"

#: ../../library/typing.rst:287
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any`"
" for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""
"在不指定类型参数的情况下使用泛型类别会为每个位置假设 :data:`Any`。在下面的例子中，``MyIterable`` 不是泛型，但是隐式继承自 "
"``Iterable[Any]``::"

#: ../../library/typing.rst:295
msgid "User defined generic type aliases are also supported. Examples::"
msgstr "用户定义的通用类型别名也受支持。例子::"

#: ../../library/typing.rst:311
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ""

#: ../../library/typing.rst:314
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are "
"hashable and comparable for equality."
msgstr ""

#: ../../library/typing.rst:321
msgid "The :data:`Any` type"
msgstr ":data:`Any` 类型"

#: ../../library/typing.rst:323
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
":data:`Any` 是一种特殊的类型。静态类型检查器将所有类型视为与 :data:`Any` 兼容，反之亦然， :data:`Any` "
"也与所有类型相兼容。"

#: ../../library/typing.rst:327
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type on :data:`Any` and assign it to any variable::"
msgstr "这意味着可对类型为 :data:`Any` 的值执行任何操作或方法调用，并将其赋值给任何变量::"

#: ../../library/typing.rst:345
msgid ""
"Notice that no typechecking is performed when assigning a value of type "
":data:`Any` to a more precise type. For example, the static type checker did"
" not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"需要注意的是，将 :data:`Any` 类型的值赋值给另一个更具体的类型时，Python不会执行类型检查。例如，当把 ``a`` 赋值给 ``s`` "
"时，即使 ``s`` 被声明为 :class:`str` 类型，在运行时接收到的是 :class:`int` 值，静态类型检查器也不会报错。"

#: ../../library/typing.rst:351
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr "此外，所有返回值无类型或形参无类型的函数将隐式地默认使用 :data:`Any` 类型::"

#: ../../library/typing.rst:364
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr "当需要混用动态类型和静态类型的代码时，上述行为可以让 :data:`Any` 被用作 *应急出口* 。"

#: ../../library/typing.rst:367
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However,"
" unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
":data:`Any` 和 :class:`object` 的行为对比。与 :data:`Any` 相似，所有的类型都是 :class:`object`"
" 的子类型。然而不同于 :data:`Any`，反之并不成立： :class:`object` *不是* 其他所有类型的子类型。"

#: ../../library/typing.rst:372
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using"
" it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"这意味着当一个值的类型是 :class:`object` "
"的时候，类型检查器会拒绝对它的几乎所有的操作。把它赋值给一个指定了类型的变量（或者当作返回值）是一个类型错误。比如说："

#: ../../library/typing.rst:394
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe"
" manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr "使用 :class:`object` 示意一个值可以类型安全地兼容任何类型。使用 :data:`Any` 示意一个值地类型是动态定义的。"

#: ../../library/typing.rst:399
msgid "Nominal vs structural subtyping"
msgstr ""

#: ../../library/typing.rst:401
msgid ""
"Initially :pep:`484` defined Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""

#: ../../library/typing.rst:405
msgid ""
"This requirement previously also applied to abstract base classes, such as "
":class:`Iterable`. The problem with this approach is that a class had to be "
"explicitly marked to support them, which is unpythonic and unlike what one "
"would normally do in idiomatic dynamically typed Python code. For example, "
"this conforms to the :pep:`484`::"
msgstr ""

#: ../../library/typing.rst:418
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above"
" code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""

#: ../../library/typing.rst:434
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""

#: ../../library/typing.rst:439
msgid "Module contents"
msgstr "模块内容"

#: ../../library/typing.rst:441
msgid "The module defines the following classes, functions and decorators."
msgstr ""

#: ../../library/typing.rst:445
msgid ""
"This module defines several types that are subclasses of pre-existing "
"standard library classes which also extend :class:`Generic` to support type "
"variables inside ``[]``. These types became redundant in Python 3.9 when the"
" corresponding pre-existing classes were enhanced to support ``[]``."
msgstr ""

#: ../../library/typing.rst:451
msgid ""
"The redundant types are deprecated as of Python 3.9 but no deprecation "
"warnings will be issued by the interpreter. It is expected that type "
"checkers will flag the deprecated types when the checked program targets "
"Python 3.9 or newer."
msgstr ""

#: ../../library/typing.rst:456
msgid ""
"The deprecated types will be removed from the :mod:`typing` module in the "
"first Python version released 5 years after the release of Python 3.9.0. See"
" details in :pep:`585`—*Type Hinting Generics In Standard Collections*."
msgstr ""

#: ../../library/typing.rst:462
msgid "Special typing primitives"
msgstr ""

#: ../../library/typing.rst:465
msgid "Special types"
msgstr ""

#: ../../library/typing.rst:467
msgid "These can be used as types in annotations and do not support ``[]``."
msgstr ""

#: ../../library/typing.rst:471
msgid "Special type indicating an unconstrained type."
msgstr "特殊类型，表明类型没有任何限制。"

#: ../../library/typing.rst:473
msgid "Every type is compatible with :data:`Any`."
msgstr "每一个类型都对 :data:`Any` 兼容。"

#: ../../library/typing.rst:474
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` 对每一个类型都兼容。"

#: ../../library/typing.rst:478
msgid "Special type indicating that a function never returns. For example::"
msgstr "标记一个函数没有返回值的特殊类型。比如说::"

#: ../../library/typing.rst:490
msgid "Special forms"
msgstr ""

#: ../../library/typing.rst:492
msgid ""
"These can be used as types in annotations using ``[]``, each having a unique"
" syntax."
msgstr ""

#: ../../library/typing.rst:496
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""

#: ../../library/typing.rst:500
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""

#: ../../library/typing.rst:504
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""

#: ../../library/typing.rst:508
msgid ":class:`builtins.tuple <tuple>` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:513
msgid "Union type; ``Union[X, Y]`` means either X or Y."
msgstr "联合类型； ``Union[X, Y]`` 意味着：要不是 X，要不是 Y。"

#: ../../library/typing.rst:515
msgid "To define a union, use e.g. ``Union[int, str]``.  Details:"
msgstr "使用形如 ``Union[int, str]`` 的形式来定义一个联合类型。细节如下:"

#: ../../library/typing.rst:517
msgid "The arguments must be types and there must be at least one."
msgstr "参数必须是类型，而且必须至少有一个参数。"

#: ../../library/typing.rst:519
msgid "Unions of unions are flattened, e.g.::"
msgstr "联合类型的联合类型会被展开打平，比如::"

#: ../../library/typing.rst:523
msgid "Unions of a single argument vanish, e.g.::"
msgstr "仅有一个参数的联合类型会坍缩成参数自身，比如::"

#: ../../library/typing.rst:527
msgid "Redundant arguments are skipped, e.g.::"
msgstr "多余的参数会被跳过，比如::"

#: ../../library/typing.rst:531
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "在比较联合类型的时候，参数顺序会被忽略，比如::"

#: ../../library/typing.rst:535
msgid "You cannot subclass or instantiate a union."
msgstr "你不能继承或者实例化一个联合类型。"

#: ../../library/typing.rst:537
msgid "You cannot write ``Union[X][Y]``."
msgstr "你不能写成 ``Union[X][Y]`` 。"

#: ../../library/typing.rst:539
msgid "You can use ``Optional[X]`` as a shorthand for ``Union[X, None]``."
msgstr "你可以使用 ``Optional[X]`` 作为 ``Union[X, None]`` 的缩写。"

#: ../../library/typing.rst:541
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "不要在运行时内从联合类型中移除显式说明的子类。"

#: ../../library/typing.rst:546
msgid "Optional type."
msgstr ""

#: ../../library/typing.rst:548
msgid "``Optional[X]`` is equivalent to ``Union[X, None]``."
msgstr ""

#: ../../library/typing.rst:550
msgid ""
"Note that this is not the same concept as an optional argument, which is one"
" that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""

#: ../../library/typing.rst:558
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""

#: ../../library/typing.rst:567
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr ""

#: ../../library/typing.rst:569
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr ""

#: ../../library/typing.rst:574
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to "
":class:`collections.abc.Callable`."
msgstr ""

#: ../../library/typing.rst:582
msgid ":class:`collections.abc.Callable` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:587
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""

#: ../../library/typing.rst:596
msgid "Note that ``Type[C]`` is covariant::"
msgstr ""

#: ../../library/typing.rst:608
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""

#: ../../library/typing.rst:616
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, "
":ref:`type variables <generics>`, and unions of any of these types. For "
"example::"
msgstr ""

#: ../../library/typing.rst:622
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr ""

#: ../../library/typing.rst:627
msgid ":class:`builtins.type <type>` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:632
msgid ""
"A type that can be used to indicate to type checkers that the corresponding "
"variable or function parameter has a value equivalent to the provided "
"literal (or one of several literals). For example::"
msgstr ""

#: ../../library/typing.rst:646
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""

#: ../../library/typing.rst:654
msgid "Special type construct to mark class variables."
msgstr ""

#: ../../library/typing.rst:656
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""

#: ../../library/typing.rst:664
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""

#: ../../library/typing.rst:666
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with "
":func:`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change "
"Python runtime behavior, but it can be used by third-party type checkers. "
"For example, a type checker might flag the following code as an error::"
msgstr ""

#: ../../library/typing.rst:680
msgid ""
"A special typing construct to indicate to type checkers that a name cannot "
"be re-assigned or overridden in a subclass. For example::"
msgstr ""

#: ../../library/typing.rst:692 ../../library/typing.rst:1570
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""

#: ../../library/typing.rst:699
msgid ""
"A type, introduced in :pep:`593` (``Flexible function and variable "
"annotations``), to decorate existing types with context-specific metadata "
"(possibly multiple pieces of it, as ``Annotated`` is variadic). "
"Specifically, a type ``T`` can be annotated with metadata ``x`` via the "
"typehint ``Annotated[T, x]``. This metadata can be used for either static "
"analysis or at runtime. If a library (or tool) encounters a typehint "
"``Annotated[T, x]`` and has no special logic for metadata ``x``, it should "
"ignore it and simply treat the type as ``T``. Unlike the ``no_type_check`` "
"functionality that currently exists in the ``typing`` module which "
"completely disables typechecking annotations on a function or a class, the "
"``Annotated`` type allows for both static typechecking of ``T`` (e.g., via "
"mypy or Pyre, which can safely ignore ``x``) together with runtime access to"
" ``x`` within a specific application."
msgstr ""

#: ../../library/typing.rst:713
msgid ""
"Ultimately, the responsibility of how to interpret the annotations (if at "
"all) is the responsibility of the tool or library encountering the "
"``Annotated`` type. A tool or library encountering an ``Annotated`` type can"
" scan through the annotations to determine if they are of interest (e.g., "
"using ``isinstance()``)."
msgstr ""

#: ../../library/typing.rst:719
msgid ""
"When a tool or a library does not support annotations or encounters an "
"unknown annotation it should just ignore it and treat annotated type as the "
"underlying type."
msgstr ""

#: ../../library/typing.rst:723
msgid ""
"It's up to the tool consuming the annotations to decide whether the client "
"is allowed to have several annotations on one type and how to merge those "
"annotations."
msgstr ""

#: ../../library/typing.rst:727
msgid ""
"Since the ``Annotated`` type allows you to put several annotations of the "
"same (or different) type(s) on any node, the tools or libraries consuming "
"those annotations are in charge of dealing with potential duplicates. For "
"example, if you are doing value range analysis you might allow this::"
msgstr ""

#: ../../library/typing.rst:736
msgid ""
"Passing ``include_extras=True`` to :func:`get_type_hints` lets one access "
"the extra annotations at runtime."
msgstr ""

#: ../../library/typing.rst:739
msgid "The details of the syntax:"
msgstr ""

#: ../../library/typing.rst:741
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr ""

#: ../../library/typing.rst:743
msgid ""
"Multiple type annotations are supported (``Annotated`` supports variadic "
"arguments)::"
msgstr ""

#: ../../library/typing.rst:748
msgid ""
"``Annotated`` must be called with at least two arguments ( "
"``Annotated[int]`` is not valid)"
msgstr ""

#: ../../library/typing.rst:751
msgid ""
"The order of the annotations is preserved and matters for equality checks::"
msgstr ""

#: ../../library/typing.rst:758
msgid ""
"Nested ``Annotated`` types are flattened, with metadata ordered starting "
"with the innermost annotation::"
msgstr ""

#: ../../library/typing.rst:765
msgid "Duplicated annotations are not removed::"
msgstr ""

#: ../../library/typing.rst:771
msgid "``Annotated`` can be used with nested and generic aliases::"
msgstr ""

#: ../../library/typing.rst:782
msgid "Building generic types"
msgstr ""

#: ../../library/typing.rst:784
msgid ""
"These are not used in annotations. They are building blocks for creating "
"generic types."
msgstr ""

#: ../../library/typing.rst:788
msgid "Abstract base class for generic types."
msgstr ""

#: ../../library/typing.rst:790
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""

#: ../../library/typing.rst:799
msgid "This class can then be used as follows::"
msgstr "这个类之后可以被这样用:"

#: ../../library/typing.rst:812
msgid "Type variable."
msgstr "类型变量"

#: ../../library/typing.rst:814 ../../library/typing.rst:930
msgid "Usage::"
msgstr "用法::"

#: ../../library/typing.rst:819
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See class Generic for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""

#: ../../library/typing.rst:832
msgid ""
"The latter example's signature is essentially the overloading of ``(str, "
"str) -> str`` and ``(bytes, bytes) -> bytes``.  Also note that if the "
"arguments are instances of some subclass of :class:`str`, the return type is"
" still plain :class:`str`."
msgstr ""

#: ../../library/typing.rst:837
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, "
":func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""
"``isinstance(x, T)`` 会在运行时抛出 :exc:`TypeError` 异常。一般地说， :func:`isinstance` 和 "
":func:`issubclass` 不应该和类型一起使用。"

#: ../../library/typing.rst:840
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default type variables are invariant.  Alternatively, a type "
"variable may specify an upper bound using ``bound=<type>``. This means that "
"an actual type substituted (explicitly or implicitly) for the type variable "
"must be a subclass of the boundary type, see :pep:`484`."
msgstr ""

#: ../../library/typing.rst:850
msgid ""
"``AnyStr`` is a type variable defined as ``AnyStr = TypeVar('AnyStr', str, "
"bytes)``."
msgstr ""

#: ../../library/typing.rst:853
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr ""

#: ../../library/typing.rst:865
msgid ""
"Base class for protocol classes. Protocol classes are defined like this::"
msgstr ""

#: ../../library/typing.rst:871
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""

#: ../../library/typing.rst:883
msgid ""
"See :pep:`544` for details. Protocol classes decorated with "
":func:`runtime_checkable` (described later) act as simple-minded runtime "
"protocols that check only the presence of given attributes, ignoring their "
"type signatures."
msgstr ""

#: ../../library/typing.rst:888
msgid "Protocol classes can be generic, for example::"
msgstr ""

#: ../../library/typing.rst:898
msgid "Mark a protocol class as a runtime protocol."
msgstr ""

#: ../../library/typing.rst:900
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`Iterable`.  For example::"
msgstr ""

#: ../../library/typing.rst:913
msgid ""
":func:`runtime_checkable` will check only the presence of the required "
"methods, not their type signatures! For example, :class:`builtins.complex "
"<complex>` implements :func:`__float__`, therefore it passes an "
":func:`issubclass` check against :class:`SupportsFloat`. However, the "
"``complex.__float__`` method exists only to raise a :class:`TypeError` with "
"a more informative message."
msgstr ""

#: ../../library/typing.rst:922
msgid "Other special directives"
msgstr ""

#: ../../library/typing.rst:924
msgid ""
"These are not used in annotations. They are building blocks for declaring "
"types."
msgstr ""

#: ../../library/typing.rst:928
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ""

#: ../../library/typing.rst:936
msgid "This is equivalent to::"
msgstr "这相当于::"

#: ../../library/typing.rst:940
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""

#: ../../library/typing.rst:949
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""

#: ../../library/typing.rst:951
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict"
" that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute both of which are part of the namedtuple API.)"
msgstr ""

#: ../../library/typing.rst:957
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr ""

#: ../../library/typing.rst:967
msgid "Backward-compatible usage::"
msgstr ""

#: ../../library/typing.rst:971
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ""

#: ../../library/typing.rst:974
msgid "Added support for default values, methods, and docstrings."
msgstr ""

#: ../../library/typing.rst:977
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""

#: ../../library/typing.rst:981
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""

#: ../../library/typing.rst:987
msgid ""
"A helper function to indicate a distinct type to a typechecker, see "
":ref:`distinct`. At runtime it returns a function that returns its argument."
" Usage::"
msgstr ""

#: ../../library/typing.rst:998
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""

#: ../../library/typing.rst:1001
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""

#: ../../library/typing.rst:1017
msgid ""
"The type info for introspection can be accessed via "
"``Point2D.__annotations__`` and ``Point2D.__total__``.  To allow using this "
"feature with older versions of Python that do not support :pep:`526`, "
"``TypedDict`` supports two additional equivalent syntactic forms::"
msgstr ""

#: ../../library/typing.rst:1025
msgid ""
"By default, all keys must be present in a TypedDict. It is possible to "
"override this by specifying totality. Usage::"
msgstr ""

#: ../../library/typing.rst:1033
msgid ""
"This means that a point2D TypedDict can have any of the keys omitted. A type"
" checker is only expected to support a literal False or True as the value of"
" the total argument. True is the default, and makes all items defined in the"
" class body be required."
msgstr ""

#: ../../library/typing.rst:1038
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""

#: ../../library/typing.rst:1043
msgid "Generic concrete collections"
msgstr ""

#: ../../library/typing.rst:1046
msgid "Corresponding to built-in types"
msgstr ""

#: ../../library/typing.rst:1050
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ""
":class:`dict` 的泛型版本。对标注返回类型比较有用。如果要标注参数的话，使用如 :class:`Mapping` "
"的抽象容器类型是更好的选择。"

#: ../../library/typing.rst:1054
msgid "This type can be used as follows::"
msgstr "这个类型可以这样使用::"

#: ../../library/typing.rst:1059
msgid ":class:`builtins.dict <dict>` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1064
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ""

#: ../../library/typing.rst:1069
msgid "This type may be used as follows::"
msgstr "这个类型可以这样用:"

#: ../../library/typing.rst:1079
msgid ":class:`builtins.list <list>` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1084
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""

#: ../../library/typing.rst:1088
msgid ":class:`builtins.set <set>` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1093
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ""

#: ../../library/typing.rst:1095
msgid ""
":class:`builtins.frozenset <frozenset>` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1098
msgid ":data:`Tuple` is a special form."
msgstr ""

#: ../../library/typing.rst:1101
msgid "Corresponding to types in :mod:`collections`"
msgstr ""

#: ../../library/typing.rst:1105
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ":class:`collections.defaultdict` 的泛型版本。"

#: ../../library/typing.rst:1109
msgid ":class:`collections.defaultdict` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1114
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ":class:`collections.OrderedDict` 的泛型版本。"

#: ../../library/typing.rst:1118
msgid ":class:`collections.OrderedDict` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1123
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ":class:`collections.ChainMap` 的泛型版本。"

#: ../../library/typing.rst:1128
msgid ":class:`collections.ChainMap` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1133
msgid "A generic version of :class:`collections.Counter`."
msgstr ":class:`collections.Counter` 的泛型版本。"

#: ../../library/typing.rst:1138
msgid ":class:`collections.Counter` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1143
msgid "A generic version of :class:`collections.deque`."
msgstr ":class:`collections.deque` 的泛型版本。"

#: ../../library/typing.rst:1148
msgid ":class:`collections.deque` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1152
msgid "Other concrete types"
msgstr ""

#: ../../library/typing.rst:1158
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`. These types are also in the ``typing.io`` namespace."
msgstr ""

#: ../../library/typing.rst:1166
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``. These types are "
"also in the ``typing.re`` namespace."
msgstr ""

#: ../../library/typing.rst:1173
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See "
":pep:`585`."
msgstr ""

#: ../../library/typing.rst:1178
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""

#: ../../library/typing.rst:1182
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""

#: ../../library/typing.rst:1191
msgid "Abstract Base Classes"
msgstr ""

#: ../../library/typing.rst:1194
msgid "Corresponding to collections in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:1198
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ":class:`collections.abc.Set`  的泛型版本。"

#: ../../library/typing.rst:1200
msgid ":class:`collections.abc.Set` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1205
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr ":class:`collections.abc.ByteString` 的泛型版本。"

#: ../../library/typing.rst:1207
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and "
":class:`memoryview` of byte sequences."
msgstr ""

#: ../../library/typing.rst:1210
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr ""

#: ../../library/typing.rst:1213
msgid ""
":class:`collections.abc.ByteString` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1218
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ":class:`collections.abc.Collection` 的泛型版本。"

#: ../../library/typing.rst:1222
msgid ""
":class:`collections.abc.Collection` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1227
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ":class:`collections.abc.Container` 的泛型版本。"

#: ../../library/typing.rst:1229
msgid ""
":class:`collections.abc.Container` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1234
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ":class:`collections.abc.ItemsView` 的泛型版本。"

#: ../../library/typing.rst:1236
msgid ""
":class:`collections.abc.ItemsView` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1241
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ":class:`collections.abc.KeysView` 的泛型版本。"

#: ../../library/typing.rst:1243
msgid ":class:`collections.abc.KeysView` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1248
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used"
" as follows::"
msgstr ":class:`collections.abc.Mapping` 的泛型版本。这个类型可以如下使用::"

#: ../../library/typing.rst:1254
msgid ":class:`collections.abc.Mapping` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1259
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ":class:`collections.abc.MappingView` 的泛型版本。"

#: ../../library/typing.rst:1261
msgid ""
":class:`collections.abc.MappingView` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1266
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ":class:`collections.abc.MutableMapping` 的泛型版本。"

#: ../../library/typing.rst:1268
msgid ""
":class:`collections.abc.MutableMapping` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1273
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ":class:`collections.abc.MutableSequence` 的泛型版本。"

#: ../../library/typing.rst:1275
msgid ""
":class:`collections.abc.MutableSequence` now supports ``[]``. See "
":pep:`585`."
msgstr ""

#: ../../library/typing.rst:1280
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ":class:`collections.abc.MutableSet` 的泛型版本。"

#: ../../library/typing.rst:1282
msgid ""
":class:`collections.abc.MutableSet` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1287
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ":class:`collections.abc.Sequence` 的泛型版本。"

#: ../../library/typing.rst:1289
msgid ":class:`collections.abc.Sequence` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1294
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ":class:`collections.abc.ValuesView` 的泛型版本。"

#: ../../library/typing.rst:1296
msgid ""
":class:`collections.abc.ValuesView` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1300
msgid "Corresponding to other types in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:1304
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ":class:`collections.abc.Iterable` 的泛型版本。"

#: ../../library/typing.rst:1306
msgid ":class:`collections.abc.Iterable` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1311
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ":class:`collections.abc.Iterator` 的泛型版本。"

#: ../../library/typing.rst:1313
msgid ":class:`collections.abc.Iterator` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1318
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""

#: ../../library/typing.rst:1327
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""

#: ../../library/typing.rst:1331
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:1339
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:1347
msgid ""
":class:`collections.abc.Generator` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1352
msgid "An alias to :class:`collections.abc.Hashable`"
msgstr ":class:`collections.abc.Hashable` 的别名。"

#: ../../library/typing.rst:1356
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ":class:`collections.abc.Reversible` 的泛型版本。"

#: ../../library/typing.rst:1358
msgid ""
":class:`collections.abc.Reversible` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1363
msgid "An alias to :class:`collections.abc.Sized`"
msgstr ":class:`collections.abc.Sized` 的别名。"

#: ../../library/typing.rst:1366
msgid "Asynchronous programming"
msgstr ""

#: ../../library/typing.rst:1370
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""

#: ../../library/typing.rst:1383
msgid ""
":class:`collections.abc.Coroutine` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1388
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""

#: ../../library/typing.rst:1397
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""

#: ../../library/typing.rst:1401
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""

#: ../../library/typing.rst:1409
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""

#: ../../library/typing.rst:1419
msgid ""
":class:`collections.abc.AsyncGenerator` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1424
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr ":class:`collections.abc.AsyncIterable` 的泛型版本。"

#: ../../library/typing.rst:1428
msgid ""
":class:`collections.abc.AsyncIterable` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1433
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ":class:`collections.abc.AsyncIterator` 的泛型版本。"

#: ../../library/typing.rst:1437
msgid ""
":class:`collections.abc.AsyncIterator` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1442
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ":class:`collections.abc.Awaitable` 的泛型版本。"

#: ../../library/typing.rst:1446
msgid ""
":class:`collections.abc.Awaitable` now supports ``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1451
msgid "Context manager types"
msgstr ""

#: ../../library/typing.rst:1455
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ":class:`contextlib.AbstractContextManager` 的泛型版本。"

#: ../../library/typing.rst:1460
msgid ""
":class:`collections.contextlib.AbstractContextManager` now supports ``[]``. "
"See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1465
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ":class:`contextlib.AbstractAsyncContextManager` 的泛型版本。"

#: ../../library/typing.rst:1470
msgid ""
":class:`collections.contextlib.AbstractAsyncContextManager` now supports "
"``[]``. See :pep:`585`."
msgstr ""

#: ../../library/typing.rst:1474
msgid "Protocols"
msgstr "协议"

#: ../../library/typing.rst:1476
msgid "These protocols are decorated with :func:`runtime_checkable`."
msgstr ""

#: ../../library/typing.rst:1480
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""

#: ../../library/typing.rst:1485
msgid "An ABC with one abstract method ``__bytes__``."
msgstr ""

#: ../../library/typing.rst:1489
msgid "An ABC with one abstract method ``__complex__``."
msgstr ""

#: ../../library/typing.rst:1493
msgid "An ABC with one abstract method ``__float__``."
msgstr ""

#: ../../library/typing.rst:1497
msgid "An ABC with one abstract method ``__index__``."
msgstr ""

#: ../../library/typing.rst:1503
msgid "An ABC with one abstract method ``__int__``."
msgstr ""

#: ../../library/typing.rst:1507
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""

#: ../../library/typing.rst:1511
msgid "Functions and decorators"
msgstr ""

#: ../../library/typing.rst:1515
msgid "Cast a value to a type."
msgstr ""

#: ../../library/typing.rst:1517
msgid ""
"This returns the value unchanged.  To the type checker this signals that the"
" return value has the designated type, but at runtime we intentionally don't"
" check anything (we want this to be as fast as possible)."
msgstr ""

#: ../../library/typing.rst:1524
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one "
"non-``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""

#: ../../library/typing.rst:1548
msgid "See :pep:`484` for details and comparison with other typing semantics."
msgstr ""

#: ../../library/typing.rst:1552
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot be"
" overridden, and the decorated class cannot be subclassed. For example::"
msgstr ""

#: ../../library/typing.rst:1577
msgid "Decorator to indicate that annotations are not type hints."
msgstr "用于指明标注不是类型提示的装饰器。"

#: ../../library/typing.rst:1579
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies"
" recursively to all methods defined in that class (but not to methods "
"defined in its superclasses or subclasses)."
msgstr ""
"此 :term:`decorator` "
"装饰器生效于类或函数上。如果作用于类上的话，它会递归地作用于这个类的所定义的所有方法上（但是对于超类或子类所定义的方法不会生效）。"

#: ../../library/typing.rst:1583
msgid "This mutates the function(s) in place."
msgstr "此方法会就地地修改函数。"

#: ../../library/typing.rst:1587
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "使其它装饰器起到 :func:`no_type_check` 效果的装饰器。"

#: ../../library/typing.rst:1589
msgid ""
"This wraps the decorator with something that wraps the decorated function in"
" :func:`no_type_check`."
msgstr ""

#: ../../library/typing.rst:1594
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr "标记一个类或函数在运行时内不可用的装饰器。"

#: ../../library/typing.rst:1596
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""

#: ../../library/typing.rst:1607
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""

#: ../../library/typing.rst:1611
msgid "Introspection helpers"
msgstr ""

#: ../../library/typing.rst:1615
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr "返回一个字典，字典内含有函数、方法、模块或类对象的类型提示。"

#: ../../library/typing.rst:1618
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. If necessary, ``Optional[t]`` is "
"added for function and method annotations if a default value equal to "
"``None`` is set. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""

#: ../../library/typing.rst:1626
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example::"
msgstr ""

#: ../../library/typing.rst:1639
msgid "Added ``include_extras`` parameter as part of :pep:`593`."
msgstr ""

#: ../../library/typing.rst:1645
msgid ""
"Provide basic introspection for generic types and special typing forms."
msgstr ""

#: ../../library/typing.rst:1647
msgid ""
"For a typing object of the form ``X[Y, Z, ...]`` these functions return "
"``X`` and ``(Y, Z, ...)``. If ``X`` is a generic alias for a builtin or "
":mod:`collections` class, it gets normalized to the original class. For "
"unsupported objects return ``None`` and ``()`` correspondingly. Examples::"
msgstr ""

#: ../../library/typing.rst:1663
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

#: ../../library/typing.rst:1669
msgid "Constant"
msgstr "常数"

#: ../../library/typing.rst:1673
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr ""

#: ../../library/typing.rst:1682
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""

#: ../../library/typing.rst:1689
msgid ""
"If ``from __future__ import annotations`` is used in Python 3.7 or later, "
"annotations are not evaluated at function definition time. Instead, the are "
"stored as strings in ``__annotations__``, This makes it unnecessary to use "
"quotes around the annotation. (see :pep:`563`)."
msgstr ""
