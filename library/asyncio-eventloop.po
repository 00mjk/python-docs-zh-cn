# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# cdarlint <cdarling@126.com>, 2020
# Shengjing Zhu <zsj950618@gmail.com>, 2020
# 林行众 <linxzh1989@gmail.com>, 2020
# ppcfish <ppcfish@gmail.com>, 2020
# Pan Felix <tinylambda@gmail.com>, 2020
# walkinrain <walkinrain2008@163.com>, 2020
# nick <2330458484@qq.com>, 2020
# MuSheng Chen <sheng.2179@gmail.com>, 2020
# Freesand Leo <yuqinju@163.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-23 14:18+0000\n"
"PO-Revision-Date: 2020-05-30 11:56+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2020\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-eventloop.rst:6
msgid "Event Loop"
msgstr "事件循环"

#: ../../library/asyncio-eventloop.rst:8
msgid ""
"**Source code:** :source:`Lib/asyncio/events.py`, "
":source:`Lib/asyncio/base_events.py`"
msgstr ""
"**源代码:** :source:`Lib/asyncio/events.py`, "
":source:`Lib/asyncio/base_events.py`"

#: ../../library/asyncio-eventloop.rst:14
msgid "Preface"
msgstr "前言"

#: ../../library/asyncio-eventloop.rst:15
msgid ""
"The event loop is the core of every asyncio application. Event loops run "
"asynchronous tasks and callbacks, perform network IO operations, and run "
"subprocesses."
msgstr "事件循环是每个 asyncio 应用的核心。 事件循环会运行异步任务和回调，执行网络 IO 操作，以及运行子进程。"

#: ../../library/asyncio-eventloop.rst:19
msgid ""
"Application developers should typically use the high-level asyncio "
"functions, such as :func:`asyncio.run`, and should rarely need to reference "
"the loop object or call its methods.  This section is intended mostly for "
"authors of lower-level code, libraries, and frameworks, who need finer "
"control over the event loop behavior."
msgstr ""
"应用开发者通常应当使用高层级的 asyncio 函数，例如 :func:`asyncio.run`，应当很少有必要引用循环对象或调用其方法。 "
"本节所针对的主要是低层级代码、库和框架的编写者，他们需要更细致地控制事件循环行为。"

#: ../../library/asyncio-eventloop.rst:26
msgid "Obtaining the Event Loop"
msgstr "获取事件循环"

#: ../../library/asyncio-eventloop.rst:27
msgid ""
"The following low-level functions can be used to get, set, or create an "
"event loop:"
msgstr "以下低层级函数可被用于获取、设置或创建事件循环:"

#: ../../library/asyncio-eventloop.rst:32
msgid "Return the running event loop in the current OS thread."
msgstr "返回当前 OS 线程中正在运行的事件循环。"

#: ../../library/asyncio-eventloop.rst:34
msgid ""
"If there is no running event loop a :exc:`RuntimeError` is raised. This "
"function can only be called from a coroutine or a callback."
msgstr "如果没有正在运行的事件循环则会引发 :exc:`RuntimeError`。 此函数只能由协程或回调来调用。"

#: ../../library/asyncio-eventloop.rst:41
msgid "Get the current event loop."
msgstr "获取当前事件循环。"

#: ../../library/asyncio-eventloop.rst:43
msgid ""
"If there is no current event loop set in the current OS thread, the OS "
"thread is main, and :func:`set_event_loop` has not yet been called, asyncio "
"will create a new event loop and set it as the current one."
msgstr ""
"如果当前 OS 线程没有设置当前事件循环，该 OS 线程为主线程，并且 :func:`set_event_loop` 还没有被调用，则 asyncio "
"将创建一个新的事件循环并将其设为当前事件循环。"

#: ../../library/asyncio-eventloop.rst:48
msgid ""
"Because this function has rather complex behavior (especially when custom "
"event loop policies are in use), using the :func:`get_running_loop` function"
" is preferred to :func:`get_event_loop` in coroutines and callbacks."
msgstr ""
"由于此函数具有相当复杂的行为（特别是在使用了自定义事件循环策略的时候），更推荐在协程和回调中使用 :func:`get_running_loop` "
"函数而非 :func:`get_event_loop`。"

#: ../../library/asyncio-eventloop.rst:53
msgid ""
"Consider also using the :func:`asyncio.run` function instead of using lower "
"level functions to manually create and close an event loop."
msgstr "应该考虑使用 :func:`asyncio.run` 函数而非使用低层级函数来手动创建和关闭事件循环。"

#: ../../library/asyncio-eventloop.rst:58
msgid "Set *loop* as a current event loop for the current OS thread."
msgstr "将 *loop* 设置为当前 OS 线程的当前事件循环。"

#: ../../library/asyncio-eventloop.rst:62
msgid "Create a new event loop object."
msgstr "创建一个新的事件循环。"

#: ../../library/asyncio-eventloop.rst:64
msgid ""
"Note that the behaviour of :func:`get_event_loop`, :func:`set_event_loop`, "
"and :func:`new_event_loop` functions can be altered by :ref:`setting a "
"custom event loop policy <asyncio-policies>`."
msgstr ""
"请注意 :func:`get_event_loop`, :func:`set_event_loop` 以及 :func:`new_event_loop`"
" 函数的行为可以通过 :ref:`设置自定义事件循环策略 <asyncio-policies>` 来改变。"

#: ../../library/asyncio-eventloop.rst:70
msgid "Contents"
msgstr "目录"

#: ../../library/asyncio-eventloop.rst:71
msgid "This documentation page contains the following sections:"
msgstr "本文档包含下列小节:"

#: ../../library/asyncio-eventloop.rst:73
msgid ""
"The `Event Loop Methods`_ section is the reference documentation of the "
"event loop APIs;"
msgstr "`事件循环方法集`_ 章节是事件循环APIs的参考文档；"

#: ../../library/asyncio-eventloop.rst:76
msgid ""
"The `Callback Handles`_ section documents the :class:`Handle` and "
":class:`TimerHandle` instances which are returned from scheduling methods "
"such as :meth:`loop.call_soon` and :meth:`loop.call_later`;"
msgstr ""
"`回调处理`_ 章节是从调度方法 例如 :meth:`loop.call_soon`  和 :meth:`loop.call_later` 中返回 "
":class:`Handle` 和 :class:`TimerHandle` 实例的文档。"

#: ../../library/asyncio-eventloop.rst:80
msgid ""
"The `Server Objects`_ section documents types returned from event loop "
"methods like :meth:`loop.create_server`;"
msgstr "`Server Objects`_ 章节记录了从事件循环方法返回的类型，比如 :meth:`loop.create_server` ；"

#: ../../library/asyncio-eventloop.rst:83
msgid ""
"The `Event Loop Implementations`_ section documents the "
":class:`SelectorEventLoop` and :class:`ProactorEventLoop` classes;"
msgstr ""
"`Event Loop Implementations`_ 章节记录了 :class:`SelectorEventLoop` 和 "
":class:`ProactorEventLoop` 类；"

#: ../../library/asyncio-eventloop.rst:86
msgid ""
"The `Examples`_ section showcases how to work with some event loop APIs."
msgstr "`Examples`_ 章节展示了如何使用某些事件循环API。"

#: ../../library/asyncio-eventloop.rst:93
msgid "Event Loop Methods"
msgstr "事件循环方法集"

#: ../../library/asyncio-eventloop.rst:95
msgid "Event loops have **low-level** APIs for the following:"
msgstr "事件循环有下列 **低级** APIs："

#: ../../library/asyncio-eventloop.rst:103
msgid "Running and stopping the loop"
msgstr "运行和停止循环"

#: ../../library/asyncio-eventloop.rst:107
msgid "Run until the *future* (an instance of :class:`Future`) has completed."
msgstr "运行直到 *future* (  :class:`Future` 的实例 ) 被完成。"

#: ../../library/asyncio-eventloop.rst:110
msgid ""
"If the argument is a :ref:`coroutine object <coroutine>` it is implicitly "
"scheduled to run as a :class:`asyncio.Task`."
msgstr ""
"如果参数是 :ref:`coroutine object <coroutine>` ，将被隐式调度为 :class:`asyncio.Task` "
"来运行。"

#: ../../library/asyncio-eventloop.rst:113
msgid "Return the Future's result or raise its exception."
msgstr "返回 Future 的结果 或者引发相关异常。"

#: ../../library/asyncio-eventloop.rst:117
msgid "Run the event loop until :meth:`stop` is called."
msgstr "运行事件循环直到 :meth:`stop` 被调用。"

#: ../../library/asyncio-eventloop.rst:119
msgid ""
"If :meth:`stop` is called before :meth:`run_forever()` is called, the loop "
"will poll the I/O selector once with a timeout of zero, run all callbacks "
"scheduled in response to I/O events (and those that were already scheduled),"
" and then exit."
msgstr ""
"如果 :meth:`stop` 在调用 :meth:`run_forever()` 之前被调用，循环将轮询一次 I/O "
"选择器并设置超时为零，再运行所有已加入计划任务的回调来响应 I/O 事件（以及已加入计划任务的事件），然后退出。"

#: ../../library/asyncio-eventloop.rst:124
msgid ""
"If :meth:`stop` is called while :meth:`run_forever` is running, the loop "
"will run the current batch of callbacks and then exit. Note that new "
"callbacks scheduled by callbacks will not run in this case; instead, they "
"will run the next time :meth:`run_forever` or :meth:`run_until_complete` is "
"called."
msgstr ""
"如果 :meth:`stop` 在 :meth:`run_forever` 运行期间被调用，循环将运行当前批次的回调然后退出。 "
"请注意在此情况下由回调加入计划任务的新回调将不会运行；它们将会在下次 :meth:`run_forever` 或 "
":meth:`run_until_complete` 被调用时运行。"

#: ../../library/asyncio-eventloop.rst:132
msgid "Stop the event loop."
msgstr "停止事件循环。"

#: ../../library/asyncio-eventloop.rst:136
msgid "Return ``True`` if the event loop is currently running."
msgstr "返回 ``True`` 如果事件循环当前正在运行。"

#: ../../library/asyncio-eventloop.rst:140
msgid "Return ``True`` if the event loop was closed."
msgstr "如果事件循环已经被关闭，返回 ``True`` 。"

#: ../../library/asyncio-eventloop.rst:144
msgid "Close the event loop."
msgstr "关闭事件循环。"

#: ../../library/asyncio-eventloop.rst:146
msgid ""
"The loop must not be running when this function is called. Any pending "
"callbacks will be discarded."
msgstr "当这个函数被调用的时候，循环必须处于非运行状态。pending状态的回调将被丢弃。"

#: ../../library/asyncio-eventloop.rst:149
msgid ""
"This method clears all queues and shuts down the executor, but does not wait"
" for the executor to finish."
msgstr "此方法清除所有的队列并立即关闭执行器，不会等待执行器完成。"

#: ../../library/asyncio-eventloop.rst:152
msgid ""
"This method is idempotent and irreversible.  No other methods should be "
"called after the event loop is closed."
msgstr "这个方法是幂等的和不可逆的。事件循环关闭后，不应调用其他方法。"

#: ../../library/asyncio-eventloop.rst:157
msgid ""
"Schedule all currently open :term:`asynchronous generator` objects to close "
"with an :meth:`~agen.aclose()` call.  After calling this method, the event "
"loop will issue a warning if a new asynchronous generator is iterated. This "
"should be used to reliably finalize all scheduled asynchronous generators."
msgstr ""
"安排所有当前打开的 :term:`asynchronous generator` 对象通过 :meth:`~agen.aclose()` 调用来关闭。 "
"在调用此方法后，如果有新的异步生成器被迭代事件循环将会发出警告。 这应当被用来可靠地完成所有已加入计划任务的异步生成器。"

#: ../../library/asyncio-eventloop.rst:163
msgid ""
"Note that there is no need to call this function when :func:`asyncio.run` is"
" used."
msgstr "运行请注意，当使用 :func:`asyncio.run` 时，无需调用此函数。"

#: ../../library/asyncio-eventloop.rst:166
#: ../../library/asyncio-eventloop.rst:1062
#: ../../library/asyncio-eventloop.rst:1444
msgid "Example::"
msgstr "示例::"

#: ../../library/asyncio-eventloop.rst:178
msgid "Scheduling callbacks"
msgstr "调度回调"

#: ../../library/asyncio-eventloop.rst:182
msgid ""
"Schedule the *callback* :term:`callback` to be called with *args* arguments "
"at the next iteration of the event loop."
msgstr "安排 *callback* :term:`callback` 在事件循环的下一次迭代时附带 *args* 参数被调用。"

#: ../../library/asyncio-eventloop.rst:185
msgid ""
"Callbacks are called in the order in which they are registered. Each "
"callback will be called exactly once."
msgstr "回调按其注册顺序被调用。每个回调仅被调用一次。"

#: ../../library/asyncio-eventloop.rst:188
#: ../../library/asyncio-eventloop.rst:251
msgid ""
"An optional keyword-only *context* argument allows specifying a custom "
":class:`contextvars.Context` for the *callback* to run in. The current "
"context is used when no *context* is provided."
msgstr ""
"可选键值类的参数 *context* 允许 *callback* 运行在一个指定的自定义 :class:`contextvars.Context` "
"对象中。如果没有提供 *context* ，则使用当前上下文。"

#: ../../library/asyncio-eventloop.rst:192
msgid ""
"An instance of :class:`asyncio.Handle` is returned, which can be used later "
"to cancel the callback."
msgstr "返回一个能用来取消回调的 :class:`asyncio.Handle` 实例。"

#: ../../library/asyncio-eventloop.rst:195
msgid "This method is not thread-safe."
msgstr "这个方法不是线程安全的。"

#: ../../library/asyncio-eventloop.rst:199
msgid ""
"A thread-safe variant of :meth:`call_soon`.  Must be used to schedule "
"callbacks *from another thread*."
msgstr ":meth:`call_soon` 的线程安全变体。必须被用于安排 *来自其他线程* 的回调。"

#: ../../library/asyncio-eventloop.rst:202
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""
"参见 :ref:`concurrency and multithreading <asyncio-multithreading>` 部分的文档。"

#: ../../library/asyncio-eventloop.rst:205
#: ../../library/asyncio-eventloop.rst:255
#: ../../library/asyncio-eventloop.rst:275
msgid ""
"The *context* keyword-only parameter was added. See :pep:`567` for more "
"details."
msgstr "加入键值类形参  *context*。请参阅 :pep:`567` 查看更多细节。"

#: ../../library/asyncio-eventloop.rst:213
msgid ""
"Most :mod:`asyncio` scheduling functions don't allow passing keyword "
"arguments.  To do that, use :func:`functools.partial`::"
msgstr "大多数 :mod:`asyncio` 的调度函数不让传递关键字参数。为此，请使用 :func:`functools.partial` ："

#: ../../library/asyncio-eventloop.rst:220
msgid ""
"Using partial objects is usually more convenient than using lambdas, as "
"asyncio can render partial objects better in debug and error messages."
msgstr "使用 partial 对象通常比使用lambda更方便，asyncio 在调试和错误消息中能更好的呈现 partial 对象。"

#: ../../library/asyncio-eventloop.rst:228
msgid "Scheduling delayed callbacks"
msgstr "调度延迟回调"

#: ../../library/asyncio-eventloop.rst:230
msgid ""
"Event loop provides mechanisms to schedule callback functions to be called "
"at some point in the future.  Event loop uses monotonic clocks to track "
"time."
msgstr "事件循环提供安排调度函数在将来某个时刻调用的机制。事件循环使用单调时钟来跟踪时间。"

#: ../../library/asyncio-eventloop.rst:237
msgid ""
"Schedule *callback* to be called after the given *delay* number of seconds "
"(can be either an int or a float)."
msgstr "安排 *callback* 在给定的 *delay* 秒（可以是 int 或者 float）后被调用。"

#: ../../library/asyncio-eventloop.rst:240
#: ../../library/asyncio-eventloop.rst:272
msgid ""
"An instance of :class:`asyncio.TimerHandle` is returned which can be used to"
" cancel the callback."
msgstr "返回一个 :class:`asyncio.TimerHandle` 实例，该实例能用于取消回调。"

#: ../../library/asyncio-eventloop.rst:243
msgid ""
"*callback* will be called exactly once.  If two callbacks are scheduled for "
"exactly the same time, the order in which they are called is undefined."
msgstr "*callback* 只被调用一次。如果两个回调被安排在同样的时间点，执行顺序未限定。"

#: ../../library/asyncio-eventloop.rst:247
msgid ""
"The optional positional *args* will be passed to the callback when it is "
"called. If you want the callback to be called with keyword arguments use "
":func:`functools.partial`."
msgstr ""
"可选的位置参数 *args* 在被调用的时候传递给  *callback*  。 如果你想把关键字参数传递给 *callback* ，请使用 "
":func:`functools.partial` 。"

#: ../../library/asyncio-eventloop.rst:259
msgid ""
"In Python 3.7 and earlier with the default event loop implementation, the "
"*delay* could not exceed one day. This has been fixed in Python 3.8."
msgstr "在 Python 3.7 和更早版本的默认事件循环实现中， *delay* 不能超过一天。 这在 Python 3.8 中已被修复。"

#: ../../library/asyncio-eventloop.rst:266
msgid ""
"Schedule *callback* to be called at the given absolute timestamp *when* (an "
"int or a float), using the same time reference as :meth:`loop.time`."
msgstr ""
"安排 *callback* 在给定的绝对时间戳的 *时间* （一个 int 或者 float）被调用，使用与 :meth:`loop.time` "
"同样的时间参考。"

#: ../../library/asyncio-eventloop.rst:270
msgid "This method's behavior is the same as :meth:`call_later`."
msgstr "本方法的行为和 :meth:`call_later` 方法相同。"

#: ../../library/asyncio-eventloop.rst:279
msgid ""
"In Python 3.7 and earlier with the default event loop implementation, the "
"difference between *when* and the current time could not exceed one day.  "
"This has been fixed in Python 3.8."
msgstr ""
"在 Python 3.7 和更早版本的默认事件循环实现中，*when* 和当前时间相差不能超过一天。 在这 Python 3.8 中已被修复。"

#: ../../library/asyncio-eventloop.rst:286
msgid ""
"Return the current time, as a :class:`float` value, according to the event "
"loop's internal monotonic clock."
msgstr "根据时间循环内部的单调时钟，返回当前时间， :class:`float` 值。"

#: ../../library/asyncio-eventloop.rst:290
msgid ""
"In Python 3.7 and earlier timeouts (relative *delay* or absolute *when*) "
"should not exceed one day.  This has been fixed in Python 3.8."
msgstr ""
"在 Python 3.7 和更早版本中超时 (相对的 *delay* 或绝对的 *when*) 不能超过一天。 这在 Python 3.8 中已被修复。"

#: ../../library/asyncio-eventloop.rst:296
msgid "The :func:`asyncio.sleep` function."
msgstr ":func:`asyncio.sleep` 函数。"

#: ../../library/asyncio-eventloop.rst:300
msgid "Creating Futures and Tasks"
msgstr "创建 Futures 和 Tasks"

#: ../../library/asyncio-eventloop.rst:304
msgid "Create an :class:`asyncio.Future` object attached to the event loop."
msgstr "创建一个附加到事件循环中的 :class:`asyncio.Future` 对象。"

#: ../../library/asyncio-eventloop.rst:306
msgid ""
"This is the preferred way to create Futures in asyncio. This lets third-"
"party event loops provide alternative implementations of the Future object "
"(with better performance or instrumentation)."
msgstr "这是在asyncio中创建Futures的首选方式。这让第三方事件循环可以提供Future 对象的替代实现(更好的性能或者功能)。"

#: ../../library/asyncio-eventloop.rst:314
msgid ""
"Schedule the execution of a :ref:`coroutine`. Return a :class:`Task` object."
msgstr "安排一个 :ref:`coroutine` 的执行。返回一个  :class:`Task`  对象。"

#: ../../library/asyncio-eventloop.rst:317
msgid ""
"Third-party event loops can use their own subclass of :class:`Task` for "
"interoperability. In this case, the result type is a subclass of "
":class:`Task`."
msgstr ""
"第三方的事件循环可以使用它们自己的 :class:`Task` 子类来满足互操作性。这种情况下结果类型是一个 :class:`Task` 的子类。"

#: ../../library/asyncio-eventloop.rst:321
msgid ""
"If the *name* argument is provided and not ``None``, it is set as the name "
"of the task using :meth:`Task.set_name`."
msgstr "如果提供了 *name* 参数且不为 ``None``，它会使用 :meth:`Task.set_name` 来设为任务的名称。"

#: ../../library/asyncio-eventloop.rst:324
msgid "Added the ``name`` parameter."
msgstr "添加了 ``name`` 形参。"

#: ../../library/asyncio-eventloop.rst:329
msgid "Set a task factory that will be used by :meth:`loop.create_task`."
msgstr "设置一个 task 工厂 ， 被用于  :meth:`loop.create_task` 。"

#: ../../library/asyncio-eventloop.rst:332
msgid ""
"If *factory* is ``None`` the default task factory will be set. Otherwise, "
"*factory* must be a *callable* with the signature matching ``(loop, coro)``,"
" where *loop* is a reference to the active event loop, and *coro* is a "
"coroutine object.  The callable must return a "
":class:`asyncio.Future`-compatible object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:340
msgid "Return a task factory or ``None`` if the default one is in use."
msgstr ""

#: ../../library/asyncio-eventloop.rst:344
msgid "Opening network connections"
msgstr "打开网络连接"

#: ../../library/asyncio-eventloop.rst:353
msgid ""
"Open a streaming transport connection to a given address specified by *host*"
" and *port*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:356
msgid ""
"The socket family can be either :py:data:`~socket.AF_INET` or "
":py:data:`~socket.AF_INET6` depending on *host* (or the *family* argument, "
"if provided)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:360
msgid "The socket type will be :py:data:`~socket.SOCK_STREAM`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:362
#: ../../library/asyncio-eventloop.rst:978
#: ../../library/asyncio-eventloop.rst:994
msgid ""
"*protocol_factory* must be a callable returning an :ref:`asyncio protocol "
"<asyncio-protocol>` implementation."
msgstr ""

#: ../../library/asyncio-eventloop.rst:365
msgid ""
"This method will try to establish the connection in the background. When "
"successful, it returns a ``(transport, protocol)`` pair."
msgstr "这个方法会尝试在后台创建连接。当创建成功，返回 ``(transport, protocol)`` 组合。"

#: ../../library/asyncio-eventloop.rst:368
msgid "The chronological synopsis of the underlying operation is as follows:"
msgstr "底层操作的大致的执行顺序是这样的："

#: ../../library/asyncio-eventloop.rst:370
msgid ""
"The connection is established and a :ref:`transport <asyncio-transport>` is "
"created for it."
msgstr ""

#: ../../library/asyncio-eventloop.rst:373
msgid ""
"*protocol_factory* is called without arguments and is expected to return a "
":ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: ../../library/asyncio-eventloop.rst:376
msgid ""
"The protocol instance is coupled with the transport by calling its "
":meth:`~BaseProtocol.connection_made` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:379
msgid "A ``(transport, protocol)`` tuple is returned on success."
msgstr "成功时返回一个 ``(transport, protocol)`` 元组。"

#: ../../library/asyncio-eventloop.rst:381
msgid ""
"The created transport is an implementation-dependent bidirectional stream."
msgstr "被创建的传输对象是一个实现相关的双向流。"

#: ../../library/asyncio-eventloop.rst:384
#: ../../library/asyncio-eventloop.rst:506
msgid "Other arguments:"
msgstr "其他参数："

#: ../../library/asyncio-eventloop.rst:386
msgid ""
"*ssl*: if given and not false, a SSL/TLS transport is created (by default a "
"plain TCP transport is created).  If *ssl* is a :class:`ssl.SSLContext` "
"object, this context is used to create the transport; if *ssl* is "
":const:`True`, a default context returned from "
":func:`ssl.create_default_context` is used."
msgstr ""

#: ../../library/asyncio-eventloop.rst:392
msgid ":ref:`SSL/TLS security considerations <ssl-security>`"
msgstr ":ref:`SSL/TLS security considerations <ssl-security>`"

#: ../../library/asyncio-eventloop.rst:394
msgid ""
"*server_hostname* sets or overrides the hostname that the target server's "
"certificate will be matched against.  Should only be passed if *ssl* is not "
"``None``.  By default the value of the *host* argument is used.  If *host* "
"is empty, there is no default and you must pass a value for "
"*server_hostname*.  If *server_hostname* is an empty string, hostname "
"matching is disabled (which is a serious security risk, allowing for "
"potential man-in-the-middle attacks)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:402
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to getaddrinfo() for *host* resolution. If given,"
" these should all be integers from the corresponding :mod:`socket` module "
"constants."
msgstr ""
"*family*, *proto*, *flags*  是可选的地址族、协议和标志，它们会被传递给 getaddrinfo() 来对 *host* "
"进行解析。如果要指定的话，这些都应该是来自于 :mod:`socket` 模块的对应常量。"

#: ../../library/asyncio-eventloop.rst:407
msgid ""
"*happy_eyeballs_delay*, if given, enables Happy Eyeballs for this "
"connection. It should be a floating-point number representing the amount of "
"time in seconds to wait for a connection attempt to complete, before "
"starting the next attempt in parallel. This is the \"Connection Attempt "
"Delay\" as defined in :rfc:`8305`. A sensible default value recommended by "
"the RFC is ``0.25`` (250 milliseconds)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:415
msgid ""
"*interleave* controls address reordering when a host name resolves to "
"multiple IP addresses. If ``0`` or unspecified, no reordering is done, and "
"addresses are tried in the order returned by :meth:`getaddrinfo`. If a "
"positive integer is specified, the addresses are interleaved by address "
"family, and the given integer is interpreted as \"First Address Family "
"Count\" as defined in :rfc:`8305`. The default is ``0`` if "
"*happy_eyeballs_delay* is not specified, and ``1`` if it is."
msgstr ""

#: ../../library/asyncio-eventloop.rst:424
msgid ""
"*sock*, if given, should be an existing, already connected "
":class:`socket.socket` object to be used by the transport. If *sock* is "
"given, none of *host*, *port*, *family*, *proto*, *flags*, "
"*happy_eyeballs_delay*, *interleave* and *local_addr* should be specified."
msgstr ""

#: ../../library/asyncio-eventloop.rst:430
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind"
" the socket to locally.  The *local_host* and *local_port* are looked up "
"using ``getaddrinfo()``, similarly to *host* and *port*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:434
#: ../../library/asyncio-eventloop.rst:787
msgid ""
"*ssl_handshake_timeout* is (for a TLS connection) the time in seconds to "
"wait for the TLS handshake to complete before aborting the connection. "
"``60.0`` seconds if ``None`` (default)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:440
msgid "Added the *happy_eyeballs_delay* and *interleave* parameters."
msgstr ""

#: ../../library/asyncio-eventloop.rst:442
msgid ""
"Happy Eyeballs Algorithm: Success with Dual-Stack Hosts. When a server's "
"IPv4 path and protocol are working, but the server's IPv6 path and protocol "
"are not working, a dual-stack client application experiences significant "
"connection delay compared to an IPv4-only client.  This is undesirable "
"because it causes the dual- stack client to have a worse user experience.  "
"This document specifies requirements for algorithms that reduce this user-"
"visible delay and provides an algorithm."
msgstr ""

#: ../../library/asyncio-eventloop.rst:451
msgid "For more information: https://tools.ietf.org/html/rfc6555"
msgstr ""

#: ../../library/asyncio-eventloop.rst:455
#: ../../library/asyncio-eventloop.rst:572
#: ../../library/asyncio-eventloop.rst:725
msgid "The *ssl_handshake_timeout* parameter."
msgstr "*ssl_handshake_timeout* 形参。"

#: ../../library/asyncio-eventloop.rst:459
#: ../../library/asyncio-eventloop.rst:655
msgid ""
"The socket option :py:data:`~socket.TCP_NODELAY` is set by default for all "
"TCP connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:464
#: ../../library/asyncio-eventloop.rst:660
msgid "Added support for SSL/TLS in :class:`ProactorEventLoop`."
msgstr ":class:`ProactorEventLoop` 类中添加 SSL/TLS 支持。"

#: ../../library/asyncio-eventloop.rst:468
msgid ""
"The :func:`open_connection` function is a high-level alternative API.  It "
"returns a pair of (:class:`StreamReader`, :class:`StreamWriter`) that can be"
" used directly in async/await code."
msgstr ""

#: ../../library/asyncio-eventloop.rst:479
msgid ""
"The parameter *reuse_address* is no longer supported, as using "
":py:data:`~sockets.SO_REUSEADDR` poses a significant security concern for "
"UDP. Explicitly passing ``reuse_address=True`` will raise an exception."
msgstr ""
"形参 *reuse_address* 已不再受支持，因为使用 :py:data:`~sockets.SO_REUSEADDR` 会对 UDP "
"造成显著的安全问题。 显式地传入 ``reuse_address=True`` 将会引发异常。"

#: ../../library/asyncio-eventloop.rst:483
msgid ""
"When multiple processes with differing UIDs assign sockets to an identical "
"UDP socket address with ``SO_REUSEADDR``, incoming packets can become "
"randomly distributed among the sockets."
msgstr ""

#: ../../library/asyncio-eventloop.rst:487
msgid ""
"For supported platforms, *reuse_port* can be used as a replacement for "
"similar functionality. With *reuse_port*, :py:data:`~sockets.SO_REUSEPORT` "
"is used instead, which specifically prevents processes with differing UIDs "
"from assigning sockets to the same socket address."
msgstr ""
"对于受支持的平台，*reuse_port* 可以被用作类似功能的替代。 通过 *reuse_port* 将改用 "
":py:data:`~sockets.SO_REUSEPORT`，它能够防止具有不同 UID 的进程将套接字赋给相同的套接字地址。"

#: ../../library/asyncio-eventloop.rst:493
msgid "Create a datagram connection."
msgstr "创建一个数据报连接。"

#: ../../library/asyncio-eventloop.rst:495
msgid ""
"The socket family can be either :py:data:`~socket.AF_INET`, "
":py:data:`~socket.AF_INET6`, or :py:data:`~socket.AF_UNIX`, depending on "
"*host* (or the *family* argument, if provided)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:499
msgid "The socket type will be :py:data:`~socket.SOCK_DGRAM`."
msgstr "socket类型将是 :py:data:`~socket.SOCK_DGRAM` 。"

#: ../../library/asyncio-eventloop.rst:501
#: ../../library/asyncio-eventloop.rst:597
#: ../../library/asyncio-eventloop.rst:708
msgid ""
"*protocol_factory* must be a callable returning a :ref:`protocol <asyncio-"
"protocol>` implementation."
msgstr ""

#: ../../library/asyncio-eventloop.rst:504
#: ../../library/asyncio-eventloop.rst:558
msgid "A tuple of ``(transport, protocol)`` is returned on success."
msgstr ""

#: ../../library/asyncio-eventloop.rst:508
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind"
" the socket to locally.  The *local_host* and *local_port* are looked up "
"using :meth:`getaddrinfo`."
msgstr ""
"*local_addr*，如果指定的话，就是一个 ``(local_host, local_port)`` 元组，用于在本地绑定套接字。 "
"*local_host* 和 *local_port* 是使用 :meth:`getaddrinfo` 来查找的。"

#: ../../library/asyncio-eventloop.rst:512
msgid ""
"*remote_addr*, if given, is a ``(remote_host, remote_port)`` tuple used to "
"connect the socket to a remote address.  The *remote_host* and *remote_port*"
" are looked up using :meth:`getaddrinfo`."
msgstr ""
"*remote_addr*，如果指定的话，就是一个 ``(remote_host, remote_port)`` "
"元组，用于同一个远程地址连接。*remote_host* 和 *remote_port* 是使用 :meth:`getaddrinfo` 来查找的。"

#: ../../library/asyncio-eventloop.rst:516
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to :meth:`getaddrinfo` for *host* resolution. If "
"given, these should all be integers from the corresponding :mod:`socket` "
"module constants."
msgstr ""
"*family*, *proto*, *flags* 是可选的地址族，协议和标志，其会被传递给 :meth:`getaddrinfo` 来完成 "
"*host* 的解析。如果要指定的话，这些都应该是来自于 :mod:`socket` 模块的对应常量。"

#: ../../library/asyncio-eventloop.rst:521
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same"
" port as other existing endpoints are bound to, so long as they all set this"
" flag when being created. This option is not supported on Windows and some "
"Unixes. If the :py:data:`~socket.SO_REUSEPORT` constant is not defined then "
"this capability is unsupported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:527
msgid ""
"*allow_broadcast* tells the kernel to allow this endpoint to send messages "
"to the broadcast address."
msgstr "*allow_broadcast* 告知内核允许此端点向广播地址发送消息。"

#: ../../library/asyncio-eventloop.rst:530
msgid ""
"*sock* can optionally be specified in order to use a preexisting, already "
"connected, :class:`socket.socket` object to be used by the transport. If "
"specified, *local_addr* and *remote_addr* should be omitted (must be "
":const:`None`)."
msgstr ""
"*sock* 可选择通过指定此值用于使用一个预先存在的，已经处于连接状态的 :class:`socket.socket` "
"对象，并将其提供给此传输对象使用。如果指定了这个值， *local_addr* 和 *remote_addr* 就应该被忽略 (必须为 "
":const:`None`)。"

#: ../../library/asyncio-eventloop.rst:535
msgid ""
"See :ref:`UDP echo client protocol <asyncio-udp-echo-client-protocol>` and "
":ref:`UDP echo server protocol <asyncio-udp-echo-server-protocol>` examples."
msgstr ""
"参见 :ref:`UDP echo 客户端协议 <asyncio-udp-echo-client-protocol>`  和 :ref:`UDP "
"echo 服务端协议 <asyncio-udp-echo-server-protocol>` 的例子。"

#: ../../library/asyncio-eventloop.rst:538
msgid ""
"The *family*, *proto*, *flags*, *reuse_address*, *reuse_port, "
"*allow_broadcast*, and *sock* parameters were added."
msgstr ""
"添加了 *family*, *proto*, *flags*, *reuse_address*, *reuse_port*, "
"*allow_broadcast* 和 *sock* 等参数。"

#: ../../library/asyncio-eventloop.rst:542
msgid ""
"The *reuse_address* parameter is no longer supported due to security "
"concerns."
msgstr ""

#: ../../library/asyncio-eventloop.rst:546
msgid "Added support for Windows."
msgstr "添加WIndows的支持。"

#: ../../library/asyncio-eventloop.rst:553
msgid "Create a Unix connection."
msgstr "创建Unix 连接"

#: ../../library/asyncio-eventloop.rst:555
msgid ""
"The socket family will be :py:data:`~socket.AF_UNIX`; socket type will be "
":py:data:`~socket.SOCK_STREAM`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:560
msgid ""
"*path* is the name of a Unix domain socket and is required, unless a *sock* "
"parameter is specified.  Abstract Unix sockets, :class:`str`, "
":class:`bytes`, and :class:`~pathlib.Path` paths are supported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:565
msgid ""
"See the documentation of the :meth:`loop.create_connection` method for "
"information about arguments to this method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:569
#: ../../library/asyncio-eventloop.rst:689
#: ../../library/asyncio-eventloop.rst:1045
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`可用性 <availability>`: Unix。"

#: ../../library/asyncio-eventloop.rst:576
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr "*path* 形参现在可以是 :term:`path-like object` 对象。"

#: ../../library/asyncio-eventloop.rst:580
msgid "Creating network servers"
msgstr "创建网络服务"

#: ../../library/asyncio-eventloop.rst:590
msgid ""
"Create a TCP server (socket type :data:`~socket.SOCK_STREAM`) listening on "
"*port* of the *host* address."
msgstr ""
"创建TCP服务 (socket 类型 :data:`~socket.SOCK_STREAM` ) 监听 *host* 地址的 *port* 端口。"

#: ../../library/asyncio-eventloop.rst:593
msgid "Returns a :class:`Server` object."
msgstr "返回一个 :class:`Server` 对象。"

#: ../../library/asyncio-eventloop.rst:595
msgid "Arguments:"
msgstr "参数："

#: ../../library/asyncio-eventloop.rst:600
msgid ""
"The *host* parameter can be set to several types which determine where the "
"server would be listening:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:603
msgid ""
"If *host* is a string, the TCP server is bound to a single network interface"
" specified by *host*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:606
msgid ""
"If *host* is a sequence of strings, the TCP server is bound to all network "
"interfaces specified by the sequence."
msgstr ""

#: ../../library/asyncio-eventloop.rst:609
msgid ""
"If *host* is an empty string or ``None``, all interfaces are assumed and a "
"list of multiple sockets will be returned (most likely one for IPv4 and "
"another one for IPv6)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:613
msgid ""
"*family* can be set to either :data:`socket.AF_INET` or "
":data:`~socket.AF_INET6` to force the socket to use IPv4 or IPv6. If not "
"set, the *family* will be determined from host name (defaults to "
":data:`~socket.AF_UNSPEC`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:618
msgid "*flags* is a bitmask for :meth:`getaddrinfo`."
msgstr "*flags* 是用于 :meth:`getaddrinfo` 的位掩码。"

#: ../../library/asyncio-eventloop.rst:620
msgid ""
"*sock* can optionally be specified in order to use a preexisting socket "
"object. If specified, *host* and *port* must not be specified."
msgstr ""

#: ../../library/asyncio-eventloop.rst:623
msgid ""
"*backlog* is the maximum number of queued connections passed to "
":meth:`~socket.socket.listen` (defaults to 100)."
msgstr "*backlog* 是传递给 :meth:`~socket.socket.listen` 的最大排队连接的数量（默认为100）。"

#: ../../library/asyncio-eventloop.rst:626
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` instance to enable TLS over "
"the accepted connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:629
msgid ""
"*reuse_address* tells the kernel to reuse a local socket in ``TIME_WAIT`` "
"state, without waiting for its natural timeout to expire. If not specified "
"will automatically be set to ``True`` on Unix."
msgstr ""

#: ../../library/asyncio-eventloop.rst:634
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same"
" port as other existing endpoints are bound to, so long as they all set this"
" flag when being created. This option is not supported on Windows."
msgstr ""
"*reuse_port* 告知内核，只要在创建的时候都设置了这个标志，就允许此端点绑定到其它端点列表所绑定的同样的端口上。这个选项在 Windows "
"上是不支持的。"

#: ../../library/asyncio-eventloop.rst:639
msgid ""
"*ssl_handshake_timeout* is (for a TLS server) the time in seconds to wait "
"for the TLS handshake to complete before aborting the connection. ``60.0`` "
"seconds if ``None`` (default)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:643
msgid ""
"*start_serving* set to ``True`` (the default) causes the created server to "
"start accepting connections immediately.  When set to ``False``, the user "
"should await on :meth:`Server.start_serving` or :meth:`Server.serve_forever`"
" to make the server to start accepting connections."
msgstr ""
"*start_serving* 设置成 ``True`` (默认值) 会导致创建server并立即开始接受连接。设置成 ``False`` "
"，用户需要等待 :meth:`Server.start_serving` 或者 :meth:`Server.serve_forever` "
"以使server开始接受连接。"

#: ../../library/asyncio-eventloop.rst:651
msgid "Added *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../../library/asyncio-eventloop.rst:664
msgid "The *host* parameter can be a sequence of strings."
msgstr ""

#: ../../library/asyncio-eventloop.rst:668
msgid ""
"The :func:`start_server` function is a higher-level alternative API that "
"returns a pair of :class:`StreamReader` and :class:`StreamWriter` that can "
"be used in an async/await code."
msgstr ""

#: ../../library/asyncio-eventloop.rst:677
msgid ""
"Similar to :meth:`loop.create_server` but works with the "
":py:data:`~socket.AF_UNIX` socket family."
msgstr ""

#: ../../library/asyncio-eventloop.rst:680
msgid ""
"*path* is the name of a Unix domain socket, and is required, unless a *sock*"
" argument is provided.  Abstract Unix sockets, :class:`str`, :class:`bytes`,"
" and :class:`~pathlib.Path` paths are supported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:685
msgid ""
"See the documentation of the :meth:`loop.create_server` method for "
"information about arguments to this method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:692
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr " *ssl_handshake_timeout* 和  *start_serving* 形参。"

#: ../../library/asyncio-eventloop.rst:696
msgid "The *path* parameter can now be a :class:`~pathlib.Path` object."
msgstr "*path* 形参现在可以是 :class:`~pathlib.Path` 对象。"

#: ../../library/asyncio-eventloop.rst:701
msgid "Wrap an already accepted connection into a transport/protocol pair."
msgstr ""

#: ../../library/asyncio-eventloop.rst:703
msgid ""
"This method can be used by servers that accept connections outside of "
"asyncio but that use asyncio to handle them."
msgstr ""

#: ../../library/asyncio-eventloop.rst:706
#: ../../library/asyncio-eventloop.rst:773
msgid "Parameters:"
msgstr "参数："

#: ../../library/asyncio-eventloop.rst:711
msgid ""
"*sock* is a preexisting socket object returned from :meth:`socket.accept "
"<socket.socket.accept>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:714
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` to enable SSL over the "
"accepted connections."
msgstr "*ssl* 可被设置为一个 :class:`~ssl.SSLContext` 以在接受的连接上启用 SSL。"

#: ../../library/asyncio-eventloop.rst:717
msgid ""
"*ssl_handshake_timeout* is (for an SSL connection) the time in seconds to "
"wait for the SSL handshake to complete before aborting the connection. "
"``60.0`` seconds if ``None`` (default)."
msgstr ""
"*ssl_handshake_timeout* 是(为一个SSL连接)在中止连接前，等待SSL握手完成的时间【单位秒】。如果为 ``None`` "
"(缺省) 则是 ``60.0`` 秒。"

#: ../../library/asyncio-eventloop.rst:721
msgid "Returns a ``(transport, protocol)`` pair."
msgstr "返回一个 ``(transport, protocol)`` 对。"

#: ../../library/asyncio-eventloop.rst:731
msgid "Transferring files"
msgstr "传输文件"

#: ../../library/asyncio-eventloop.rst:736
msgid ""
"Send a *file* over a *transport*.  Return the total number of bytes sent."
msgstr ""

#: ../../library/asyncio-eventloop.rst:739
msgid "The method uses high-performance :meth:`os.sendfile` if available."
msgstr "如果可用的化，该方法将使用高性能的 :meth:`os.sendfile` 。"

#: ../../library/asyncio-eventloop.rst:741
msgid "*file* must be a regular file object opened in binary mode."
msgstr "*file* 必须是个二进制模式打开的常规文件对象。"

#: ../../library/asyncio-eventloop.rst:743
#: ../../library/asyncio-eventloop.rst:933
msgid ""
"*offset* tells from where to start reading the file. If specified, *count* "
"is the total number of bytes to transmit as opposed to sending the file "
"until EOF is reached. File position is always updated, even when this method"
" raises an error, and :meth:`file.tell() <io.IOBase.tell>` can be used to "
"obtain the actual number of bytes sent."
msgstr ""

#: ../../library/asyncio-eventloop.rst:750
msgid ""
"*fallback* set to ``True`` makes asyncio to manually read and send the file "
"when the platform does not support the sendfile system call (e.g. Windows or"
" SSL socket on Unix)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:754
msgid ""
"Raise :exc:`SendfileNotAvailableError` if the system does not support the "
"*sendfile* syscall and *fallback* is ``False``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:761
msgid "TLS Upgrade"
msgstr "TLS 升级"

#: ../../library/asyncio-eventloop.rst:767
msgid "Upgrade an existing transport-based connection to TLS."
msgstr ""

#: ../../library/asyncio-eventloop.rst:769
msgid ""
"Return a new transport instance, that the *protocol* must start using "
"immediately after the *await*.  The *transport* instance passed to the "
"*start_tls* method should never be used again."
msgstr ""

#: ../../library/asyncio-eventloop.rst:775
msgid ""
"*transport* and *protocol* instances that methods like "
":meth:`~loop.create_server` and :meth:`~loop.create_connection` return."
msgstr ""

#: ../../library/asyncio-eventloop.rst:779
msgid "*sslcontext*: a configured instance of :class:`~ssl.SSLContext`."
msgstr "*sslcontext* ：一个已经配置好的 :class:`~ssl.SSLContext` 实例。"

#: ../../library/asyncio-eventloop.rst:781
msgid ""
"*server_side* pass ``True`` when a server-side connection is being upgraded "
"(like the one created by :meth:`~loop.create_server`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:784
msgid ""
"*server_hostname*: sets or overrides the host name that the target server's "
"certificate will be matched against."
msgstr "*server_hostname* ：设置或者覆盖目标服务器证书中相对应的主机名。"

#: ../../library/asyncio-eventloop.rst:795
msgid "Watching file descriptors"
msgstr "监控文件描述符"

#: ../../library/asyncio-eventloop.rst:799
msgid ""
"Start monitoring the *fd* file descriptor for read availability and invoke "
"*callback* with the specified arguments once *fd* is available for reading."
msgstr "开始监视 *fd* 文件描述符以获取读取的可用性，一旦 *fd* 可用于读取，使用指定的参数调用 *callback* 。"

#: ../../library/asyncio-eventloop.rst:805
msgid "Stop monitoring the *fd* file descriptor for read availability."
msgstr "停止对文件描述符 *fd* 读取可用性的监视。"

#: ../../library/asyncio-eventloop.rst:809
msgid ""
"Start monitoring the *fd* file descriptor for write availability and invoke "
"*callback* with the specified arguments once *fd* is available for writing."
msgstr "开始监视 *fd* 文件描述符的写入可用性，一旦 *fd* 可用于写入，使用指定的参数调用 *callback* 。"

#: ../../library/asyncio-eventloop.rst:813
#: ../../library/asyncio-eventloop.rst:1032
msgid ""
"Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-"
"keywords>` to *callback*."
msgstr ""
"使用 :func:`functools.partial` :ref:`传递关键字参数 <asyncio-pass-keywords>`  给 "
"*callback*."

#: ../../library/asyncio-eventloop.rst:818
msgid "Stop monitoring the *fd* file descriptor for write availability."
msgstr "停止对文件描述符 *fd* 的写入可用性监视。"

#: ../../library/asyncio-eventloop.rst:820
msgid ""
"See also :ref:`Platform Support <asyncio-platform-support>` section for some"
" limitations of these methods."
msgstr ""

#: ../../library/asyncio-eventloop.rst:825
msgid "Working with socket objects directly"
msgstr "直接使用 socket 对象"

#: ../../library/asyncio-eventloop.rst:827
msgid ""
"In general, protocol implementations that use transport-based APIs such as "
":meth:`loop.create_connection` and :meth:`loop.create_server` are faster "
"than implementations that work with sockets directly. However, there are "
"some use cases when performance is not critical, and working with "
":class:`~socket.socket` objects directly is more convenient."
msgstr ""

#: ../../library/asyncio-eventloop.rst:836
msgid ""
"Receive up to *nbytes* from *sock*.  Asynchronous version of "
":meth:`socket.recv() <socket.socket.recv>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:839
msgid "Return the received data as a bytes object."
msgstr "返回接收到的数据【bytes对象类型】。"

#: ../../library/asyncio-eventloop.rst:841
#: ../../library/asyncio-eventloop.rst:855
#: ../../library/asyncio-eventloop.rst:870
#: ../../library/asyncio-eventloop.rst:883
#: ../../library/asyncio-eventloop.rst:909
#: ../../library/asyncio-eventloop.rst:947
msgid "*sock* must be a non-blocking socket."
msgstr "*sock* 必须是个非阻塞socket。"

#: ../../library/asyncio-eventloop.rst:843
msgid ""
"Even though this method was always documented as a coroutine method, "
"releases before Python 3.7 returned a :class:`Future`. Since Python 3.7 this"
" is an ``async def`` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:850
msgid ""
"Receive data from *sock* into the *buf* buffer.  Modeled after the blocking "
":meth:`socket.recv_into() <socket.socket.recv_into>` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:853
msgid "Return the number of bytes written to the buffer."
msgstr "返回写入缓冲区的字节数。"

#: ../../library/asyncio-eventloop.rst:861
msgid ""
"Send *data* to the *sock* socket. Asynchronous version of "
":meth:`socket.sendall() <socket.socket.sendall>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:864
msgid ""
"This method continues to send to the socket until either all data in *data* "
"has been sent or an error occurs.  ``None`` is returned on success.  On "
"error, an exception is raised. Additionally, there is no way to determine "
"how much data, if any, was successfully processed by the receiving end of "
"the connection."
msgstr ""

#: ../../library/asyncio-eventloop.rst:872
msgid ""
"Even though the method was always documented as a coroutine method, before "
"Python 3.7 it returned an :class:`Future`. Since Python 3.7, this is an "
"``async def`` method."
msgstr ""
"虽然这个方法一直被标记为协程方法。但是，Python 3.7 之前，该方法返回 :class:`Future` ，从Python 3.7 "
"开始，这个方法是 ``async def`` 方法。"

#: ../../library/asyncio-eventloop.rst:879
msgid "Connect *sock* to a remote socket at *address*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:881
msgid ""
"Asynchronous version of :meth:`socket.connect() <socket.socket.connect>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:885
msgid ""
"``address`` no longer needs to be resolved.  ``sock_connect`` will try to "
"check if the *address* is already resolved by calling "
":func:`socket.inet_pton`.  If not, :meth:`loop.getaddrinfo` will be used to "
"resolve the *address*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:894
msgid ""
":meth:`loop.create_connection` and  :func:`asyncio.open_connection() "
"<open_connection>`."
msgstr ""
":meth:`loop.create_connection` 和  :func:`asyncio.open_connection() "
"<open_connection>` 。"

#: ../../library/asyncio-eventloop.rst:900
msgid ""
"Accept a connection.  Modeled after the blocking :meth:`socket.accept() "
"<socket.socket.accept>` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:903
msgid ""
"The socket must be bound to an address and listening for connections. The "
"return value is a pair ``(conn, address)`` where *conn* is a *new* socket "
"object usable to send and receive data on the connection, and *address* is "
"the address bound to the socket on the other end of the connection."
msgstr ""
"此 *scoket* 必须绑定到一个地址上并且监听连接。返回值是一个 ``(conn, address)`` 对，其中 *conn* 是一个 "
"*新*的套接字对象，用于在此连接上收发数据，*address* 是连接的另一端的套接字所绑定的地址。"

#: ../../library/asyncio-eventloop.rst:911
msgid ""
"Even though the method was always documented as a coroutine method, before "
"Python 3.7 it returned a :class:`Future`. Since Python 3.7, this is an "
"``async def`` method."
msgstr ""
"虽然这个方法一直被标记为协程方法。但是，Python 3.7 之前，该方法返回 :class:`Future` ，从Python 3.7 "
"开始，这个方法是 ``async def`` 方法。"

#: ../../library/asyncio-eventloop.rst:918
msgid ":meth:`loop.create_server` and :func:`start_server`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:923
msgid ""
"Send a file using high-performance :mod:`os.sendfile` if possible. Return "
"the total number of bytes sent."
msgstr ""

#: ../../library/asyncio-eventloop.rst:926
msgid ""
"Asynchronous version of :meth:`socket.sendfile() <socket.socket.sendfile>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:928
msgid ""
"*sock* must be a non-blocking :const:`socket.SOCK_STREAM` "
":class:`~socket.socket`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:931
msgid "*file* must be a regular file object open in binary mode."
msgstr "*file* 必须是个用二进制方式打开的常规文件对象。"

#: ../../library/asyncio-eventloop.rst:940
msgid ""
"*fallback*, when set to ``True``, makes asyncio manually read and send the "
"file when the platform does not support the sendfile syscall (e.g. Windows "
"or SSL socket on Unix)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:944
msgid ""
"Raise :exc:`SendfileNotAvailableError` if the system does not support "
"*sendfile* syscall and *fallback* is ``False``."
msgstr ""
"如果系统不支持 *sendfile* 并且 *fallback* 为 ``False`` ，引发 "
":exc:`SendfileNotAvailableError` 异常。"

#: ../../library/asyncio-eventloop.rst:953
msgid "DNS"
msgstr "DNS"

#: ../../library/asyncio-eventloop.rst:958
msgid "Asynchronous version of :meth:`socket.getaddrinfo`."
msgstr "异步版的 :meth:`socket.getaddrinfo` 。"

#: ../../library/asyncio-eventloop.rst:962
msgid "Asynchronous version of :meth:`socket.getnameinfo`."
msgstr "异步版的 :meth:`socket.getnameinfo` 。"

#: ../../library/asyncio-eventloop.rst:964
msgid ""
"Both *getaddrinfo* and *getnameinfo* methods were always documented to "
"return a coroutine, but prior to Python 3.7 they were, in fact, returning "
":class:`asyncio.Future` objects.  Starting with Python 3.7 both methods are "
"coroutines."
msgstr ""
"*getaddrinfo* 和 *getnameinfo* 方法一直被标记返回一个协程，但是Python 3.7之前，实际返回的是 "
":class:`asyncio.Future` 对象。从Python 3.7 开始，这两个方法是协程。"

#: ../../library/asyncio-eventloop.rst:972
msgid "Working with pipes"
msgstr "使用管道"

#: ../../library/asyncio-eventloop.rst:976
msgid "Register the read end of *pipe* in the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:981
msgid "*pipe* is a :term:`file-like object <file object>`."
msgstr "*pipe* 是个 :term:`类似文件型对象 <file object>`."

#: ../../library/asyncio-eventloop.rst:983
msgid ""
"Return pair ``(transport, protocol)``, where *transport* supports the "
":class:`ReadTransport` interface and *protocol* is an object instantiated by"
" the *protocol_factory*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:987
#: ../../library/asyncio-eventloop.rst:1003
msgid ""
"With :class:`SelectorEventLoop` event loop, the *pipe* is set to non-"
"blocking mode."
msgstr "使用 :class:`SelectorEventLoop` 事件循环， *pipe* 被设置为非阻塞模式。"

#: ../../library/asyncio-eventloop.rst:992
msgid "Register the write end of *pipe* in the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:997
msgid "*pipe* is :term:`file-like object <file object>`."
msgstr "*pipe* 是个 :term:`类似文件型对象 <file object>`."

#: ../../library/asyncio-eventloop.rst:999
msgid ""
"Return pair ``(transport, protocol)``, where *transport* supports "
":class:`WriteTransport` interface and *protocol* is an object instantiated "
"by the *protocol_factory*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1008
msgid ""
":class:`SelectorEventLoop` does not support the above methods on Windows.  "
"Use :class:`ProactorEventLoop` instead for Windows."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1013
msgid ""
"The :meth:`loop.subprocess_exec` and :meth:`loop.subprocess_shell` methods."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1018
msgid "Unix signals"
msgstr "Unix 信号"

#: ../../library/asyncio-eventloop.rst:1022
msgid "Set *callback* as the handler for the *signum* signal."
msgstr "设置 *callback* 作为 *signum* 信号的处理程序。"

#: ../../library/asyncio-eventloop.rst:1024
msgid ""
"The callback will be invoked by *loop*, along with other queued callbacks "
"and runnable coroutines of that event loop. Unlike signal handlers "
"registered using :func:`signal.signal`, a callback registered with this "
"function is allowed to interact with the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1029
msgid ""
"Raise :exc:`ValueError` if the signal number is invalid or uncatchable. "
"Raise :exc:`RuntimeError` if there is a problem setting up the handler."
msgstr ""
"如果信号数字非法或者不可捕获，就抛出一个 :exc:`ValueError` 。如果建立处理器的过程中出现问题，会抛出一个 "
":exc:`RuntimeError` 。"

#: ../../library/asyncio-eventloop.rst:1035
msgid ""
"Like :func:`signal.signal`, this function must be invoked in the main "
"thread."
msgstr "和 :func:`signal.signal` 一样，这个函数只能在主线程中调用。"

#: ../../library/asyncio-eventloop.rst:1040
msgid "Remove the handler for the *sig* signal."
msgstr "移除 *sig* 信号的处理程序。"

#: ../../library/asyncio-eventloop.rst:1042
msgid ""
"Return ``True`` if the signal handler was removed, or ``False`` if no "
"handler was set for the given signal."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1049
msgid "The :mod:`signal` module."
msgstr ":mod:`signal` 模块。"

#: ../../library/asyncio-eventloop.rst:1053
msgid "Executing code in thread or process pools"
msgstr "在线程或者进程池中执行代码。"

#: ../../library/asyncio-eventloop.rst:1057
msgid "Arrange for *func* to be called in the specified executor."
msgstr "安排在指定的执行器中调用 *func* 。"

#: ../../library/asyncio-eventloop.rst:1059
msgid ""
"The *executor* argument should be an :class:`concurrent.futures.Executor` "
"instance. The default executor is used if *executor* is ``None``."
msgstr ""
" *executor* 参数应该是个 :class:`concurrent.futures.Executor` 实例。如果 *executor* 为 "
"``None`` ，则使用默认的executor。"

#: ../../library/asyncio-eventloop.rst:1103
msgid "This method returns a :class:`asyncio.Future` object."
msgstr "这个方法返回一个 :class:`asyncio.Future` 对象。"

#: ../../library/asyncio-eventloop.rst:1105
msgid ""
"Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-"
"keywords>` to *func*."
msgstr ""
"使用 :func:`functools.partial` :ref:`传递关键字参数 <asyncio-pass-keywords>`  给 "
"*func* 。"

#: ../../library/asyncio-eventloop.rst:1108
msgid ""
":meth:`loop.run_in_executor` no longer configures the ``max_workers`` of the"
" thread pool executor it creates, instead leaving it up to the thread pool "
"executor (:class:`~concurrent.futures.ThreadPoolExecutor`) to set the "
"default."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1117
msgid ""
"Set *executor* as the default executor used by :meth:`run_in_executor`. "
"*executor* should be an instance of "
":class:`~concurrent.futures.ThreadPoolExecutor`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1121
msgid ""
"Using an executor that is not an instance of "
":class:`~concurrent.futures.ThreadPoolExecutor` is deprecated and will "
"trigger an error in Python 3.9."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1126
msgid ""
"*executor* must be an instance of "
":class:`concurrent.futures.ThreadPoolExecutor`."
msgstr "*executor* 必须是个 :class:`concurrent.futures.ThreadPoolExecutor` 的实例。"

#: ../../library/asyncio-eventloop.rst:1131
msgid "Error Handling API"
msgstr "错误处理API"

#: ../../library/asyncio-eventloop.rst:1133
msgid "Allows customizing how exceptions are handled in the event loop."
msgstr "允许自定义事件循环中如何去处理异常。"

#: ../../library/asyncio-eventloop.rst:1137
msgid "Set *handler* as the new event loop exception handler."
msgstr "将 *handler* 设置为新的事件循环异常处理器。"

#: ../../library/asyncio-eventloop.rst:1139
msgid ""
"If *handler* is ``None``, the default exception handler will be set.  "
"Otherwise, *handler* must be a callable with the signature matching ``(loop,"
" context)``, where ``loop`` is a reference to the active event loop, and "
"``context`` is a ``dict`` object containing the details of the exception "
"(see :meth:`call_exception_handler` documentation for details about "
"context)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1149
msgid ""
"Return the current exception handler, or ``None`` if no custom exception "
"handler was set."
msgstr "返回当前的异常处理器，如果没有设置异常处理器，则返回 ``None`` 。"

#: ../../library/asyncio-eventloop.rst:1156
msgid "Default exception handler."
msgstr "默认的异常处理器。"

#: ../../library/asyncio-eventloop.rst:1158
msgid ""
"This is called when an exception occurs and no exception handler is set. "
"This can be called by a custom exception handler that wants to defer to the "
"default handler behavior."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1162
msgid ""
"*context* parameter has the same meaning as in "
":meth:`call_exception_handler`."
msgstr "*context* 参数和 :meth:`call_exception_handler` 中的同名参数完全相同。"

#: ../../library/asyncio-eventloop.rst:1167
msgid "Call the current event loop exception handler."
msgstr "调用当前事件循环的异常处理器。"

#: ../../library/asyncio-eventloop.rst:1169
msgid ""
"*context* is a ``dict`` object containing the following keys (new keys may "
"be introduced in future Python versions):"
msgstr "*context* 是个包含下列键的 ``dict`` 对象(未来版本的Python可能会引入新键)："

#: ../../library/asyncio-eventloop.rst:1172
msgid "'message': Error message;"
msgstr "'message': 错误消息；"

#: ../../library/asyncio-eventloop.rst:1173
msgid "'exception' (optional): Exception object;"
msgstr "'exception' （可选）: 异常对象；"

#: ../../library/asyncio-eventloop.rst:1174
msgid "'future' (optional): :class:`asyncio.Future` instance;"
msgstr "'future' （可选）:  :class:`asyncio.Future` 实例；"

#: ../../library/asyncio-eventloop.rst:1175
msgid "'handle' (optional): :class:`asyncio.Handle` instance;"
msgstr "'handle' （可选）: :class:`asyncio.Handle` 实例；"

#: ../../library/asyncio-eventloop.rst:1176
msgid "'protocol' (optional): :ref:`Protocol <asyncio-protocol>` instance;"
msgstr "'protocol' （可选）: :ref:`Protocol <asyncio-protocol>` 实例；"

#: ../../library/asyncio-eventloop.rst:1177
msgid "'transport' (optional): :ref:`Transport <asyncio-transport>` instance;"
msgstr "'transport' （可选）: :ref:`Transport <asyncio-transport>` 实例；"

#: ../../library/asyncio-eventloop.rst:1178
msgid "'socket' (optional): :class:`socket.socket` instance."
msgstr "'socket' （可选）： :class:`socket.socket` 实例。"

#: ../../library/asyncio-eventloop.rst:1182
msgid ""
"This method should not be overloaded in subclassed event loops.  For custom "
"exception handling, use the :meth:`set_exception_handler()` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1187
msgid "Enabling debug mode"
msgstr "开启调试模式"

#: ../../library/asyncio-eventloop.rst:1191
msgid "Get the debug mode (:class:`bool`) of the event loop."
msgstr "获取事件循环调试模式设置（:class:`bool`）。"

#: ../../library/asyncio-eventloop.rst:1193
msgid ""
"The default value is ``True`` if the environment variable "
":envvar:`PYTHONASYNCIODEBUG` is set to a non-empty string, ``False`` "
"otherwise."
msgstr ""
"如果环境变量 :envvar:`PYTHONASYNCIODEBUG` 是一个非空字符串，就返回 ``True`` ，否则就返回 ``False`` 。"

#: ../../library/asyncio-eventloop.rst:1199
msgid "Set the debug mode of the event loop."
msgstr "设置事件循环的调试模式。"

#: ../../library/asyncio-eventloop.rst:1203
msgid ""
"The new ``-X dev`` command line option can now also be used to enable the "
"debug mode."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1208
msgid "The :ref:`debug mode of asyncio <asyncio-debug-mode>`."
msgstr ":ref:`debug mode of asyncio <asyncio-debug-mode>`."

#: ../../library/asyncio-eventloop.rst:1212
msgid "Running Subprocesses"
msgstr "运行子进程"

#: ../../library/asyncio-eventloop.rst:1214
msgid ""
"Methods described in this subsections are low-level.  In regular async/await"
" code consider using the high-level :func:`asyncio.create_subprocess_shell` "
"and :func:`asyncio.create_subprocess_exec` convenience functions instead."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1221
msgid ""
"The default asyncio event loop on **Windows** does not support subprocesses."
" See :ref:`Subprocess Support on Windows <asyncio-windows-subprocess>` for "
"details."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1229
msgid ""
"Create a subprocess from one or more string arguments specified by *args*."
msgstr "用 *args* 指定的一个或者多个字符串型参数创建一个子进程。"

#: ../../library/asyncio-eventloop.rst:1232
msgid "*args* must be a list of strings represented by:"
msgstr "*args* 必须是个由下列形式的字符串组成的列表："

#: ../../library/asyncio-eventloop.rst:1234
msgid ":class:`str`;"
msgstr ":class:`str`;"

#: ../../library/asyncio-eventloop.rst:1235
msgid ""
"or :class:`bytes`, encoded to the :ref:`filesystem encoding <filesystem-"
"encoding>`."
msgstr "或者由 :ref:`文件熊编码 <filesystem-encoding>` 编码的 :class:`bytes` 。"

#: ../../library/asyncio-eventloop.rst:1238
msgid ""
"The first string specifies the program executable, and the remaining strings"
" specify the arguments.  Together, string arguments form the ``argv`` of the"
" program."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1242
msgid ""
"This is similar to the standard library :class:`subprocess.Popen` class "
"called with ``shell=False`` and the list of strings passed as the first "
"argument; however, where :class:`~subprocess.Popen` takes a single argument "
"which is list of strings, *subprocess_exec* takes multiple string arguments."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1248
msgid ""
"The *protocol_factory* must be a callable returning a subclass of the "
":class:`asyncio.SubprocessProtocol` class."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1251
msgid "Other parameters:"
msgstr "其他参数："

#: ../../library/asyncio-eventloop.rst:1253
msgid "*stdin* can be any of these:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1255
msgid ""
"a file-like object representing a pipe to be connected to the subprocess's "
"standard input stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1258
#: ../../library/asyncio-eventloop.rst:1270
#: ../../library/asyncio-eventloop.rst:1282
msgid ""
"the :const:`subprocess.PIPE` constant (default) which will create a new pipe"
" and connect it,"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1260
#: ../../library/asyncio-eventloop.rst:1272
#: ../../library/asyncio-eventloop.rst:1284
msgid ""
"the value ``None`` which will make the subprocess inherit the file "
"descriptor from this process"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1262
#: ../../library/asyncio-eventloop.rst:1274
#: ../../library/asyncio-eventloop.rst:1286
msgid ""
"the :const:`subprocess.DEVNULL` constant which indicates that the special "
":data:`os.devnull` file will be used"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1265
msgid "*stdout* can be any of these:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1267
msgid ""
"a file-like object representing a pipe to be connected to the subprocess's "
"standard output stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1277
msgid "*stderr* can be any of these:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1279
msgid ""
"a file-like object representing a pipe to be connected to the subprocess's "
"standard error stream using :meth:`~loop.connect_write_pipe`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1288
msgid ""
"the :const:`subprocess.STDOUT` constant which will connect the standard "
"error stream to the process' standard output stream"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1291
msgid ""
"All other keyword arguments are passed to :class:`subprocess.Popen` without "
"interpretation, except for *bufsize*, *universal_newlines*, *shell*, *text*,"
" *encoding* and *errors*, which should not be specified at all."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1296
msgid ""
"The ``asyncio`` subprocess API does not support decoding the streams as "
"text. :func:`bytes.decode` can be used to convert the bytes returned from "
"the stream to text."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1300
msgid ""
"See the constructor of the :class:`subprocess.Popen` class for documentation"
" on other arguments."
msgstr "其他参数的文档，请参阅 :class:`subprocess.Popen` 类的构造函数。"

#: ../../library/asyncio-eventloop.rst:1303
msgid ""
"Returns a pair of ``(transport, protocol)``, where *transport* conforms to "
"the :class:`asyncio.SubprocessTransport` base class and *protocol* is an "
"object instantiated by the *protocol_factory*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1311
msgid ""
"Create a subprocess from *cmd*, which can be a :class:`str` or a "
":class:`bytes` string encoded to the :ref:`filesystem encoding <filesystem-"
"encoding>`, using the platform's \"shell\" syntax."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1316
msgid ""
"This is similar to the standard library :class:`subprocess.Popen` class "
"called with ``shell=True``."
msgstr "这类似与用 ``shell=True`` 调用标准库的 :class:`subprocess.Popen` 类。"

#: ../../library/asyncio-eventloop.rst:1319
msgid ""
"The *protocol_factory* must be a callable returning a subclass of the "
":class:`SubprocessProtocol` class."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1322
msgid ""
"See :meth:`~loop.subprocess_exec` for more details about the remaining "
"arguments."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1325
msgid ""
"Returns a pair of ``(transport, protocol)``, where *transport* conforms to "
"the :class:`SubprocessTransport` base class and *protocol* is an object "
"instantiated by the *protocol_factory*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1330
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"special characters are quoted appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities. The :func:`shlex.quote` function can be used to properly "
"escape whitespace and special characters in strings that are going to be "
"used to construct shell commands."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1339
msgid "Callback Handles"
msgstr "回调处理"

#: ../../library/asyncio-eventloop.rst:1343
msgid ""
"A callback wrapper object returned by :meth:`loop.call_soon`, "
":meth:`loop.call_soon_threadsafe`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1348
msgid ""
"Cancel the callback.  If the callback has already been canceled or executed,"
" this method has no effect."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1353
msgid "Return ``True`` if the callback was cancelled."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1359
msgid ""
"A callback wrapper object returned by :meth:`loop.call_later`, and "
":meth:`loop.call_at`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1362
msgid "This class is a subclass of :class:`Handle`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1366
msgid "Return a scheduled callback time as :class:`float` seconds."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1368
msgid ""
"The time is an absolute timestamp, using the same time reference as "
":meth:`loop.time`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1375
msgid "Server Objects"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1377
msgid ""
"Server objects are created by :meth:`loop.create_server`, "
":meth:`loop.create_unix_server`, :func:`start_server`, and "
":func:`start_unix_server` functions."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1381
msgid "Do not instantiate the class directly."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1385
msgid ""
"*Server* objects are asynchronous context managers.  When used in an ``async"
" with`` statement, it's guaranteed that the Server object is closed and not "
"accepting new connections when the ``async with`` statement is completed::"
msgstr ""
"*Server* 对象是异步上下文管理器。当用于 ``async with`` 语句时，异步上下文管理器可以确保 Server 对象被关闭，并且在 "
"``async with`` 语句完成后，不接受新的连接。"

#: ../../library/asyncio-eventloop.rst:1398
msgid "Server object is an asynchronous context manager since Python 3.7."
msgstr "Python3.7 开始，Server 对象是一个异步上下文管理器。"

#: ../../library/asyncio-eventloop.rst:1403
msgid ""
"Stop serving: close listening sockets and set the :attr:`sockets` attribute "
"to ``None``."
msgstr "停止服务：关闭监听的套接字并且设置 :attr:`sockets` 属性为 ``None`` 。"

#: ../../library/asyncio-eventloop.rst:1406
msgid ""
"The sockets that represent existing incoming client connections are left "
"open."
msgstr "用于表示已经连进来的客户端连接会保持打开的状态。"

#: ../../library/asyncio-eventloop.rst:1409
msgid ""
"The server is closed asynchronously, use the :meth:`wait_closed` coroutine "
"to wait until the server is closed."
msgstr "服务器是被异步关闭的，使用 :meth:`wait_closed` 协程来等待服务器关闭。"

#: ../../library/asyncio-eventloop.rst:1414
msgid "Return the event loop associated with the server object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1420
msgid "Start accepting connections."
msgstr "开始接受连接。"

#: ../../library/asyncio-eventloop.rst:1422
msgid ""
"This method is idempotent, so it can be called when the server is already "
"being serving."
msgstr "这个方法是幂等的【相同参数重复执行，能获得相同的结果】，所以此方法能在服务已经运行的时候调用。"

#: ../../library/asyncio-eventloop.rst:1425
msgid ""
"The *start_serving* keyword-only parameter to :meth:`loop.create_server` and"
" :meth:`asyncio.start_server` allows creating a Server object that is not "
"accepting connections initially.  In this case ``Server.start_serving()``, "
"or :meth:`Server.serve_forever` can be used to make the Server start "
"accepting connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1436
msgid ""
"Start accepting connections until the coroutine is cancelled. Cancellation "
"of ``serve_forever`` task causes the server to be closed."
msgstr "开始接受连接，直到协程被取消。 ``serve_forever`` 任务的取消将导致服务器被关闭。"

#: ../../library/asyncio-eventloop.rst:1440
msgid ""
"This method can be called if the server is already accepting connections.  "
"Only one ``serve_forever`` task can exist per one *Server* object."
msgstr "如果服务器已经在接受连接了，这个方法可以被调用。每个 *Server* 对象，仅能有一个 ``serve_forever`` 任务。"

#: ../../library/asyncio-eventloop.rst:1462
msgid "Return ``True`` if the server is accepting new connections."
msgstr "如果服务器正在接受新连接的状态，返回 ``True`` 。"

#: ../../library/asyncio-eventloop.rst:1468
msgid "Wait until the :meth:`close` method completes."
msgstr "等待 :meth:`close` 方法执行完毕。"

#: ../../library/asyncio-eventloop.rst:1472
msgid "List of :class:`socket.socket` objects the server is listening on."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1474
msgid ""
"Prior to Python 3.7 ``Server.sockets`` used to return an internal list of "
"server sockets directly.  In 3.7 a copy of that list is returned."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1483
msgid "Event Loop Implementations"
msgstr "事件循环实现"

#: ../../library/asyncio-eventloop.rst:1485
msgid ""
"asyncio ships with two different event loop implementations: "
":class:`SelectorEventLoop` and :class:`ProactorEventLoop`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1488
msgid ""
"By default asyncio is configured to use :class:`SelectorEventLoop` on Unix "
"and :class:`ProactorEventLoop` on Windows."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1494
msgid "An event loop based on the :mod:`selectors` module."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1496
msgid ""
"Uses the most efficient *selector* available for the given platform.  It is "
"also possible to manually configure the exact selector implementation to be "
"used::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1508
msgid ":ref:`Availability <availability>`: Unix, Windows."
msgstr ":ref:`可用性 <availability>`: Unix, Windows。"

#: ../../library/asyncio-eventloop.rst:1513
msgid "An event loop for Windows that uses \"I/O Completion Ports\" (IOCP)."
msgstr "用 \"I/O Completion Ports\" (IOCP) 构建的专为Windows 的事件循环。"

#: ../../library/asyncio-eventloop.rst:1516
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`可用性 <availability>`: Windows。"

#: ../../library/asyncio-eventloop.rst:1519
msgid ""
"`MSDN documentation on I/O Completion Ports <https://docs.microsoft.com/en-"
"ca/windows/desktop/FileIO/i-o-completion-ports>`_."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1525
msgid "Abstract base class for asyncio-compliant event loops."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1527
msgid ""
"The :ref:`Event Loop Methods <asyncio-event-loop>` section lists all methods"
" that an alternative implementation of ``AbstractEventLoop`` should have "
"defined."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1533
msgid "Examples"
msgstr "例子"

#: ../../library/asyncio-eventloop.rst:1535
msgid ""
"Note that all examples in this section **purposefully** show how to use the "
"low-level event loop APIs, such as :meth:`loop.run_forever` and "
":meth:`loop.call_soon`.  Modern asyncio applications rarely need to be "
"written this way; consider using the high-level functions like "
":func:`asyncio.run`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1545
msgid "Hello World with call_soon()"
msgstr "call_soon() 的 Hello World 示例。"

#: ../../library/asyncio-eventloop.rst:1547
msgid ""
"An example using the :meth:`loop.call_soon` method to schedule a callback. "
"The callback displays ``\"Hello World\"`` and then stops the event loop::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1571
msgid ""
"A similar :ref:`Hello World <coroutine>` example created with a coroutine "
"and the :func:`run` function."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1578
msgid "Display the current date with call_later()"
msgstr "使用 call_later() 来展示当前的日期"

#: ../../library/asyncio-eventloop.rst:1580
msgid ""
"An example of a callback displaying the current date every second. The "
"callback uses the :meth:`loop.call_later` method to reschedule itself after "
"5 seconds, and then stops the event loop::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1608
msgid ""
"A similar :ref:`current date <asyncio_example_sleep>` example created with a"
" coroutine and the :func:`run` function."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1615
msgid "Watch a file descriptor for read events"
msgstr "监控一个文件描述符的读事件"

#: ../../library/asyncio-eventloop.rst:1617
msgid ""
"Wait until a file descriptor received some data using the "
":meth:`loop.add_reader` method and then close the event loop::"
msgstr "使用 :meth:`loop.add_reader` 方法，等到文件描述符收到一些数据，然后关闭事件循环："

#: ../../library/asyncio-eventloop.rst:1655
msgid ""
"A similar :ref:`example <asyncio_example_create_connection>` using "
"transports, protocols, and the :meth:`loop.create_connection` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1659
msgid ""
"Another similar :ref:`example <asyncio_example_create_connection-streams>` "
"using the high-level :func:`asyncio.open_connection` function and streams."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1667
msgid "Set signal handlers for SIGINT and SIGTERM"
msgstr "为SIGINT和SIGTERM设置信号处理器"

#: ../../library/asyncio-eventloop.rst:1669
msgid "(This ``signals`` example only works on Unix.)"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1671
msgid ""
"Register handlers for signals :py:data:`SIGINT` and :py:data:`SIGTERM` using"
" the :meth:`loop.add_signal_handler` method::"
msgstr ""
