# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Shengjing Zhu <zsj950618@gmail.com>, 2018
# ww song <sww4718168@gmail.com>, 2018
# Meng Du <alphanow@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-01 10:14+0900\n"
"PO-Revision-Date: 2018-06-29 21:06+0000\n"
"Last-Translator: Meng Du <alphanow@gmail.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dataclasses.rst:2
msgid ":mod:`dataclasses` --- Data Classes"
msgstr ":mod:`dataclasses` --- 数据类"

#: ../../library/dataclasses.rst:10
msgid "**Source code:** :source:`Lib/dataclasses.py`"
msgstr "**源码：** :source:`Lib/dataclasses.py`"

#: ../../library/dataclasses.rst:14
msgid ""
"This module provides a decorator and functions for automatically adding "
"generated :term:`special method`\\s such as :meth:`__init__` and "
":meth:`__repr__` to user-defined classes.  It was originally described in "
":pep:`557`."
msgstr ""
"这个模块提供了一个装饰器和一些函数，用于自动添加生成的 :term:`special method`\\s ，例如 :meth:`__init__` 和"
" :meth:`__repr__` 到用户定义的类。 它最初描述于 :pep:`557` 。"

#: ../../library/dataclasses.rst:19
msgid ""
"The member variables to use in these generated methods are defined using "
":pep:`526` type annotations.  For example this code::"
msgstr "在这些生成的方法中使用的成员变量使用 :pep:`526` 类型注释定义。例如这段代码::"

#: ../../library/dataclasses.rst:32
msgid "Will add, among other things, a :meth:`__init__` that looks like::"
msgstr "除其他事情外，将添加 :meth:`__init__` ，其看起来像::"

#: ../../library/dataclasses.rst:39
msgid ""
"Note that this method is automatically added to the class: it is not "
"directly specified in the ``InventoryItem`` definition shown above."
msgstr "请注意，此方法会自动添加到类中：它不会在上面显示的 ``InventoryItem`` 定义中直接指定。"

#: ../../library/dataclasses.rst:45
msgid "Module-level decorators, classes, and functions"
msgstr "模块级装饰器、类和函数"

#: ../../library/dataclasses.rst:49
msgid ""
"This function is a :term:`decorator` that is used to add generated "
":term:`special method`\\s to classes, as described below."
msgstr "这个函数是 :term:`decorator` ，用于将生成的 :term:`special method`\\s 添加到类中，如下所述。"

#: ../../library/dataclasses.rst:52
msgid ""
"The :func:`dataclass` decorator examines the class to find ``field``\\s.  A "
"``field`` is defined as class variable that has a :term:`type annotation "
"<variable annotation>`.  With two exceptions described below, nothing in "
":func:`dataclass` examines the type specified in the variable annotation."
msgstr ""
":func:`dataclass` 装饰器检查类以找到 ``field``\\s 。 ``field`` 被定义为具有 :term:`type "
"annotation <variable annotation>` 的类变量。除了下面描述的两个例外，在 :func:`dataclass` "
"中没有任何内容检查变量标注中指定的类型。"

#: ../../library/dataclasses.rst:58
msgid ""
"The order of the fields in all of the generated methods is the order in "
"which they appear in the class definition."
msgstr "所有生成的方法中的字段顺序是它们在类定义中出现的顺序。"

#: ../../library/dataclasses.rst:61
msgid ""
"The :func:`dataclass` decorator will add various \"dunder\" methods to the "
"class, described below.  If any of the added methods already exist on the "
"class, the behavior depends on the parameter, as documented below. The "
"decorator returns the same class that is called on; no new class is created."
msgstr ""
":func:`dataclass` "
"装饰器将向类中添加各种“dunder”方法，如下所述。如果类中已存在任何添加的方法，则行为取决于参数，如下所述。装饰器返回被调用的同一个类；没有创建新类。"

#: ../../library/dataclasses.rst:67
msgid ""
"If :func:`dataclass` is used just as a simple decorator with no parameters, "
"it acts as if it has the default values documented in this signature.  That "
"is, these three uses of :func:`dataclass` are equivalent::"
msgstr ""
"如果 :func:`dataclass` 仅用作没有参数的简单装饰器，它就像它具有此签名中记录的默认值一样。也就是说，这三种 "
":func:`dataclass` 用法是等价的::"

#: ../../library/dataclasses.rst:84
msgid "The parameters to :func:`dataclass` are:"
msgstr ":func:`dataclass` 的参数有："

#: ../../library/dataclasses.rst:86
msgid ""
"``init``: If true (the default), a :meth:`__init__` method will be "
"generated."
msgstr "``init``: 如果为 true （默认值），将生成一个 :meth:`__ init__` 方法。"

#: ../../library/dataclasses.rst:89
msgid ""
"If the class already defines :meth:`__init__`, this parameter is ignored."
msgstr "如果类已定义 :meth:`__ init__` ，则忽略此参数。"

#: ../../library/dataclasses.rst:92
msgid ""
"``repr``: If true (the default), a :meth:`__repr__` method will be "
"generated.  The generated repr string will have the class name and the name "
"and repr of each field, in the order they are defined in the class.  Fields "
"that are marked as being excluded from the repr are not included.  For "
"example: ``InventoryItem(name='widget', unit_price=3.0, "
"quantity_on_hand=10)``."
msgstr ""
"``repr`` ：如果为true（默认值），将生成一个 :meth:`__repr__` 方法。 生成的 repr "
"字符串将具有类名以及每个字段的名称和 repr ，按照它们在类中定义的顺序。不包括标记为从 repr 中排除的字段。 "
"例如：``InventoryItem(name='widget', unit_price=3.0, quantity_on_hand=10)``。"

#: ../../library/dataclasses.rst:99
msgid ""
"If the class already defines :meth:`__repr__`, this parameter is ignored."
msgstr "如果类已定义 :meth:`__repr__` ，则忽略此参数。"

#: ../../library/dataclasses.rst:102
msgid ""
"``eq``: If true (the default), an :meth:`__eq__` method will be generated.  "
"This method compares the class as if it were a tuple of its fields, in "
"order.  Both instances in the comparison must be of the identical type."
msgstr ""
"``eq`` ：如果为true（默认值），将生成 :meth:`__eq__` "
"方法。此方法将类作为其字段的元组按顺序比较。比较中的两个实例必须是相同的类型。"

#: ../../library/dataclasses.rst:107
msgid ""
"If the class already defines :meth:`__eq__`, this parameter is ignored."
msgstr "如果类已定义 :meth:`__eq__` ，则忽略此参数。"

#: ../../library/dataclasses.rst:110
msgid ""
"``order``: If true (the default is ``False``), :meth:`__lt__`, "
":meth:`__le__`, :meth:`__gt__`, and :meth:`__ge__` methods will be "
"generated.  These compare the class as if it were a tuple of its fields, in "
"order.  Both instances in the comparison must be of the identical type.  If "
"``order`` is true and ``eq`` is false, a :exc:`ValueError` is raised."
msgstr ""
"``order`` ：如果为true（默认为 ``False`` ），则 :meth:`__lt__` 、 :meth:`__ le__` 、 "
":meth:`__gt__` 和 :meth:`__ge__` 方法将生成。 这将类作为其字段的元组按顺序比较。比较中的两个实例必须是相同的类型。如果 "
"``order`` 为 true 并且 ``eq`` 为 false ，则引发 :exc:`ValueError` 。"

#: ../../library/dataclasses.rst:117
msgid ""
"If the class already defines any of :meth:`__lt__`, :meth:`__le__`, "
":meth:`__gt__`, or :meth:`__ge__`, then :exc:`TypeError` is raised."
msgstr ""
"如果类已经定义了 :meth:`__lt__` 、 :meth:`__le__` 、 :meth:`__gt__` 或者 :meth:`__ge__` "
"中的任意一个，将引发 :exc:`TypeError` 。"

#: ../../library/dataclasses.rst:121
msgid ""
"``unsafe_hash``: If ``False`` (the default), a :meth:`__hash__` method is "
"generated according to how ``eq`` and ``frozen`` are set."
msgstr ""
"``unsafe_hash`` ：如果为 ``False`` （默认值），则根据 ``eq`` 和 ``frozen`` 的设置方式生成 "
":meth:`__hash__` 方法。"

#: ../../library/dataclasses.rst:124
msgid ""
":meth:`__hash__` is used by built-in :meth:`hash()`, and when objects are "
"added to hashed collections such as dictionaries and sets.  Having a "
":meth:`__hash__` implies that instances of the class are immutable. "
"Mutability is a complicated property that depends on the programmer's "
"intent, the existence and behavior of :meth:`__eq__`, and the values of the "
"``eq`` and ``frozen`` flags in the :func:`dataclass` decorator."
msgstr ""
":meth:`__hash__` 由内置的 :meth:`hash()` 使用，当对象被添加到散列集合（如字典和集合）时。有一个 "
":meth:`__hash__` 意味着类的实例是不可变的。可变性是一个复杂的属性，取决于程序员的意图， :meth:`__eq__` "
"的存在性和行为，以及 :`func:`dataclass` 装饰器中 ``eq`` 和 ``frozen`` 标志的值。"

#: ../../library/dataclasses.rst:131
msgid ""
"By default, :func:`dataclass` will not implicitly add a :meth:`__hash__` "
"method unless it is safe to do so.  Neither will it add or change an "
"existing explicitly defined :meth:`__hash__` method.  Setting the class "
"attribute ``__hash__ = None`` has a specific meaning to Python, as described"
" in the :meth:`__hash__` documentation."
msgstr ""
"默认情况下， :func:`dataclass` 不会隐式添加 :meth:`__hash__` 方法，除非这样做是安全的。 "
"它也不会添加或更改现有的明确定义的 :meth:`__hash__` 方法。 设置类属性 ``__hash__ = None`` 对 Python "
"具有特定含义，如 :meth:`__hash__` 文档中所述。"

#: ../../library/dataclasses.rst:137
msgid ""
"If :meth:`__hash__` is not explicit defined, or if it is set to ``None``, "
"then :func:`dataclass` *may* add an implicit :meth:`__hash__` method. "
"Although not recommended, you can force :func:`dataclass` to create a "
":meth:`__hash__` method with ``unsafe_hash=True``. This might be the case if"
" your class is logically immutable but can nonetheless be mutated. This is a"
" specialized use case and should be considered carefully."
msgstr ""
"如果 :meth:`__hash__` 没有显式定义，或者它被设置为 ``None`` ，那么 :func:`dataclass` *可以* "
"添加一个隐式 :meth:`__hash__` 方法。虽然不推荐，但你可以强制 :func:`dataclass` 用 "
"``unsafe_hash=True`` 创建一个 :meth:`__hash__` 方法。 "
"如果你的类在逻辑上是不可变的但实际仍然可变，则可能就是这种情况。这是一个特殊的用例，应该仔细考虑。"

#: ../../library/dataclasses.rst:144
msgid ""
"Here are the rules governing implicit creation of a :meth:`__hash__` method."
"  Note that you cannot both have an explicit :meth:`__hash__` method in your"
" dataclass and set ``unsafe_hash=True``; this will result in a "
":exc:`TypeError`."
msgstr ""
"以下是隐式创建 :meth:`__hash__` 方法的规则。请注意，你不能在数据类中都使用显式的 :meth:`__hash__` 方法并设置 "
"``unsafe_hash=True`` ；这将导致 :exc:`TypeError` 。"

#: ../../library/dataclasses.rst:149
msgid ""
"If ``eq`` and ``frozen`` are both true, by default :func:`dataclass` will "
"generate a :meth:`__hash__` method for you.  If ``eq`` is true and "
"``frozen`` is false, :meth:`__hash__` will be set to ``None``, marking it "
"unhashable (which it is, since it is mutable).  If ``eq`` is false, "
":meth:`__hash__` will be left untouched meaning the :meth:`__hash__` method "
"of the superclass will be used (if the superclass is :class:`object`, this "
"means it will fall back to id-based hashing)."
msgstr ""
"如果 ``eq`` 和 ``frozen`` 都是 true，默认情况下 :func:`dataclass` 将为你生成一个 "
":meth:`__hash__` 方法。如果 ``eq`` 为 true 且 ``frozen`` 为 false ，则 "
":meth:`__hash__` 将被设置为 ``None`` ，标记它不可用（因为它是可变的）。如果 ``eq`` 为 false ，则 "
":meth:`__hash__` 将保持不变，这意味着将使用超类的 :meth:`__hash__` 方法（如果超类是 :class:`object` "
"，这意味着它将回到基于id的hash）。"

#: ../../library/dataclasses.rst:157
msgid ""
"``frozen``: If true (the default is False), assigning to fields will "
"generate an exception.  This emulates read-only frozen instances.  If "
":meth:`__setattr__` or :meth:`__delattr__` is defined in the class, then "
":exc:`TypeError` is raised.  See the discussion below."
msgstr ""
"``frozen`` ：如果为 true （默认值为 False ），则字段赋值将生成异常。这模拟了只读的冻结实例。如果 "
":meth:`__setattr __` 或 :meth:`__delattr__` 在类中定义，则 :exc:`TypeError` "
"被引发。请参阅下面的讨论。"

#: ../../library/dataclasses.rst:162
msgid ""
"``field``\\s may optionally specify a default value, using normal Python "
"syntax::"
msgstr "``field``\\s 可以选择使用普通的 Python 语法指定默认值::"

#: ../../library/dataclasses.rst:170
msgid ""
"In this example, both ``a`` and ``b`` will be included in the added "
":meth:`__init__` method, which will be defined as::"
msgstr "在这个例子中， ``a`` 和 ``b`` 都将包含在添加的 :meth:`__init__` 方法中，它们将被定义为::"

#: ../../library/dataclasses.rst:175
msgid ""
":exc:`TypeError` will be raised if a field without a default value follows a"
" field with a default value.  This is true either when this occurs in a "
"single class, or as a result of class inheritance."
msgstr ""
"如果没有默认值的字段跟在具有默认值的字段后，将引发 :exc:`TypeError` 。当这发生在单个类中时，或者作为类继承的结果时，都是如此。"

#: ../../library/dataclasses.rst:181
msgid ""
"For common and simple use cases, no other functionality is required.  There "
"are, however, some dataclass features that require additional per-field "
"information.  To satisfy this need for additional information, you can "
"replace the default field value with a call to the provided :func:`field` "
"function.  For example::"
msgstr ""
"对于常见和简单的用例，不需要其他功能。但是，有些数据类功能需要额外的每字段信息。为了满足这种对附加信息的需求，你可以通过调用提供的 "
":func:`field` 函数来替换默认字段值。例如::"

#: ../../library/dataclasses.rst:194
msgid ""
"As shown above, the ``MISSING`` value is a sentinel object used to detect if"
" the ``default`` and ``default_factory`` parameters are provided.  This "
"sentinel is used because ``None`` is a valid value for ``default``.  No code"
" should directly use the ``MISSING`` value."
msgstr ""
"如上所示， ``MISSING`` 值是一个 sentinel 对象，用于检测是否提供了 ``default`` 和 "
"``default_factory`` 参数。 使用此 sentinel 是因为 ``None`` 是 ``default`` "
"的有效值。没有代码应该直接使用 ``MISSING`` 值。"

#: ../../library/dataclasses.rst:200
msgid "The parameters to :func:`field` are:"
msgstr ":func:`field` 参数有："

#: ../../library/dataclasses.rst:202
msgid ""
"``default``: If provided, this will be the default value for this field.  "
"This is needed because the :meth:`field` call itself replaces the normal "
"position of the default value."
msgstr "``default`` ：如果提供，这将是该字段的默认值。这是必需的，因为 :meth:`field` 调用本身会替换一般的默认值。"

#: ../../library/dataclasses.rst:206
msgid ""
"``default_factory``: If provided, it must be a zero-argument callable that "
"will be called when a default value is needed for this field.  Among other "
"purposes, this can be used to specify fields with mutable default values, as"
" discussed below.  It is an error to specify both ``default`` and "
"``default_factory``."
msgstr ""
"``default_factory`` "
"：如果提供，它必须是一个零参数可调用对象，当该字段需要一个默认值时，它将被调用。除了其他目的之外，这可以用于指定具有可变默认值的字段，如下所述。 "
"同时指定 ``default`` 和 ``default_factory`` 将产生错误。"

#: ../../library/dataclasses.rst:212
msgid ""
"``init``: If true (the default), this field is included as a parameter to "
"the generated :meth:`__init__` method."
msgstr "``init`` ：如果为true（默认值），则该字段作为参数包含在生成的 :meth:`__init__` 方法中。"

#: ../../library/dataclasses.rst:215
msgid ""
"``repr``: If true (the default), this field is included in the string "
"returned by the generated :meth:`__repr__` method."
msgstr "``repr`` ：如果为true（默认值），则该字段包含在生成的 :meth:`__repr__` 方法返回的字符串中。"

#: ../../library/dataclasses.rst:218
msgid ""
"``compare``: If true (the default), this field is included in the generated "
"equality and comparison methods (:meth:`__eq__`, :meth:`__gt__`, et al.)."
msgstr ""
"``compare`` ：如果为true（默认值），则该字段包含在生成的相等性和比较方法中（ :meth:`__eq__` ， "
":meth:`__gt__` 等等）。"

#: ../../library/dataclasses.rst:222
msgid ""
"``hash``: This can be a bool or ``None``.  If true, this field is included "
"in the generated :meth:`__hash__` method.  If ``None`` (the default), use "
"the value of ``compare``: this would normally be the expected behavior.  A "
"field should be considered in the hash if it's used for comparisons.  "
"Setting this value to anything other than ``None`` is discouraged."
msgstr ""
"``hash`` ：这可以是布尔值或 ``None`` 。如果为true，则此字段包含在生成的 :meth:`__hash__` 方法中。如果为 "
"``None`` （默认值），请使用 ``compare`` 的值，这通常是预期的行为。如果字段用于比较，则应在 hash "
"中考虑该字段。不鼓励将此值设置为 ``None`` 以外的任何值。"

#: ../../library/dataclasses.rst:229
msgid ""
"One possible reason to set ``hash=False`` but ``compare=True`` would be if a"
" field is expensive to compute a hash value for, that field is needed for "
"equality testing, and there are other fields that contribute to the type's "
"hash value.  Even if a field is excluded from the hash, it will still be "
"used for comparisons."
msgstr ""
"设置 ``hash=False`` 但 ``compare=True`` 的一个可能原因是，如果一个计算 hash "
"的代价很高的字段是检验等价性需要的，但还有其他字段可以计算类型的 hash 。 即使从 hash 中排除某个字段，它仍将用于比较。"

#: ../../library/dataclasses.rst:235
msgid ""
"``metadata``: This can be a mapping or None. None is treated as an empty "
"dict.  This value is wrapped in :func:`~types.MappingProxyType` to make it "
"read-only, and exposed on the :class:`Field` object. It is not used at all "
"by Data Classes, and is provided as a third-party extension mechanism. "
"Multiple third-parties can each have their own key, to use as a namespace in"
" the metadata."
msgstr ""
"``metadata`` ：这可以是映射或 None 。 None 被视为一个空的字典。这个值包含在 "
":func:`~insterss.MappingProxyType` 中，使其成为只读，并暴露在 :class:`Field` "
"对象上。数据类根本不使用它，它是作为第三方扩展机制提供的。多个第三方可以各自拥有自己的键值，以用作元数据中的命名空间。"

#: ../../library/dataclasses.rst:243
msgid ""
"If the default value of a field is specified by a call to :func:`field()`, "
"then the class attribute for this field will be replaced by the specified "
"``default`` value.  If no ``default`` is provided, then the class attribute "
"will be deleted.  The intent is that after the :func:`dataclass` decorator "
"runs, the class attributes will all contain the default values for the "
"fields, just as if the default value itself were specified.  For example, "
"after::"
msgstr ""
"如果通过调用 :func:`field()` 指定字段的默认值，则该字段的类属性将替换为指定的 ``default`` 值。如果没有提供 "
"``default`` ，那么将删除类属性。目的是在 :func:`dataclass` "
"装饰器运行之后，类属性将包含字段的默认值，就像指定了默认值一样。例如，之后::"

#: ../../library/dataclasses.rst:259
msgid ""
"The class attribute ``C.z`` will be ``10``, the class attribute ``C.t`` will"
" be ``20``, and the class attributes ``C.x`` and ``C.y`` will not be set."
msgstr ""
"类属性 ``C.z`` 将是 ``10`` ，类属性 ``C.t`` 将是 ``20``，类属性 ``C.x`` 和 ``C.y`` 将不设置。"

#: ../../library/dataclasses.rst:265
msgid ""
":class:`Field` objects describe each defined field. These objects are "
"created internally, and are returned by the :func:`fields` module-level "
"method (see below).  Users should never instantiate a :class:`Field` object "
"directly.  Its documented attributes are:"
msgstr ""

#: ../../library/dataclasses.rst:270
msgid "``name``: The name of the field."
msgstr ""

#: ../../library/dataclasses.rst:272
msgid "``type``: The type of the field."
msgstr ""

#: ../../library/dataclasses.rst:274
msgid ""
"``default``, ``default_factory``, ``init``, ``repr``, ``hash``, ``compare``,"
" and ``metadata`` have the identical meaning and values as they do in the "
":func:`field` declaration."
msgstr ""

#: ../../library/dataclasses.rst:278
msgid ""
"Other attributes may exist, but they are private and must not be inspected "
"or relied on."
msgstr ""

#: ../../library/dataclasses.rst:283
msgid ""
"Returns a tuple of :class:`Field` objects that define the fields for this "
"dataclass.  Accepts either a dataclass, or an instance of a dataclass. "
"Raises :exc:`TypeError` if not passed a dataclass or instance of one. Does "
"not return pseudo-fields which are ``ClassVar`` or ``InitVar``."
msgstr ""

#: ../../library/dataclasses.rst:290
msgid ""
"Converts the dataclass ``instance`` to a dict (by using the factory function"
" ``dict_factory``).  Each dataclass is converted to a dict of its fields, as"
" ``name: value`` pairs.  dataclasses, dicts, lists, and tuples are recursed "
"into.  For example::"
msgstr ""

#: ../../library/dataclasses.rst:310 ../../library/dataclasses.rst:324
msgid "Raises :exc:`TypeError` if ``instance`` is not a dataclass instance."
msgstr ""

#: ../../library/dataclasses.rst:314
msgid ""
"Converts the dataclass ``instance`` to a tuple (by using the factory "
"function ``tuple_factory``).  Each dataclass is converted to a tuple of its "
"field values.  dataclasses, dicts, lists, and tuples are recursed into."
msgstr ""

#: ../../library/dataclasses.rst:319
msgid "Continuing from the previous example::"
msgstr ""

#: ../../library/dataclasses.rst:328
msgid ""
"Creates a new dataclass with name ``cls_name``, fields as defined in "
"``fields``, base classes as given in ``bases``, and initialized with a "
"namespace as given in ``namespace``.  ``fields`` is an iterable whose "
"elements are each either ``name``, ``(name, type)``, or ``(name, type, "
"Field)``.  If just ``name`` is supplied, ``typing.Any`` is used for "
"``type``.  The values of ``init``, ``repr``, ``eq``, ``order``, "
"``unsafe_hash``, and ``frozen`` have the same meaning as they do in "
":func:`dataclass`."
msgstr ""

#: ../../library/dataclasses.rst:337
msgid ""
"This function is not strictly required, because any Python mechanism for "
"creating a new class with ``__annotations__`` can then apply the "
":func:`dataclass` function to convert that class to a dataclass.  This "
"function is provided as a convenience.  For example::"
msgstr ""

#: ../../library/dataclasses.rst:349
msgid "Is equivalent to::"
msgstr ""

#: ../../library/dataclasses.rst:362
msgid ""
"Creates a new object of the same type of ``instance``, replacing fields with"
" values from ``changes``.  If ``instance`` is not a Data Class, raises "
":exc:`TypeError`.  If values in ``changes`` do not specify fields, raises "
":exc:`TypeError`."
msgstr ""

#: ../../library/dataclasses.rst:367
msgid ""
"The newly returned object is created by calling the :meth:`__init__` method "
"of the dataclass.  This ensures that :meth:`__post_init__`, if present, is "
"also called."
msgstr ""

#: ../../library/dataclasses.rst:371
msgid ""
"Init-only variables without default values, if any exist, must be specified "
"on the call to :func:`replace` so that they can be passed to "
":meth:`__init__` and :meth:`__post_init__`."
msgstr ""

#: ../../library/dataclasses.rst:375
msgid ""
"It is an error for ``changes`` to contain any fields that are defined as "
"having ``init=False``.  A :exc:`ValueError` will be raised in this case."
msgstr ""

#: ../../library/dataclasses.rst:379
msgid ""
"Be forewarned about how ``init=False`` fields work during a call to "
":func:`replace`.  They are not copied from the source object, but rather are"
" initialized in :meth:`__post_init__`, if they're initialized at all.  It is"
" expected that ``init=False`` fields will be rarely and judiciously used.  "
"If they are used, it might be wise to have alternate class constructors, or "
"perhaps a custom ``replace()`` (or similarly named) method which handles "
"instance copying."
msgstr ""

#: ../../library/dataclasses.rst:390
msgid ""
"Returns True if its parameter is a dataclass or an instance of one, "
"otherwise returns False."
msgstr ""

#: ../../library/dataclasses.rst:393
msgid ""
"If you need to know if a class is an instance of a dataclass (and not a "
"dataclass itself), then add a further check for ``not isinstance(obj, "
"type)``::"
msgstr ""

#: ../../library/dataclasses.rst:401
msgid "Post-init processing"
msgstr ""

#: ../../library/dataclasses.rst:403
msgid ""
"The generated :meth:`__init__` code will call a method named "
":meth:`__post_init__`, if :meth:`__post_init__` is defined on the class.  It"
" will normally be called as ``self.__post_init__()``. However, if any "
"``InitVar`` fields are defined, they will also be passed to "
":meth:`__post_init__` in the order they were defined in the class.  If no "
":meth:`__init__` method is generated, then :meth:`__post_init__` will not "
"automatically be called."
msgstr ""

#: ../../library/dataclasses.rst:411
msgid ""
"Among other uses, this allows for initializing field values that depend on "
"one or more other fields.  For example::"
msgstr ""

#: ../../library/dataclasses.rst:423
msgid ""
"See the section below on init-only variables for ways to pass parameters to "
":meth:`__post_init__`.  Also see the warning about how :func:`replace` "
"handles ``init=False`` fields."
msgstr ""

#: ../../library/dataclasses.rst:428
msgid "Class variables"
msgstr ""

#: ../../library/dataclasses.rst:430
msgid ""
"One of two places where :func:`dataclass` actually inspects the type of a "
"field is to determine if a field is a class variable as defined in "
":pep:`526`.  It does this by checking if the type of the field is "
"``typing.ClassVar``.  If a field is a ``ClassVar``, it is excluded from "
"consideration as a field and is ignored by the dataclass mechanisms.  Such "
"``ClassVar`` pseudo-fields are not returned by the module-level "
":func:`fields` function."
msgstr ""

#: ../../library/dataclasses.rst:439
msgid "Init-only variables"
msgstr ""

#: ../../library/dataclasses.rst:441
msgid ""
"The other place where :func:`dataclass` inspects a type annotation is to "
"determine if a field is an init-only variable.  It does this by seeing if "
"the type of a field is of type ``dataclasses.InitVar``.  If a field is an "
"``InitVar``, it is considered a pseudo-field called an init-only field.  As "
"it is not a true field, it is not returned by the module-level "
":func:`fields` function.  Init-only fields are added as parameters to the "
"generated :meth:`__init__` method, and are passed to the optional "
":meth:`__post_init__` method.  They are not otherwise used by dataclasses."
msgstr ""

#: ../../library/dataclasses.rst:451
msgid ""
"For example, suppose a field will be initialized from a database, if a value"
" is not provided when creating the class::"
msgstr ""

#: ../../library/dataclasses.rst:466
msgid ""
"In this case, :func:`fields` will return :class:`Field` objects for ``i`` "
"and ``j``, but not for ``database``."
msgstr ""

#: ../../library/dataclasses.rst:470
msgid "Frozen instances"
msgstr ""

#: ../../library/dataclasses.rst:472
msgid ""
"It is not possible to create truly immutable Python objects.  However, by "
"passing ``frozen=True`` to the :meth:`dataclass` decorator you can emulate "
"immutability.  In that case, dataclasses will add :meth:`__setattr__` and "
":meth:`__delattr__` methods to the class.  These methods will raise a "
":exc:`FrozenInstanceError` when invoked."
msgstr ""

#: ../../library/dataclasses.rst:478
msgid ""
"There is a tiny performance penalty when using ``frozen=True``: "
":meth:`__init__` cannot use simple assignment to initialize fields, and must"
" use :meth:`object.__setattr__`."
msgstr ""

#: ../../library/dataclasses.rst:483
msgid "Inheritance"
msgstr "继承"

#: ../../library/dataclasses.rst:485
msgid ""
"When the dataclass is being created by the :meth:`dataclass` decorator, it "
"looks through all of the class's base classes in reverse MRO (that is, "
"starting at :class:`object`) and, for each dataclass that it finds, adds the"
" fields from that base class to an ordered mapping of fields. After all of "
"the base class fields are added, it adds its own fields to the ordered "
"mapping.  All of the generated methods will use this combined, calculated "
"ordered mapping of fields.  Because the fields are in insertion order, "
"derived classes override base classes.  An example::"
msgstr ""

#: ../../library/dataclasses.rst:505
msgid ""
"The final list of fields is, in order, ``x``, ``y``, ``z``.  The final type "
"of ``x`` is ``int``, as specified in class ``C``."
msgstr ""

#: ../../library/dataclasses.rst:508
msgid "The generated :meth:`__init__` method for ``C`` will look like::"
msgstr ""

#: ../../library/dataclasses.rst:513
msgid "Default factory functions"
msgstr ""

#: ../../library/dataclasses.rst:515
msgid ""
"If a :func:`field` specifies a ``default_factory``, it is called with zero "
"arguments when a default value for the field is needed.  For example, to "
"create a new instance of a list, use::"
msgstr ""

#: ../../library/dataclasses.rst:521
msgid ""
"If a field is excluded from :meth:`__init__` (using ``init=False``) and the "
"field also specifies ``default_factory``, then the default factory function "
"will always be called from the generated :meth:`__init__` function.  This "
"happens because there is no other way to give the field an initial value."
msgstr ""

#: ../../library/dataclasses.rst:528
msgid "Mutable default values"
msgstr ""

#: ../../library/dataclasses.rst:530
msgid ""
"Python stores default member variable values in class attributes. Consider "
"this example, not using dataclasses::"
msgstr ""

#: ../../library/dataclasses.rst:545
msgid ""
"Note that the two instances of class ``C`` share the same class variable "
"``x``, as expected."
msgstr ""

#: ../../library/dataclasses.rst:548
msgid "Using dataclasses, *if* this code was valid::"
msgstr ""

#: ../../library/dataclasses.rst:556
msgid "it would generate code similar to::"
msgstr ""

#: ../../library/dataclasses.rst:567
msgid ""
"This has the same issue as the original example using class ``C``. That is, "
"two instances of class ``D`` that do not specify a value for ``x`` when "
"creating a class instance will share the same copy of ``x``.  Because "
"dataclasses just use normal Python class creation they also share this "
"behavior.  There is no general way for Data Classes to detect this "
"condition.  Instead, dataclasses will raise a :exc:`TypeError` if it detects"
" a default parameter of type ``list``, ``dict``, or ``set``.  This is a "
"partial solution, but it does protect against many common errors."
msgstr ""

#: ../../library/dataclasses.rst:577
msgid ""
"Using default factory functions is a way to create new instances of mutable "
"types as default values for fields::"
msgstr ""

#: ../../library/dataclasses.rst:587
msgid "Exceptions"
msgstr "异常"

#: ../../library/dataclasses.rst:591
msgid ""
"Raised when an implicitly defined :meth:`__setattr__` or :meth:`__delattr__`"
" is called on a dataclass which was defined with ``frozen=True``."
msgstr ""
