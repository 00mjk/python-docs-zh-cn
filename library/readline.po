# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Menghua Xiao <arieshout@gmail.com>, 2018
# Freesand Leo <yuqinju@163.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-29 11:32+0900\n"
"PO-Revision-Date: 2017-02-16 23:24+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/readline.rst:2
msgid ":mod:`readline` --- GNU readline interface"
msgstr ":mod:`readline` --- GNU readline 接口"

#: ../../library/readline.rst:12
msgid ""
"The :mod:`readline` module defines a number of functions to facilitate "
"completion and reading/writing of history files from the Python interpreter."
" This module can be used directly, or via the :mod:`rlcompleter` module, "
"which supports completion of Python identifiers at the interactive prompt.  "
"Settings made using  this module affect the behaviour of both the "
"interpreter's interactive prompt  and the prompts offered by the built-in "
":func:`input` function."
msgstr ""
":mod:`readline` 模块定义了许多方便从 Python 解释器完成和读取/写入历史文件的函数。 "
"此模块可以直接使用，或通过支持在交互提示符下完成 Python 标识符的 :mod:`rlcompleter` 模块使用。 "
"使用此模块进行的设置会同时影响解释器的交互提示符以及内置 :func:`input` 函数提供的提示符。"

#: ../../library/readline.rst:20
msgid ""
"Readline keybindings may be configured via an initialization file, typically"
" ``.inputrc`` in your home directory.  See `Readline Init File "
"<https://tiswww.cwru.edu/php/chet/readline/rluserman.html#SEC9>`_ in the GNU"
" Readline manual for information about the format and allowable constructs "
"of that file, and the capabilities of the Readline library in general."
msgstr ""
" Readline 的按键绑定可以通过一个初始化文件来配置，通常为你的用户主目录中的 ``.inputrc``。 请参阅 GNU Readline "
"手册中的 `Readline 初始化文件 "
"<https://tiswww.cwru.edu/php/chet/readline/rluserman.html#SEC9>`_  "
"了解有关该文件的格式和允许的结构的信息，以及 Readline 库的一般功能。"

#: ../../library/readline.rst:29
msgid ""
"The underlying Readline library API may be implemented by the ``libedit`` "
"library instead of GNU readline. On macOS the :mod:`readline` module detects"
" which library is being used at run time."
msgstr ""
"底层的 Readline 库 API 可能使用 ``libedit`` 库来实现而不是 GNU readline。 在 macOS 上 "
":mod:`readline` 模块会在运行时检测所使用的是哪个库。"

#: ../../library/readline.rst:34
msgid ""
"The configuration file for ``libedit`` is different from that of GNU "
"readline. If you programmatically load configuration strings you can check "
"for the text \"libedit\" in :const:`readline.__doc__` to differentiate "
"between GNU readline and libedit."
msgstr ""
"``libedit`` 所用的配置文件与 GNU readline 的不同。 如果你要在程序中载入配置字符串你可以在 "
":const:`readline.__doc__` 中检测文本 \"libedit\" 来区分 GNU readline 和 libedit。"

#: ../../library/readline.rst:39
msgid ""
"If you use *editline*/``libedit`` readline emulation on macOS, the "
"initialization file located in your home directory is named ``.editrc``. For"
" example, the following content in ``~/.editrc`` will turn ON *vi* "
"keybindings and TAB completion::"
msgstr ""
"如果你是在 macOS 上使用 *editline*/``libedit`` readline 模拟，则位于你的主目录中的初始化文件名称为 "
"``.editrc``。 例如，``~/.editrc`` 中的以下内容将开启 *vi* 按键绑定以及 TAB 补全::"

#: ../../library/readline.rst:49
msgid "Init file"
msgstr "初始化文件"

#: ../../library/readline.rst:51
msgid ""
"The following functions relate to the init file and user configuration:"
msgstr "下列函数与初始化文件和用户配置有关："

#: ../../library/readline.rst:56
msgid ""
"Execute the init line provided in the *string* argument. This calls "
":c:func:`rl_parse_and_bind` in the underlying library."
msgstr "执行在 *string* 参数中提供的初始化行。 此函数会调用底层库中的 :c:func:`rl_parse_and_bind`。"

#: ../../library/readline.rst:62
msgid ""
"Execute a readline initialization file. The default filename is the last "
"filename used. This calls :c:func:`rl_read_init_file` in the underlying "
"library."
msgstr ""
"执行一个 readline 初始化文件。 默认文件名为最近所使用的文件名。 此函数会调用底层库中的 "
":c:func:`rl_read_init_file`。"

#: ../../library/readline.rst:67
msgid "Line buffer"
msgstr "行缓冲区"

#: ../../library/readline.rst:69
msgid "The following functions operate on the line buffer:"
msgstr "下列函数会在行缓冲区上操作。"

#: ../../library/readline.rst:74
msgid ""
"Return the current contents of the line buffer (:c:data:`rl_line_buffer` in "
"the underlying library)."
msgstr "返回行缓冲区的当前内容 (底层库中的 :c:data:`rl_line_buffer`)。"

#: ../../library/readline.rst:80
msgid ""
"Insert text into the line buffer at the cursor position.  This calls "
":c:func:`rl_insert_text` in the underlying library, but ignores the return "
"value."
msgstr "将文本插入行缓冲区的当前游标位置。 该函数会调用底层库中的 :c:func:`rl_insert_text`，但会忽略其返回值。"

#: ../../library/readline.rst:87
msgid ""
"Change what's displayed on the screen to reflect the current contents of the"
" line buffer.  This calls :c:func:`rl_redisplay` in the underlying library."
msgstr "改变屏幕的显示以反映行缓冲区的当前内容。 该函数会调用底层库中的 :c:func:`rl_redisplay`。"

#: ../../library/readline.rst:92
msgid "History file"
msgstr "历史文件"

#: ../../library/readline.rst:94
msgid "The following functions operate on a history file:"
msgstr ""

#: ../../library/readline.rst:99
msgid ""
"Load a readline history file, and append it to the history list. The default"
" filename is :file:`~/.history`.  This calls :c:func:`read_history` in the "
"underlying library."
msgstr ""

#: ../../library/readline.rst:106
msgid ""
"Save the history list to a readline history file, overwriting any existing "
"file.  The default filename is :file:`~/.history`.  This calls "
":c:func:`write_history` in the underlying library."
msgstr ""

#: ../../library/readline.rst:113
msgid ""
"Append the last *nelements* items of history to a file.  The default "
"filename is :file:`~/.history`.  The file must already exist.  This calls "
":c:func:`append_history` in the underlying library.  This function only "
"exists if Python was compiled for a version of the library that supports it."
msgstr ""

#: ../../library/readline.rst:125
msgid ""
"Set or return the desired number of lines to save in the history file. The "
":func:`write_history_file` function uses this value to truncate the history "
"file, by calling :c:func:`history_truncate_file` in the underlying library."
"  Negative values imply unlimited history file size."
msgstr ""

#: ../../library/readline.rst:133
msgid "History list"
msgstr ""

#: ../../library/readline.rst:135
msgid "The following functions operate on a global history list:"
msgstr ""

#: ../../library/readline.rst:140
msgid ""
"Clear the current history.  This calls :c:func:`clear_history` in the "
"underlying library.  The Python function only exists if Python was compiled "
"for a version of the library that supports it."
msgstr ""

#: ../../library/readline.rst:147
msgid ""
"Return the number of items currently in the history.  (This is different "
"from :func:`get_history_length`, which returns the maximum number of lines "
"that will be written to a history file.)"
msgstr ""

#: ../../library/readline.rst:154
msgid ""
"Return the current contents of history item at *index*.  The item index is "
"one-based.  This calls :c:func:`history_get` in the underlying library."
msgstr ""

#: ../../library/readline.rst:160
msgid ""
"Remove history item specified by its position from the history. The position"
" is zero-based.  This calls :c:func:`remove_history` in the underlying "
"library."
msgstr ""

#: ../../library/readline.rst:167
msgid ""
"Replace history item specified by its position with *line*. The position is "
"zero-based.  This calls :c:func:`replace_history_entry` in the underlying "
"library."
msgstr ""

#: ../../library/readline.rst:174
msgid ""
"Append *line* to the history buffer, as if it was the last line typed. This "
"calls :c:func:`add_history` in the underlying library."
msgstr ""

#: ../../library/readline.rst:180
msgid ""
"Enable or disable automatic calls to :c:func:`add_history` when reading "
"input via readline.  The *enabled* argument should be a Boolean value that "
"when true, enables auto history, and that when false, disables auto history."
msgstr ""

#: ../../library/readline.rst:193
msgid "Startup hooks"
msgstr ""

#: ../../library/readline.rst:198
msgid ""
"Set or remove the function invoked by the :c:data:`rl_startup_hook` callback"
" of the underlying library.  If *function* is specified, it will be used as "
"the new hook function; if omitted or ``None``, any function already "
"installed is removed.  The hook is called with no arguments just before "
"readline prints the first prompt."
msgstr ""

#: ../../library/readline.rst:207
msgid ""
"Set or remove the function invoked by the :c:data:`rl_pre_input_hook` "
"callback of the underlying library.  If *function* is specified, it will be "
"used as the new hook function; if omitted or ``None``, any function already "
"installed is removed.  The hook is called with no arguments after the first "
"prompt has been printed and just before readline starts reading input "
"characters.  This function only exists if Python was compiled for a version "
"of the library that supports it."
msgstr ""

#: ../../library/readline.rst:217
msgid "Completion"
msgstr ""

#: ../../library/readline.rst:219
msgid ""
"The following functions relate to implementing a custom word completion "
"function.  This is typically operated by the Tab key, and can suggest and "
"automatically complete a word being typed.  By default, Readline is set up "
"to be used by :mod:`rlcompleter` to complete Python identifiers for the "
"interactive interpreter.  If the :mod:`readline` module is to be used with a"
" custom completer, a different set of word delimiters should be set."
msgstr ""

#: ../../library/readline.rst:229
msgid ""
"Set or remove the completer function.  If *function* is specified, it will "
"be used as the new completer function; if omitted or ``None``, any completer"
" function already installed is removed.  The completer function is called as"
" ``function(text, state)``, for *state* in ``0``, ``1``, ``2``, ..., until "
"it returns a non-string value.  It should return the next possible "
"completion starting with *text*."
msgstr ""

#: ../../library/readline.rst:236
msgid ""
"The installed completer function is invoked by the *entry_func* callback "
"passed to :c:func:`rl_completion_matches` in the underlying library. The "
"*text* string comes from the first parameter to the "
":c:data:`rl_attempted_completion_function` callback of the underlying "
"library."
msgstr ""

#: ../../library/readline.rst:245
msgid ""
"Get the completer function, or ``None`` if no completer function has been "
"set."
msgstr ""

#: ../../library/readline.rst:250
msgid ""
"Get the type of completion being attempted.  This returns the "
":c:data:`rl_completion_type` variable in the underlying library as an "
"integer."
msgstr ""

#: ../../library/readline.rst:258
msgid ""
"Get the beginning or ending index of the completion scope. These indexes are"
" the *start* and *end* arguments passed to the "
":c:data:`rl_attempted_completion_function` callback of the underlying "
"library."
msgstr ""

#: ../../library/readline.rst:267
msgid ""
"Set or get the word delimiters for completion.  These determine the start of"
" the word to be considered for completion (the completion scope). These "
"functions access the :c:data:`rl_completer_word_break_characters` variable "
"in the underlying library."
msgstr ""

#: ../../library/readline.rst:275
msgid ""
"Set or remove the completion display function.  If *function* is specified, "
"it will be used as the new completion display function; if omitted or "
"``None``, any completion display function already installed is removed.  "
"This sets or clears the :c:data:`rl_completion_display_matches_hook` "
"callback in the underlying library.  The completion display function is "
"called as ``function(substitution, [matches], longest_match_length)`` once "
"each time matches need to be displayed."
msgstr ""

#: ../../library/readline.rst:288
msgid "Example"
msgstr "示例"

#: ../../library/readline.rst:290
msgid ""
"The following example demonstrates how to use the :mod:`readline` module's "
"history reading and writing functions to automatically load and save a "
"history file named :file:`.python_history` from the user's home directory.  "
"The code below would normally be executed automatically during interactive "
"sessions from the user's :envvar:`PYTHONSTARTUP` file. ::"
msgstr ""

#: ../../library/readline.rst:310
msgid ""
"This code is actually automatically run when Python is run in "
":ref:`interactive mode <tut-interactive>` (see :ref:`rlcompleter-config`)."
msgstr ""

#: ../../library/readline.rst:313
msgid ""
"The following example achieves the same goal but supports concurrent "
"interactive sessions, by only appending the new history. ::"
msgstr ""

#: ../../library/readline.rst:334
msgid ""
"The following example extends the :class:`code.InteractiveConsole` class to "
"support history save/restore. ::"
msgstr ""
