# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Fred <fred.wei@foxmail.com>, 2018
# Fei Yin <icebirds@163.com>, 2018
# ww song <sww4718168@gmail.com>, 2018
# ppcfish <ppcfish@gmail.com>, 2019
# Kade For, 2019
# walkinrain <walkinrain2008@163.com>, 2019
# Pandaaaa906 <ye.pandaaaa906@gmail.com>, 2019
# Meng Du <alphanow@gmail.com>, 2019
# Liying Yang <xlctemp@gmail.com>, 2019
# weditor <weditor@163.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-01 14:24+0000\n"
"PO-Revision-Date: 2017-02-16 23:19+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/multiprocessing.rst:2
msgid ":mod:`multiprocessing` --- Process-based parallelism"
msgstr ":mod:`multiprocessing` --- 基于进程的并行"

#: ../../library/multiprocessing.rst:7
msgid "**Source code:** :source:`Lib/multiprocessing/`"
msgstr "**源代码** :source:`Lib/multiprocessing/`"

#: ../../library/multiprocessing.rst:12
msgid "Introduction"
msgstr "概述"

#: ../../library/multiprocessing.rst:14
msgid ""
":mod:`multiprocessing` is a package that supports spawning processes using "
"an API similar to the :mod:`threading` module.  The :mod:`multiprocessing` "
"package offers both local and remote concurrency, effectively side-stepping "
"the :term:`Global Interpreter Lock` by using subprocesses instead of "
"threads.  Due to this, the :mod:`multiprocessing` module allows the "
"programmer to fully leverage multiple processors on a given machine.  It "
"runs on both Unix and Windows."
msgstr ""
":mod:`multiprocessing` 是一个用与 :mod:`threading` 模块相似API的支持产生进程的包。 "
":mod:`multiprocessing` 包同时提供本地和远程并发，使用子进程代替线程，有效避免 :term:`Global Interpreter"
" Lock` 带来的影响。因此， :mod:`multiprocessing` 模块允许程序员充分利用机器上的多个核心。Unix 和 Windows "
"上都可以运行。"

#: ../../library/multiprocessing.rst:22
msgid ""
"The :mod:`multiprocessing` module also introduces APIs which do not have "
"analogs in the :mod:`threading` module.  A prime example of this is the "
":class:`~multiprocessing.pool.Pool` object which offers a convenient means "
"of parallelizing the execution of a function across multiple input values, "
"distributing the input data across processes (data parallelism).  The "
"following example demonstrates the common practice of defining such "
"functions in a module so that child processes can successfully import that "
"module.  This basic example of data parallelism using "
":class:`~multiprocessing.pool.Pool`, ::"
msgstr ""
":mod:`multiprocessing` 模块还引入了在 :mod:`threading` 模块中没有类似物的API。这方面的一个主要例子是 "
":class:`~multiprocessing.pool.Pool` "
"对象，它提供了一种方便的方法，可以跨多个输入值并行化函数的执行，跨进程分配输入数据（数据并行）。以下示例演示了在模块中定义此类函数的常见做法，以便子进程可以成功导入该模块。这个数据并行的基本例子使用"
" :class:`~multiprocessing.pool.Pool` ， ::"

#: ../../library/multiprocessing.rst:40
msgid "will print to standard output ::"
msgstr "将打印到标准输出 ::"

#: ../../library/multiprocessing.rst:46
msgid "The :class:`Process` class"
msgstr ":class:`Process` 类"

#: ../../library/multiprocessing.rst:48
msgid ""
"In :mod:`multiprocessing`, processes are spawned by creating a "
":class:`Process` object and then calling its :meth:`~Process.start` method."
"  :class:`Process` follows the API of :class:`threading.Thread`.  A trivial "
"example of a multiprocess program is ::"
msgstr ""
"在 :mod:`multiprocessing` 中，通过创建一个 :class:`Process` 对象然后调用它的 "
":meth:`~process.start` 方法来生成进程。 :class:`Process` 和 :class:`threading.Thread`"
" API 相同。 一个简单的多进程程序示例是::"

#: ../../library/multiprocessing.rst:63
msgid ""
"To show the individual process IDs involved, here is an expanded example::"
msgstr "要显示所涉及的各个进程ID，这是一个扩展示例::"

#: ../../library/multiprocessing.rst:84
msgid ""
"For an explanation of why the ``if __name__ == '__main__'`` part is "
"necessary, see :ref:`multiprocessing-programming`."
msgstr ""
"为了解释为什么 ``if __name__ == '__main__'`` 部分是必需的，请参见 :ref:`multiprocessing-"
"programming`。"

#: ../../library/multiprocessing.rst:90
msgid "Contexts and start methods"
msgstr "上下文和启动方法"

#: ../../library/multiprocessing.rst:94
msgid ""
"Depending on the platform, :mod:`multiprocessing` supports three ways to "
"start a process.  These *start methods* are"
msgstr "根据不同的平台， :mod:`multiprocessing` 支持三种启动进程的方法。这些 *启动方法* 有"

#: ../../library/multiprocessing.rst:105
msgid "*spawn*"
msgstr "*spawn*"

#: ../../library/multiprocessing.rst:98
msgid ""
"The parent process starts a fresh python interpreter process.  The child "
"process will only inherit those resources necessary to run the process "
"objects :meth:`~Process.run` method.  In particular, unnecessary file "
"descriptors and handles from the parent process will not be inherited.  "
"Starting a process using this method is rather slow compared to using *fork*"
" or *forkserver*."
msgstr ""
"父进程启动一个新的Python解释器进程。子进程只会继承那些运行进程对象的 :meth:`~Process.run` "
"方法所需的资源。特别是父进程中非必须的文件描述符和句柄不会被继承。相对于使用 *fork* 或者 *forkserver*，使用这个方法启动进程相当慢。"

#: ../../library/multiprocessing.rst:105
msgid "Available on Unix and Windows.  The default on Windows and macOS."
msgstr "可在Unix和Windows上使用。 Windows上的默认设置。"

#: ../../library/multiprocessing.rst:114
msgid "*fork*"
msgstr "*fork*"

#: ../../library/multiprocessing.rst:108
msgid ""
"The parent process uses :func:`os.fork` to fork the Python interpreter.  The"
" child process, when it begins, is effectively identical to the parent "
"process.  All resources of the parent are inherited by the child process.  "
"Note that safely forking a multithreaded process is problematic."
msgstr ""
"父进程使用 :func:`os.fork` 来产生 Python "
"解释器分叉。子进程在开始时实际上与父进程相同。父进程的所有资源都由子进程继承。请注意，安全分叉多线程进程是棘手的。"

#: ../../library/multiprocessing.rst:114
msgid "Available on Unix only.  The default on Unix."
msgstr "只存在于Unix。Unix中的默认值。"

#: ../../library/multiprocessing.rst:125
msgid "*forkserver*"
msgstr "*forkserver*"

#: ../../library/multiprocessing.rst:117
msgid ""
"When the program starts and selects the *forkserver* start method, a server "
"process is started.  From then on, whenever a new process is needed, the "
"parent process connects to the server and requests that it fork a new "
"process.  The fork server process is single threaded so it is safe for it to"
" use :func:`os.fork`.  No unnecessary resources are inherited."
msgstr ""
"程序启动并选择* forkserver * "
"启动方法时，将启动服务器进程。从那时起，每当需要一个新进程时，父进程就会连接到服务器并请求它分叉一个新进程。分叉服务器进程是单线程的，因此使用 "
":func:`os.fork`  是安全的。没有不必要的资源被继承。"

#: ../../library/multiprocessing.rst:124
msgid ""
"Available on Unix platforms which support passing file descriptors over Unix"
" pipes."
msgstr "可在Unix平台上使用，支持通过Unix管道传递文件描述符。"

#: ../../library/multiprocessing.rst:129
msgid ""
"On macOS, the *spawn* start method is now the default.  The *fork* start "
"method should be considered unsafe as it can lead to crashes of the "
"subprocess. See :issue:`33725`."
msgstr ""
"对于 macOS，*spawn* 启动方式是默认方式。 因为 *fork* 可能导致subprocess崩溃，被认为是不安全的，查看 "
":issue:`33725` 。"

#: ../../library/multiprocessing.rst:133
msgid ""
"*spawn* added on all unix platforms, and *forkserver* added for some unix "
"platforms. Child processes no longer inherit all of the parents inheritable "
"handles on Windows."
msgstr ""
"*spawn* 在所有unix平台上添加，并且为一些unix平台添加了 *forkserver* "
"。子进程不再继承Windows上的所有上级进程可继承的句柄。"

#: ../../library/multiprocessing.rst:139
msgid ""
"On Unix using the *spawn* or *forkserver* start methods will also start a "
"*resource tracker* process which tracks the unlinked named system resources "
"(such as named semaphores or "
":class:`~multiprocessing.shared_memory.SharedMemory` objects) created by "
"processes of the program.  When all processes have exited the resource "
"tracker unlinks any remaining tracked object. Usually there should be none, "
"but if a process was killed by a signal there may be some \"leaked\" "
"resources.  (Neither leaked semaphores nor shared memory segments will be "
"automatically unlinked until the next reboot. This is problematic for both "
"objects because the system allows only a limited number of named semaphores,"
" and shared memory segments occupy some space in the main memory.)"
msgstr ""
"在 Unix 上通过 *spawn* 和 *forkserver* 方式启动多进程会同时启动一个 *资源追踪* "
"进程，负责追踪当前程序的进程产生的、并且不再被使用的命名系统资源(如命名信号量以及 "
":class:`~multiprocessing.shared_memory.SharedMemory`  "
"对象)。当所有进程退出后，资源追踪会负责释放这些仍被追踪的的对象。通常情况下是不会有这种对象的，但是假如一个子进程被某个信号杀死，就可能存在这一类资源的“泄露”情况。（泄露的信号量以及共享内存不会被释放，直到下一次系统重启，对着两类资源来说，这是一个比较大的问题，因为操作系统允许的命名信号量是有限的，而共享内存也会占据主内存的一片空间）"

#: ../../library/multiprocessing.rst:152
msgid ""
"To select a start method you use the :func:`set_start_method` in the ``if "
"__name__ == '__main__'`` clause of the main module.  For example::"
msgstr ""
"要选择一个启动方法，你应该在主模块的 ``if __name__ == '__main__'`` 子句中调用 "
":func:`set_start_method` 。例如："

#: ../../library/multiprocessing.rst:169
msgid ""
":func:`set_start_method` should not be used more than once in the program."
msgstr "在程序中 :func:`set_start_method` 不应该被多次调用。"

#: ../../library/multiprocessing.rst:172
msgid ""
"Alternatively, you can use :func:`get_context` to obtain a context object.  "
"Context objects have the same API as the multiprocessing module, and allow "
"one to use multiple start methods in the same program. ::"
msgstr ""
"或者，你可以使用 :func:`get_context` "
"来获取上下文对象。上下文对象与多处理模块具有相同的API，并允许在同一程序中使用多个启动方法。::"

#: ../../library/multiprocessing.rst:190
msgid ""
"Note that objects related to one context may not be compatible with "
"processes for a different context.  In particular, locks created using the "
"*fork* context cannot be passed to processes started using the *spawn* or "
"*forkserver* start methods."
msgstr ""
"请注意，与一个上下文相关的对象可能与不同上下文的进程不兼容。特别是，使用 *fork* 上下文创建的锁不能传递给使用 *spawn* 或 "
"*forkserver* 启动方法启动的进程。"

#: ../../library/multiprocessing.rst:195
msgid ""
"A library which wants to use a particular start method should probably use "
":func:`get_context` to avoid interfering with the choice of the library "
"user."
msgstr "想要使用特定启动方法的库应该使用 :func:`get_context` 以避免干扰库用户的选择。"

#: ../../library/multiprocessing.rst:201
msgid ""
"The ``'spawn'`` and ``'forkserver'`` start methods cannot currently be used "
"with \"frozen\" executables (i.e., binaries produced by packages like "
"**PyInstaller** and **cx_Freeze**) on Unix. The ``'fork'`` start method does"
" work."
msgstr ""
"``'spawn'`` 和 ``'forkserver'`` 启动方法当前不能在Unix上和“冻结的”可执行内容一同使用（例如，有类似 "
"**PyInstaller** 和 **cx_Freeze** 的包产生的二进制文件）。 ``'fork'`` 启动方法可以使用。"

#: ../../library/multiprocessing.rst:208
msgid "Exchanging objects between processes"
msgstr "在进程之间交换对象"

#: ../../library/multiprocessing.rst:210
msgid ""
":mod:`multiprocessing` supports two types of communication channel between "
"processes:"
msgstr ":mod:`multiprocessing` 支持进程之间的两种通信通道："

#: ../../library/multiprocessing.rst:213
msgid "**Queues**"
msgstr "**队列**"

#: ../../library/multiprocessing.rst:215
msgid ""
"The :class:`Queue` class is a near clone of :class:`queue.Queue`.  For "
"example::"
msgstr ":class:`Queue` 类是一个近似 :class:`queue.Queue` 的克隆。 例如::"

#: ../../library/multiprocessing.rst:230
msgid "Queues are thread and process safe."
msgstr "队列是线程和进程安全的。"

#: ../../library/multiprocessing.rst:232
msgid "**Pipes**"
msgstr "**管道**"

#: ../../library/multiprocessing.rst:234
msgid ""
"The :func:`Pipe` function returns a pair of connection objects connected by "
"a pipe which by default is duplex (two-way).  For example::"
msgstr ":func:`Pipe` 函数返回一个由管道连接的连接对象，默认情况下是双工（双向）。例如::"

#: ../../library/multiprocessing.rst:250
msgid ""
"The two connection objects returned by :func:`Pipe` represent the two ends "
"of the pipe.  Each connection object has :meth:`~Connection.send` and "
":meth:`~Connection.recv` methods (among others).  Note that data in a pipe "
"may become corrupted if two processes (or threads) try to read from or write"
" to the *same* end of the pipe at the same time.  Of course there is no risk"
" of corruption from processes using different ends of the pipe at the same "
"time."
msgstr ""
"返回的两个连接对象 :func:`Pipe` 表示管道的两端。每个连接对象都有 :meth:`~Connection.send` 和 "
":meth:`~Connection.recv` 方法（相互之间的）。请注意，如果两个进程（或线程）同时尝试读取或写入管道的 *同一* "
"端，则管道中的数据可能会损坏。当然，同时使用管道的不同端的进程不存在损坏的风险。"

#: ../../library/multiprocessing.rst:260
msgid "Synchronization between processes"
msgstr "进程之间的同步"

#: ../../library/multiprocessing.rst:262
msgid ""
":mod:`multiprocessing` contains equivalents of all the synchronization "
"primitives from :mod:`threading`.  For instance one can use a lock to ensure"
" that only one process prints to standard output at a time::"
msgstr ""
":mod:`multiprocessing` 包含来自 :mod:`threading` "
"的所有同步基本体的等价物。例如，可以使用锁来确保一次只有一个进程打印到标准输出::"

#: ../../library/multiprocessing.rst:281
msgid ""
"Without using the lock output from the different processes is liable to get "
"all mixed up."
msgstr "不使用来自不同进程的锁输出容易产生混淆。"

#: ../../library/multiprocessing.rst:286
msgid "Sharing state between processes"
msgstr "在进程之间共享状态"

#: ../../library/multiprocessing.rst:288
msgid ""
"As mentioned above, when doing concurrent programming it is usually best to "
"avoid using shared state as far as possible.  This is particularly true when"
" using multiple processes."
msgstr "如上所述，在进行并发编程时，通常最好尽量避免使用共享状态。使用多个进程时尤其如此。"

#: ../../library/multiprocessing.rst:292
msgid ""
"However, if you really do need to use some shared data then "
":mod:`multiprocessing` provides a couple of ways of doing so."
msgstr "但是，如果你真的需要使用一些共享数据，那么 :mod:`multiprocessing` 提供了两种方法。"

#: ../../library/multiprocessing.rst:295
msgid "**Shared memory**"
msgstr "**共享内存**"

#: ../../library/multiprocessing.rst:297
msgid ""
"Data can be stored in a shared memory map using :class:`Value` or "
":class:`Array`.  For example, the following code ::"
msgstr "可以使用 :class:`Value` 或 :class:`Array` 将数据存储在共享内存映射中。例如，以下代码::"

#: ../../library/multiprocessing.rst:318 ../../library/multiprocessing.rst:364
msgid "will print ::"
msgstr "将打印 ::"

#: ../../library/multiprocessing.rst:323
msgid ""
"The ``'d'`` and ``'i'`` arguments used when creating ``num`` and ``arr`` are"
" typecodes of the kind used by the :mod:`array` module: ``'d'`` indicates a "
"double precision float and ``'i'`` indicates a signed integer.  These shared"
" objects will be process and thread-safe."
msgstr ""
"创建 ``num`` 和 ``arr`` 时使用的 ``'d'`` 和 ``'i'`` 参数是 :mod:`array` 模块使用的类型的 "
"typecode ： ``'d'`` 表示双精度浮点数， ``'i'`` 表示有符号整数。这些共享对象将是进程和线程安全的。"

#: ../../library/multiprocessing.rst:328
msgid ""
"For more flexibility in using shared memory one can use the "
":mod:`multiprocessing.sharedctypes` module which supports the creation of "
"arbitrary ctypes objects allocated from shared memory."
msgstr ""
"为了更灵活地使用共享内存，可以使用 :mod:`multiprocessing.sharedctypes` "
"模块，该模块支持创建从共享内存分配的任意ctypes对象。"

#: ../../library/multiprocessing.rst:332
msgid "**Server process**"
msgstr "**服务器进程**"

#: ../../library/multiprocessing.rst:334
msgid ""
"A manager object returned by :func:`Manager` controls a server process which"
" holds Python objects and allows other processes to manipulate them using "
"proxies."
msgstr "由 :func:`Manager` 返回的管理器对象控制一个服务器进程，该进程保存Python对象并允许其他进程使用代理操作它们。"

#: ../../library/multiprocessing.rst:338
msgid ""
"A manager returned by :func:`Manager` will support types :class:`list`, "
":class:`dict`, :class:`~managers.Namespace`, :class:`Lock`, :class:`RLock`, "
":class:`Semaphore`, :class:`BoundedSemaphore`, :class:`Condition`, "
":class:`Event`, :class:`Barrier`, :class:`Queue`, :class:`Value` and "
":class:`Array`.  For example, ::"
msgstr ""
":func:`Manager` 返回的管理器支持类型： :class:`list` 、 :class:`dict` 、 "
":class:`~managers.Namespace` 、 :class:`Lock` 、 :class:`RLock` 、 "
":class:`Semaphore` 、 :class:`BoundedSemaphore` 、 :class:`Condition` 、 "
":class:`Event` 、 :class:`Barrier` 、 :class:`Queue` 、 :class:`Value` 和 "
":class:`Array` 。例如 ::"

#: ../../library/multiprocessing.rst:369
msgid ""
"Server process managers are more flexible than using shared memory objects "
"because they can be made to support arbitrary object types.  Also, a single "
"manager can be shared by processes on different computers over a network. "
"They are, however, slower than using shared memory."
msgstr ""
"服务器进程管理器比使用共享内存对象更灵活，因为它们可以支持任意对象类型。此外，单个管理器可以通过网络由不同计算机上的进程共享。但是，它们比使用共享内存慢。"

#: ../../library/multiprocessing.rst:376
msgid "Using a pool of workers"
msgstr "使用工作进程"

#: ../../library/multiprocessing.rst:378
msgid ""
"The :class:`~multiprocessing.pool.Pool` class represents a pool of worker "
"processes.  It has methods which allows tasks to be offloaded to the worker "
"processes in a few different ways."
msgstr ""
":class:`~multiprocessing.pool.Pool` 类表示一个工作进程池。它具有允许以几种不同方式将任务分配到工作进程的方法。"

#: ../../library/multiprocessing.rst:382
msgid "For example::"
msgstr "例如::"

#: ../../library/multiprocessing.rst:426
msgid ""
"Note that the methods of a pool should only ever be used by the process "
"which created it."
msgstr "请注意，池的方法只能由创建它的进程使用。"

#: ../../library/multiprocessing.rst:431
msgid ""
"Functionality within this package requires that the ``__main__`` module be "
"importable by the children. This is covered in :ref:`multiprocessing-"
"programming` however it is worth pointing out here. This means that some "
"examples, such as the :class:`multiprocessing.pool.Pool` examples will not "
"work in the interactive interpreter. For example::"
msgstr ""
"该软件包中的功能要求子项可以导入 ``__main__`` 模块。这包含在 :ref:`multiprocessing-programming` "
"中，但值得指出。这意味着一些示例，例如 :class:`multiprocessing.pool.Pool` 示例在交互式解释器中不起作用。例如::"

#: ../../library/multiprocessing.rst:453
msgid ""
"(If you try this it will actually output three full tracebacks interleaved "
"in a semi-random fashion, and then you may have to stop the parent process "
"somehow.)"
msgstr "（如果尝试执行上面的代码，它会以一种半随机的方式将三个完整的堆栈内容交替输出，然后你只能以某种方式停止父进程。)"

#: ../../library/multiprocessing.rst:459
msgid "Reference"
msgstr "参考"

#: ../../library/multiprocessing.rst:461
msgid ""
"The :mod:`multiprocessing` package mostly replicates the API of the "
":mod:`threading` module."
msgstr ":mod:`multiprocessing` 包大部分复制了 :mod:`threading` 模块的API。"

#: ../../library/multiprocessing.rst:466
msgid ":class:`Process` and exceptions"
msgstr ":class:`Process` 和异常"

#: ../../library/multiprocessing.rst:471
msgid ""
"Process objects represent activity that is run in a separate process. The "
":class:`Process` class has equivalents of all the methods of "
":class:`threading.Thread`."
msgstr "进程对象表示在单独进程中运行的活动。 :class:`Process` 类等价于 :class:`threading.Thread` 。"

#: ../../library/multiprocessing.rst:475
msgid ""
"The constructor should always be called with keyword arguments. *group* "
"should always be ``None``; it exists solely for compatibility with "
":class:`threading.Thread`.  *target* is the callable object to be invoked by"
" the :meth:`run()` method.  It defaults to ``None``, meaning nothing is "
"called. *name* is the process name (see :attr:`name` for more details). "
"*args* is the argument tuple for the target invocation.  *kwargs* is a "
"dictionary of keyword arguments for the target invocation.  If provided, the"
" keyword-only *daemon* argument sets the process :attr:`daemon` flag to "
"``True`` or ``False``.  If ``None`` (the default), this flag will be "
"inherited from the creating process."
msgstr ""
"应始终使用关键字参数调用构造函数。 *group* 应该始终是 ``None`` ；它仅用于兼容 :class:`threading.Thread` 。"
" *target* 是由 :meth:`run()` 方法调用的可调用对象。它默认为 ``None`` ，意味着什么都没有被调用。 *name* "
"是进程名称（有关详细信息，请参阅 :attr:`name` ）。 *args* 是目标调用的参数元组。 *kwargs* "
"是目标调用的关键字参数字典。如果提供，则键参数 *daemon* 将进程 :attr:`daemon` 标志设置为 ``True`` 或 "
"``False`` 。如果是 ``None`` （默认值），则该标志将从创建的进程继承。"

#: ../../library/multiprocessing.rst:486
msgid "By default, no arguments are passed to *target*."
msgstr "默认情况下，不会将任何参数传递给 *target* 。"

#: ../../library/multiprocessing.rst:488
msgid ""
"If a subclass overrides the constructor, it must make sure it invokes the "
"base class constructor (:meth:`Process.__init__`) before doing anything else"
" to the process."
msgstr "如果子类重写构造函数，它必须确保它在对进程执行任何其他操作之前调用基类构造函数（ :meth:`Process.__init__` ）。"

#: ../../library/multiprocessing.rst:492
msgid "Added the *daemon* argument."
msgstr "加入 *daemon* 参数。"

#: ../../library/multiprocessing.rst:497
msgid "Method representing the process's activity."
msgstr "表示进程活动的方法。"

#: ../../library/multiprocessing.rst:499
msgid ""
"You may override this method in a subclass.  The standard :meth:`run` method"
" invokes the callable object passed to the object's constructor as the "
"target argument, if any, with sequential and keyword arguments taken from "
"the *args* and *kwargs* arguments, respectively."
msgstr ""
"你可以在子类中重载此方法。标准 :meth:`run` 方法调用传递给对象构造函数的可调用对象作为目标参数（如果有），分别从 *args* 和 "
"*kwargs* 参数中获取顺序和关键字参数。"

#: ../../library/multiprocessing.rst:506
msgid "Start the process's activity."
msgstr "启动进程活动。"

#: ../../library/multiprocessing.rst:508
msgid ""
"This must be called at most once per process object.  It arranges for the "
"object's :meth:`run` method to be invoked in a separate process."
msgstr "每个进程对象最多只能调用一次。它安排对象的 :meth:`run` 方法在一个单独的进程中调用。"

#: ../../library/multiprocessing.rst:513
msgid ""
"If the optional argument *timeout* is ``None`` (the default), the method "
"blocks until the process whose :meth:`join` method is called terminates. If "
"*timeout* is a positive number, it blocks at most *timeout* seconds. Note "
"that the method returns ``None`` if its process terminates or if the method "
"times out.  Check the process's :attr:`exitcode` to determine if it "
"terminated."
msgstr ""
"如果可选参数 *timeout* 是 ``None`` （默认值），则该方法将阻塞，直到调用 :meth:`join` 方法的进程终止。如果 "
"*timeout* 是一个正数，它最多会阻塞 *timeout* 秒。请注意，如果进程终止或方法超时，则该方法返回 ``None`` 。检查进程的 "
":attr:`exitcode` 以确定它是否终止。"

#: ../../library/multiprocessing.rst:520
msgid "A process can be joined many times."
msgstr "一个进程可以合并多次。"

#: ../../library/multiprocessing.rst:522
msgid ""
"A process cannot join itself because this would cause a deadlock.  It is an "
"error to attempt to join a process before it has been started."
msgstr "进程无法并入自身，因为这会导致死锁。尝试在启动进程之前合并进程是错误的。"

#: ../../library/multiprocessing.rst:527
msgid ""
"The process's name.  The name is a string used for identification purposes "
"only.  It has no semantics.  Multiple processes may be given the same name."
msgstr "进程的名称。该名称是一个字符串，仅用于识别目的。它没有语义。可以为多个进程指定相同的名称。"

#: ../../library/multiprocessing.rst:531
msgid ""
"The initial name is set by the constructor.  If no explicit name is provided"
" to the constructor, a name of the form 'Process-N\\ :sub:`1`:N\\ "
":sub:`2`:...:N\\ :sub:`k`' is constructed, where each N\\ :sub:`k` is the "
"N-th child of its parent."
msgstr ""
"初始名称由构造器设定。 如果没有为构造器提供显式名称，则会构造一个形式为 'Process-N\\ :sub:`1`:N\\ "
":sub:`2`:...:N\\ :sub:`k`' 的名称，其中每个 N\\ :sub:`k` 是其父亲的第 N 个孩子。"

#: ../../library/multiprocessing.rst:538
msgid "Return whether the process is alive."
msgstr "返回进程是否还活着。"

#: ../../library/multiprocessing.rst:540
msgid ""
"Roughly, a process object is alive from the moment the :meth:`start` method "
"returns until the child process terminates."
msgstr "粗略地说，从 :meth:`start` 方法返回到子进程终止之前，进程对象仍处于活动状态。"

#: ../../library/multiprocessing.rst:545
msgid ""
"The process's daemon flag, a Boolean value.  This must be set before "
":meth:`start` is called."
msgstr "进程的守护标志，一个布尔值。这必须在 :meth:`start` 被调用之前设置。"

#: ../../library/multiprocessing.rst:548
msgid "The initial value is inherited from the creating process."
msgstr "初始值继承自创建进程。"

#: ../../library/multiprocessing.rst:550
msgid ""
"When a process exits, it attempts to terminate all of its daemonic child "
"processes."
msgstr "当进程退出时，它会尝试终止其所有守护进程子进程。"

#: ../../library/multiprocessing.rst:553
msgid ""
"Note that a daemonic process is not allowed to create child processes. "
"Otherwise a daemonic process would leave its children orphaned if it gets "
"terminated when its parent process exits. Additionally, these are **not** "
"Unix daemons or services, they are normal processes that will be terminated "
"(and not joined) if non-daemonic processes have exited."
msgstr ""
"请注意，不允许守护进程创建子进程。否则，守护进程会在子进程退出时终止其子进程。 另外，这些 **不是** "
"Unix守护进程或服务，它们是正常进程，如果非守护进程已经退出，它们将被终止（并且不被合并）。"

#: ../../library/multiprocessing.rst:559
msgid ""
"In addition to the  :class:`threading.Thread` API, :class:`Process` objects "
"also support the following attributes and methods:"
msgstr "除了 :class:`threading.Thread` API ，:class:`Process` 对象还支持以下属性和方法："

#: ../../library/multiprocessing.rst:564
msgid ""
"Return the process ID.  Before the process is spawned, this will be "
"``None``."
msgstr "返回进程ID。在生成该进程之前，这将是 ``None`` 。"

#: ../../library/multiprocessing.rst:569
msgid ""
"The child's exit code.  This will be ``None`` if the process has not yet "
"terminated.  A negative value *-N* indicates that the child was terminated "
"by signal *N*."
msgstr "的退子进程出代码。如果进程尚未终止，这将是 ``None`` 。负值 *-N* 表示孩子被信号 *N* 终止。"

#: ../../library/multiprocessing.rst:575
msgid "The process's authentication key (a byte string)."
msgstr "进程的身份验证密钥（字节字符串）。"

#: ../../library/multiprocessing.rst:577
msgid ""
"When :mod:`multiprocessing` is initialized the main process is assigned a "
"random string using :func:`os.urandom`."
msgstr "当 :mod:`multiprocessing` 初始化时，主进程使用 :func:`os.urandom` 分配一个随机字符串。"

#: ../../library/multiprocessing.rst:580
msgid ""
"When a :class:`Process` object is created, it will inherit the "
"authentication key of its parent process, although this may be changed by "
"setting :attr:`authkey` to another byte string."
msgstr ""
"当创建 :class:`Process` 对象时，它将继承其父进程的身份验证密钥，尽管可以通过将 :attr:`authkey` "
"设置为另一个字节字符串来更改。"

#: ../../library/multiprocessing.rst:584
msgid "See :ref:`multiprocessing-auth-keys`."
msgstr "参见 :ref:`multiprocessing-auth-keys` 。"

#: ../../library/multiprocessing.rst:588
msgid ""
"A numeric handle of a system object which will become \"ready\" when the "
"process ends."
msgstr "系统对象的数字句柄，当进程结束时将变为 \"ready\" 。"

#: ../../library/multiprocessing.rst:591
msgid ""
"You can use this value if you want to wait on several events at once using "
":func:`multiprocessing.connection.wait`.  Otherwise calling :meth:`join()` "
"is simpler."
msgstr ""
"如果要使用 :func:`multiprocessing.connection.wait` 一次等待多个事件，可以使用此值。否则调用 "
":meth:`join()` 更简单。"

#: ../../library/multiprocessing.rst:595
msgid ""
"On Windows, this is an OS handle usable with the ``WaitForSingleObject`` and"
" ``WaitForMultipleObjects`` family of API calls.  On Unix, this is a file "
"descriptor usable with primitives from the :mod:`select` module."
msgstr ""
"在Windows上，这是一个操作系统句柄，可以与 ``WaitForSingleObject`` 和 "
"``WaitForMultipleObjects`` 系列API调用一起使用。在Unix上，这是一个文件描述符，可以使用来自 :mod:`select`"
" 模块的原语。"

#: ../../library/multiprocessing.rst:603
msgid ""
"Terminate the process.  On Unix this is done using the ``SIGTERM`` signal; "
"on Windows :c:func:`TerminateProcess` is used.  Note that exit handlers and "
"finally clauses, etc., will not be executed."
msgstr ""
"终止进程。 在Unix上，这是使用 ``SIGTERM`` 信号完成的；在Windows上使用 :c:func:`TerminateProcess` 。"
" 请注意，不会执行退出处理程序和finally子句等。"

#: ../../library/multiprocessing.rst:607
msgid ""
"Note that descendant processes of the process will *not* be terminated -- "
"they will simply become orphaned."
msgstr "请注意，进程的后代进程将不会被终止 —— 它们将简单地变成孤立的。"

#: ../../library/multiprocessing.rst:612
msgid ""
"If this method is used when the associated process is using a pipe or queue "
"then the pipe or queue is liable to become corrupted and may become unusable"
" by other process.  Similarly, if the process has acquired a lock or "
"semaphore etc. then terminating it is liable to cause other processes to "
"deadlock."
msgstr ""
"如果在关联进程使用管道或队列时使用此方法，则管道或队列可能会损坏，并可能无法被其他进程使用。类似地，如果进程已获得锁或信号量等，则终止它可能导致其他进程死锁。"

#: ../../library/multiprocessing.rst:620
msgid "Same as :meth:`terminate()` but using the ``SIGKILL`` signal on Unix."
msgstr "与 :meth:`terminate()` 相同，但在Unix上使用 ``SIGKILL`` 信号。"

#: ../../library/multiprocessing.rst:626
msgid ""
"Close the :class:`Process` object, releasing all resources associated with "
"it.  :exc:`ValueError` is raised if the underlying process is still running."
"  Once :meth:`close` returns successfully, most other methods and attributes"
" of the :class:`Process` object will raise :exc:`ValueError`."
msgstr ""
"关闭 :class:`Process` 对象，释放与之关联的所有资源。如果底层进程仍在运行，则会引发 :exc:`ValueError` 。一旦 "
":meth:`close` 成功返回， :class:`Process` 对象的大多数其他方法和属性将引发 :exc:`ValueError` 。"

#: ../../library/multiprocessing.rst:634
msgid ""
"Note that the :meth:`start`, :meth:`join`, :meth:`is_alive`, "
":meth:`terminate` and :attr:`exitcode` methods should only be called by the "
"process that created the process object."
msgstr ""
"注意 :meth:`start` 、 :meth:`join` 、 :meth:`is_alive` 、 :meth:`terminate` 和 "
":attr:`exitcode` 方法只能由创建进程对象的进程调用。"

#: ../../library/multiprocessing.rst:638
msgid "Example usage of some of the methods of :class:`Process`:"
msgstr ":class:`Process` 一些方法的示例用法："

#: ../../library/multiprocessing.rst:659
msgid "The base class of all :mod:`multiprocessing` exceptions."
msgstr "所有 :mod:`multiprocessing` 异常的基类。"

#: ../../library/multiprocessing.rst:663
msgid ""
"Exception raised by :meth:`Connection.recv_bytes_into()` when the supplied "
"buffer object is too small for the message read."
msgstr "当提供的缓冲区对象太小而无法读取消息时， :meth:`Connection.recv_bytes_into()` 引发的异常。"

#: ../../library/multiprocessing.rst:666
msgid ""
"If ``e`` is an instance of :exc:`BufferTooShort` then ``e.args[0]`` will "
"give the message as a byte string."
msgstr "如果 ``e`` 是一个 :exc:`BufferTooShort` 实例，那么 ``e.args[0]`` 将把消息作为字节字符串给出。"

#: ../../library/multiprocessing.rst:671
msgid "Raised when there is an authentication error."
msgstr "出现身份验证错误时引发。"

#: ../../library/multiprocessing.rst:675
msgid "Raised by methods with a timeout when the timeout expires."
msgstr "有超时的方法超时时引发。"

#: ../../library/multiprocessing.rst:678
msgid "Pipes and Queues"
msgstr "管道和队列"

#: ../../library/multiprocessing.rst:680
msgid ""
"When using multiple processes, one generally uses message passing for "
"communication between processes and avoids having to use any synchronization"
" primitives like locks."
msgstr "使用多进程时，一般使用消息机制实现进程间通信，尽可能避免使用同步原语，例如锁。"

#: ../../library/multiprocessing.rst:684
msgid ""
"For passing messages one can use :func:`Pipe` (for a connection between two "
"processes) or a queue (which allows multiple producers and consumers)."
msgstr "消息机制包含： :func:`Pipe` (可以用于在两个进程间传递消息)，以及队列(能够在多个生产者和消费者之间通信)。"

#: ../../library/multiprocessing.rst:687
msgid ""
"The :class:`Queue`, :class:`SimpleQueue` and :class:`JoinableQueue` types "
"are multi-producer, multi-consumer :abbr:`FIFO (first-in, first-out)` queues"
" modelled on the :class:`queue.Queue` class in the standard library.  They "
"differ in that :class:`Queue` lacks the :meth:`~queue.Queue.task_done` and "
":meth:`~queue.Queue.join` methods introduced into Python 2.5's "
":class:`queue.Queue` class."
msgstr ""
" :class:`Queue`, :class:`SimpleQueue` 以及 :class:`JoinableQueue` "
"都是多生产者，多消费者，并且实现了 :abbr:`FIFO (first-in, first-out)` 的队列类型，其表现与标准库中的 "
":class:`queue.Queue` 类相似。 不同在于 :class:`Queue`  缺少标准库的 :class:`queue.Queue` "
"从Python 2.5 开始引入的 :meth:`~queue.Queue.task_done` 和 :meth:`~queue.Queue.join`"
" 方法。"

#: ../../library/multiprocessing.rst:694
msgid ""
"If you use :class:`JoinableQueue` then you **must** call "
":meth:`JoinableQueue.task_done` for each task removed from the queue or else"
" the semaphore used to count the number of unfinished tasks may eventually "
"overflow, raising an exception."
msgstr ""
"如果你使用了 :class:`JoinableQueue` ，那么你**必须**对每个已经移出队列的任务调用 "
":meth:`JoinableQueue.task_done` 。不然的话用于统计未完成任务的信号量最终会溢出并抛出异常。"

#: ../../library/multiprocessing.rst:699
msgid ""
"Note that one can also create a shared queue by using a manager object -- "
"see :ref:`multiprocessing-managers`."
msgstr "另外还可以通过使用一个管理器对象创建一个共享队列，详见  :ref:`multiprocessing-managers` 。"

#: ../../library/multiprocessing.rst:704
msgid ""
":mod:`multiprocessing` uses the usual :exc:`queue.Empty` and "
":exc:`queue.Full` exceptions to signal a timeout.  They are not available in"
" the :mod:`multiprocessing` namespace so you need to import them from "
":mod:`queue`."
msgstr ""
":mod:`multiprocessing` 使用了普通的 :exc:`queue.Empty` 和 :exc:`queue.Full` "
"异常去表示超时。 你需要从 :mod:`queue` 中导入它们，因为它们并不在 :mod:`multiprocessing` 的命名空间中。"

#: ../../library/multiprocessing.rst:711
msgid ""
"When an object is put on a queue, the object is pickled and a background "
"thread later flushes the pickled data to an underlying pipe.  This has some "
"consequences which are a little surprising, but should not cause any "
"practical difficulties -- if they really bother you then you can instead use"
" a queue created with a :ref:`manager <multiprocessing-managers>`."
msgstr ""
"当一个对象被放入一个队列中时，这个对象首先会被一个后台线程用pickle序列化，并将序列化后的数据通过一个底层管道的管道传递到队列中。这种做法会有点让人惊讶，但一般不会出现什么问题。如果它们确实妨碍了你，你可以使用一个由管理器"
" :ref:`manager <multiprocessing-managers>` 创建的队列替换它。"

#: ../../library/multiprocessing.rst:718
msgid ""
"After putting an object on an empty queue there may be an infinitesimal "
"delay before the queue's :meth:`~Queue.empty` method returns :const:`False` "
"and :meth:`~Queue.get_nowait` can return without raising :exc:`queue.Empty`."
msgstr ""
"将一个对象放入一个空队列后，可能需要极小的延迟，队列的方法 :meth:`~Queue.empty`  才会返回  :const:`False` 。而"
"  :meth:`~Queue.get_nowait` 可以不抛出 :exc:`queue.Empty` 直接返回。"

#: ../../library/multiprocessing.rst:723
msgid ""
"If multiple processes are enqueuing objects, it is possible for the objects "
"to be received at the other end out-of-order. However, objects enqueued by "
"the same process will always be in the expected order with respect to each "
"other."
msgstr ""
"如果有多个进程同时将对象放入队列，那么在队列的另一端接受到的对象可能是无序的。但是由同一个进程放入的多个对象的顺序在另一端输出时总是一样的。"

#: ../../library/multiprocessing.rst:730
msgid ""
"If a process is killed using :meth:`Process.terminate` or :func:`os.kill` "
"while it is trying to use a :class:`Queue`, then the data in the queue is "
"likely to become corrupted.  This may cause any other process to get an "
"exception when it tries to use the queue later on."
msgstr ""
"如果一个进程通过调用 :meth:`Process.terminate` 或 :func:`os.kill` 在尝试使用 :class:`Queue` "
"期间被终止了，那么队列中的数据很可能被破坏。 这可能导致其他进程在尝试使用该队列时遇到异常。"

#: ../../library/multiprocessing.rst:737
msgid ""
"As mentioned above, if a child process has put items on a queue (and it has "
"not used :meth:`JoinableQueue.cancel_join_thread "
"<multiprocessing.Queue.cancel_join_thread>`), then that process will not "
"terminate until all buffered items have been flushed to the pipe."
msgstr ""
"正如刚才提到的，如果一个子进程将一些对象放进队列中 (并且它没有用  :meth:`JoinableQueue.cancel_join_thread "
"<multiprocessing.Queue.cancel_join_thread>` "
"方法)，那么这个进程在所有缓冲区的对象被刷新进管道之前，是不会终止的。"

#: ../../library/multiprocessing.rst:742
msgid ""
"This means that if you try joining that process you may get a deadlock "
"unless you are sure that all items which have been put on the queue have "
"been consumed.  Similarly, if the child process is non-daemonic then the "
"parent process may hang on exit when it tries to join all its non-daemonic "
"children."
msgstr ""
"这意味着，除非你确定所有放入队列中的对象都已经被消费了，否则如果你试图等待这个进程，你可能会陷入死锁中。相似地，如果该子进程不是后台进程，那么父进程可能在试图等待所有非后台进程退出时挂起。"

#: ../../library/multiprocessing.rst:747
msgid ""
"Note that a queue created using a manager does not have this issue.  See "
":ref:`multiprocessing-programming`."
msgstr "注意用管理器创建的队列不存在这个问题，详见  :ref:`multiprocessing-programming` 。"

#: ../../library/multiprocessing.rst:750
msgid ""
"For an example of the usage of queues for interprocess communication see "
":ref:`multiprocessing-examples`."
msgstr "该 :ref:`multiprocessing-examples` 展示了如何使用队列实现进程间通信。"

#: ../../library/multiprocessing.rst:756
msgid ""
"Returns a pair ``(conn1, conn2)`` of "
":class:`~multiprocessing.connection.Connection` objects representing the "
"ends of a pipe."
msgstr ""
"返回一对 :class:`~multiprocessing.connection.Connection`对象  ``(conn1, conn2)`` ，"
" 分别表示管道的两端。 "

#: ../../library/multiprocessing.rst:760
msgid ""
"If *duplex* is ``True`` (the default) then the pipe is bidirectional.  If "
"*duplex* is ``False`` then the pipe is unidirectional: ``conn1`` can only be"
" used for receiving messages and ``conn2`` can only be used for sending "
"messages."
msgstr ""
"如果 *duplex* 被置为 ``True`` (默认值)，那么该管道是双向的。如果 *duplex* 被置为 ``False`` "
"，那么该管道是单向的，即 ``conn1`` 只能用于接收消息，而  ``conn2`` 仅能用于发送消息。"

#: ../../library/multiprocessing.rst:768
msgid ""
"Returns a process shared queue implemented using a pipe and a few "
"locks/semaphores.  When a process first puts an item on the queue a feeder "
"thread is started which transfers objects from a buffer into the pipe."
msgstr "返回一个使用一个管道和少量锁和信号量实现的共享队列实例。当一个进程将一个对象放进队列中时，一个写入线程会启动并将对象从缓冲区写入管道中。"

#: ../../library/multiprocessing.rst:772
msgid ""
"The usual :exc:`queue.Empty` and :exc:`queue.Full` exceptions from the "
"standard library's :mod:`queue` module are raised to signal timeouts."
msgstr ""
"一旦超时，将抛出标准库 :mod:`queue`  模块中常见的异常 :exc:`queue.Empty` 和 :exc:`queue.Full`。"

#: ../../library/multiprocessing.rst:775
msgid ""
":class:`Queue` implements all the methods of :class:`queue.Queue` except for"
" :meth:`~queue.Queue.task_done` and :meth:`~queue.Queue.join`."
msgstr ""
"除了 :meth:`~queue.Queue.task_done` 和 :meth:`~queue.Queue.join` "
"之外，:class:`Queue`  实现了标准库类 :class:`queue.Queue` 中所有的方法。"

#: ../../library/multiprocessing.rst:780
msgid ""
"Return the approximate size of the queue.  Because of "
"multithreading/multiprocessing semantics, this number is not reliable."
msgstr "返回队列的大致长度。由于多线程或者多进程的上下文，这个数字是不可靠的。"

#: ../../library/multiprocessing.rst:783
msgid ""
"Note that this may raise :exc:`NotImplementedError` on Unix platforms like "
"Mac OS X where ``sem_getvalue()`` is not implemented."
msgstr ""
"注意，在 Unix 平台上，例如 Mac OS X ，这个方法可能会抛出 :exc:`NotImplementedError`  "
"异常，因为该平台没有实现 ``sem_getvalue()`` 。"

#: ../../library/multiprocessing.rst:788
msgid ""
"Return ``True`` if the queue is empty, ``False`` otherwise.  Because of "
"multithreading/multiprocessing semantics, this is not reliable."
msgstr "如果队列是空的，返回 ``True`` ，反之返回 ``False`` 。 由于多线程或多进程的环境，该状态是不可靠的。"

#: ../../library/multiprocessing.rst:793
msgid ""
"Return ``True`` if the queue is full, ``False`` otherwise.  Because of "
"multithreading/multiprocessing semantics, this is not reliable."
msgstr "如果队列是满的，返回 ``True`` ，反之返回 ``False`` 。 由于多线程或多进程的环境，该状态是不可靠的。"

#: ../../library/multiprocessing.rst:798
msgid ""
"Put obj into the queue.  If the optional argument *block* is ``True`` (the "
"default) and *timeout* is ``None`` (the default), block if necessary until a"
" free slot is available.  If *timeout* is a positive number, it blocks at "
"most *timeout* seconds and raises the :exc:`queue.Full` exception if no free"
" slot was available within that time.  Otherwise (*block* is ``False``), put"
" an item on the queue if a free slot is immediately available, else raise "
"the :exc:`queue.Full` exception (*timeout* is ignored in that case)."
msgstr ""
"将 obj 放入队列。如果可选参数 *block* 是 ``True`` (默认值) 而且 *timeout* 是 ``None`` (默认值), "
"将会阻塞当前进程，直到有空的缓冲槽。如果 *timeout* 是正数，将会在阻塞了最多 *timeout* 秒之后还是没有可用的缓冲槽时抛出 "
":exc:`queue.Full`  异常。反之 (*block* 是 ``False`` 时)，仅当有可用缓冲槽时才放入对象，否则抛出 "
":exc:`queue.Full` 异常 (在这种情形下 *timeout* 参数会被忽略)。"

#: ../../library/multiprocessing.rst:807
msgid ""
"If the queue is closed, :exc:`ValueError` is raised instead of "
":exc:`AssertionError`."
msgstr "如果队列已经关闭，会抛出  :exc:`ValueError`  而不是  :exc:`AssertionError` 。"

#: ../../library/multiprocessing.rst:813
msgid "Equivalent to ``put(obj, False)``."
msgstr "相当于 ``put(obj, False)``。"

#: ../../library/multiprocessing.rst:817
msgid ""
"Remove and return an item from the queue.  If optional args *block* is "
"``True`` (the default) and *timeout* is ``None`` (the default), block if "
"necessary until an item is available.  If *timeout* is a positive number, it"
" blocks at most *timeout* seconds and raises the :exc:`queue.Empty` "
"exception if no item was available within that time.  Otherwise (block is "
"``False``), return an item if one is immediately available, else raise the "
":exc:`queue.Empty` exception (*timeout* is ignored in that case)."
msgstr ""
"从队列中取出并返回对象。如果可选参数 *block* 是 ``True`` (默认值) 而且 *timeout* 是 ``None`` (默认值), "
"将会阻塞当前进程，直到队列中出现可用的对象。如果 *timeout* 是正数，将会在阻塞了最多 *timeout* 秒之后还是没有可用的对象时抛出 "
":exc:`queue.Empty` 异常。反之 (*block* 是 ``False`` 时)，仅当有可用对象能够取出时返回，否则抛出 "
":exc:`queue.Empty` 异常 (在这种情形下 *timeout* 参数会被忽略)。"

#: ../../library/multiprocessing.rst:825
msgid ""
"If the queue is closed, :exc:`ValueError` is raised instead of "
":exc:`OSError`."
msgstr "如果队列已经关闭，会抛出 :exc:`ValueError` 而不是 :exc:`OSError` 。"

#: ../../library/multiprocessing.rst:831
msgid "Equivalent to ``get(False)``."
msgstr "相当于 ``get(False)``。"

#: ../../library/multiprocessing.rst:833
msgid ""
":class:`multiprocessing.Queue` has a few additional methods not found in "
":class:`queue.Queue`.  These methods are usually unnecessary for most code:"
msgstr ""
":class:`multiprocessing.Queue` 类有一些在 :class:`queue.Queue` "
"类中没有出现的方法。这些方法在大多数情形下并不是必须的。 "

#: ../../library/multiprocessing.rst:839
msgid ""
"Indicate that no more data will be put on this queue by the current process."
"  The background thread will quit once it has flushed all buffered data to "
"the pipe.  This is called automatically when the queue is garbage collected."
msgstr "指示当前进程将不会再往队列中放入对象。一旦所有缓冲区中的数据被写入管道之后，后台的线程会退出。这个方法在队列被gc回收时会自动调用。"

#: ../../library/multiprocessing.rst:846
msgid ""
"Join the background thread.  This can only be used after :meth:`close` has "
"been called.  It blocks until the background thread exits, ensuring that all"
" data in the buffer has been flushed to the pipe."
msgstr ""
"等待后台线程。这个方法仅在调用了 :meth:`close` 方法之后可用。这会阻塞当前进程，直到后台线程退出，确保所有缓冲区中的数据都被写入管道中。"

#: ../../library/multiprocessing.rst:850
msgid ""
"By default if a process is not the creator of the queue then on exit it will"
" attempt to join the queue's background thread.  The process can call "
":meth:`cancel_join_thread` to make :meth:`join_thread` do nothing."
msgstr ""
"默认情况下，如果一个不是队列创建者的进程试图退出，它会尝试等待这个队列的后台线程。这个进程可以使用  "
":meth:`cancel_join_thread` 让  :meth:`join_thread` 方法什么都不做直接跳过。"

#: ../../library/multiprocessing.rst:856
msgid ""
"Prevent :meth:`join_thread` from blocking.  In particular, this prevents the"
" background thread from being joined automatically when the process exits --"
" see :meth:`join_thread`."
msgstr ""
"防止 :meth:`join_thread` 方法阻塞当前进程。具体而言，这防止进程退出时自动等待后台线程退出。详见 "
":meth:`join_thread`。"

#: ../../library/multiprocessing.rst:860
msgid ""
"A better name for this method might be ``allow_exit_without_flush()``.  It "
"is likely to cause enqueued data to lost, and you almost certainly will not "
"need to use it. It is really only there if you need the current process to "
"exit immediately without waiting to flush enqueued data to the underlying "
"pipe, and you don't care about lost data."
msgstr ""
"可能这个方法称为”``allow_exit_without_flush()``“ "
"会更好。这有可能会导致正在排队进入队列的数据丢失，大多数情况下你不需要用到这个方法，仅当你不关心底层管道中可能丢失的数据，只是希望进程能够马上退出时使用。"

#: ../../library/multiprocessing.rst:869
msgid ""
"This class's functionality requires a functioning shared semaphore "
"implementation on the host operating system. Without one, the functionality "
"in this class will be disabled, and attempts to instantiate a :class:`Queue`"
" will result in an :exc:`ImportError`. See :issue:`3770` for additional "
"information.  The same holds true for any of the specialized queue types "
"listed below."
msgstr ""
"该类的功能依赖于宿主操作系统具有可用的共享信号量实现。否则该类将被禁用，任何试图实例化一个 :class:`Queue` 对象的操作都会抛出 "
":exc:`ImportError` 异常，更多信息详见 :issue:`3770` 。后续说明的任何专用队列对象亦如此。"

#: ../../library/multiprocessing.rst:878
msgid ""
"It is a simplified :class:`Queue` type, very close to a locked "
":class:`Pipe`."
msgstr "这是一个简化的 :class:`Queue` 类的实现，很像带锁的 :class:`Pipe` 。"

#: ../../library/multiprocessing.rst:882
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr "如果队列为空返回 ``True`` ，否则返回 ``False`` 。"

#: ../../library/multiprocessing.rst:886
msgid "Remove and return an item from the queue."
msgstr "从队列中移出并返回一个对象。"

#: ../../library/multiprocessing.rst:890
msgid "Put *item* into the queue."
msgstr "将  *item* 放入队列。"

#: ../../library/multiprocessing.rst:895
msgid ""
":class:`JoinableQueue`, a :class:`Queue` subclass, is a queue which "
"additionally has :meth:`task_done` and :meth:`join` methods."
msgstr ""
":class:`JoinableQueue` 类是 :class:`Queue` 的子类，额外添加了 :meth:`task_done` 和 "
":meth:`join` 方法。"

#: ../../library/multiprocessing.rst:900
msgid ""
"Indicate that a formerly enqueued task is complete. Used by queue consumers."
"  For each :meth:`~Queue.get` used to fetch a task, a subsequent call to "
":meth:`task_done` tells the queue that the processing on the task is "
"complete."
msgstr ""
"指出之前进入队列的任务已经完成。由队列的消费者进程使用。对于每次调用  :meth:`~Queue.get`  获取的任务，执行完成后调用  "
":meth:`task_done`  告诉队列该任务已经处理完成。"

#: ../../library/multiprocessing.rst:905
msgid ""
"If a :meth:`~queue.Queue.join` is currently blocking, it will resume when "
"all items have been processed (meaning that a :meth:`task_done` call was "
"received for every item that had been :meth:`~Queue.put` into the queue)."
msgstr ""
"如果 :meth:`~queue.Queue.join` 方法正在阻塞之中，该方法会在所有对象都被处理完的时候返回 (即对之前使用  "
":meth:`~Queue.put`  放进队列中的所有对象都已经返回了对应的  :meth:`task_done`  ) 。"

#: ../../library/multiprocessing.rst:909
msgid ""
"Raises a :exc:`ValueError` if called more times than there were items placed"
" in the queue."
msgstr "如果被调用的次数多于放入队列中的项目数量，将引发 :exc:`ValueError` 异常 。"

#: ../../library/multiprocessing.rst:915
msgid "Block until all items in the queue have been gotten and processed."
msgstr "阻塞至队列中所有的元素都被接收和处理完毕。"

#: ../../library/multiprocessing.rst:917
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue.  The count goes down whenever a consumer calls :meth:`task_done` to "
"indicate that the item was retrieved and all work on it is complete.  When "
"the count of unfinished tasks drops to zero, :meth:`~queue.Queue.join` "
"unblocks."
msgstr ""
"当条目添加到队列的时候，未完成任务的计数就会增加。每当消费者进程调用 :meth:`task_done` "
"表示这个条目已经被回收，该条目所有工作已经完成，未完成计数就会减少。当未完成计数降到零的时候， :meth:`join` 阻塞被解除。"

#: ../../library/multiprocessing.rst:925
msgid "Miscellaneous"
msgstr "杂项"

#: ../../library/multiprocessing.rst:929
msgid "Return list of all live children of the current process."
msgstr "返回当前进程存活的子进程的列表。"

#: ../../library/multiprocessing.rst:931
msgid ""
"Calling this has the side effect of \"joining\" any processes which have "
"already finished."
msgstr "调用该方法有“等待”已经结束的进程的副作用。"

#: ../../library/multiprocessing.rst:936
msgid "Return the number of CPUs in the system."
msgstr "返回系统的CPU数量。"

#: ../../library/multiprocessing.rst:938
msgid ""
"This number is not equivalent to the number of CPUs the current process can "
"use.  The number of usable CPUs can be obtained with "
"``len(os.sched_getaffinity(0))``"
msgstr ""
"该数量不同于当前进程可以使用的CPU数量。可用的CPU数量可以由 ``len(os.sched_getaffinity(0))`` 方法获得。"

#: ../../library/multiprocessing.rst:942
msgid "May raise :exc:`NotImplementedError`."
msgstr "可能引发 :exc:`NotImplementedError` 。"

#: ../../library/multiprocessing.rst:945
msgid ":func:`os.cpu_count`"
msgstr ":func:`os.cpu_count`"

#: ../../library/multiprocessing.rst:949
msgid ""
"Return the :class:`Process` object corresponding to the current process."
msgstr "返回与当前进程相对应的 :class:`Process` 对象。"

#: ../../library/multiprocessing.rst:951
msgid "An analogue of :func:`threading.current_thread`."
msgstr "和 :func:`threading.current_thread` 相同。"

#: ../../library/multiprocessing.rst:955
msgid ""
"Return the :class:`Process` object corresponding to the parent process of "
"the :func:`current_process`. For the main process, ``parent_process`` will "
"be ``None``."
msgstr ""
"返回父进程  :class:`Process`  对象，和父进程调用 :func:`current_process` "
"返回的对象一样。如果一个进程已经是主进程， ``parent_process`` 会返回 ``None``."

#: ../../library/multiprocessing.rst:963
msgid ""
"Add support for when a program which uses :mod:`multiprocessing` has been "
"frozen to produce a Windows executable.  (Has been tested with **py2exe**, "
"**PyInstaller** and **cx_Freeze**.)"
msgstr ""
"为使用了 :mod:`multiprocessing`  的程序，提供冻结以产生 Windows 可执行文件的支持。(在 **py2exe**, "
"**PyInstaller** 和 **cx_Freeze** 上测试通过)"

#: ../../library/multiprocessing.rst:967
msgid ""
"One needs to call this function straight after the ``if __name__ == "
"'__main__'`` line of the main module.  For example::"
msgstr "需要在 main 模块的 ``if __name__ == '__main__'`` 该行之后马上调用该函数。例如："

#: ../../library/multiprocessing.rst:979
msgid ""
"If the ``freeze_support()`` line is omitted then trying to run the frozen "
"executable will raise :exc:`RuntimeError`."
msgstr ""
"如果没有调用  ``freeze_support()`` 在尝试运行被冻结的可执行文件时会抛出 :exc:`RuntimeError` 异常。"

#: ../../library/multiprocessing.rst:982
msgid ""
"Calling ``freeze_support()`` has no effect when invoked on any operating "
"system other than Windows.  In addition, if the module is being run normally"
" by the Python interpreter on Windows (the program has not been frozen), "
"then ``freeze_support()`` has no effect."
msgstr ""
"对  ``freeze_support()`` 的调用在非 Windows 平台上是无效的。如果该模块在 Windows 平台的 Python "
"解释器中正常运行 (该程序没有被冻结)， 调用``freeze_support()`` 也是无效的。"

#: ../../library/multiprocessing.rst:989
msgid ""
"Returns a list of the supported start methods, the first of which is the "
"default.  The possible start methods are ``'fork'``, ``'spawn'`` and "
"``'forkserver'``.  On Windows only ``'spawn'`` is available.  On Unix "
"``'fork'`` and ``'spawn'`` are always supported, with ``'fork'`` being the "
"default."
msgstr ""
"返回支持的启动方法的列表，该列表的首项即为默认选项。可能的启动方法有  ``'fork'``, ``'spawn'`` "
"和``'forkserver'``。在 Windows 中，只有  ``'spawn'`` 是可用的。Unix平台总是支持``'fork'`` "
"和``'spawn'``，且 ``'fork'`` 是默认值。 "

#: ../../library/multiprocessing.rst:999
msgid ""
"Return a context object which has the same attributes as the "
":mod:`multiprocessing` module."
msgstr "返回一个 Context 对象。该对象具有和 :mod:`multiprocessing` 模块相同的API。"

#: ../../library/multiprocessing.rst:1002
msgid ""
"If *method* is ``None`` then the default context is returned. Otherwise "
"*method* should be ``'fork'``, ``'spawn'``, ``'forkserver'``.  "
":exc:`ValueError` is raised if the specified start method is not available."
msgstr ""
"如果 *method* 设置成  ``None``  那么将返回默认上下文对象。否则  *method*  应该是 ``'fork'``, "
"``'spawn'``, ``'forkserver'`` 。 如果指定的启动方法不存在，将抛出  :exc:`ValueError`  异常。 "

#: ../../library/multiprocessing.rst:1011
msgid "Return the name of start method used for starting processes."
msgstr "返回启动进程时使用的启动方法名。"

#: ../../library/multiprocessing.rst:1013
msgid ""
"If the start method has not been fixed and *allow_none* is false, then the "
"start method is fixed to the default and the name is returned.  If the start"
" method has not been fixed and *allow_none* is true then ``None`` is "
"returned."
msgstr ""
"如果启动方法已经固定，并且   *allow_none* 被设置成 False "
"，那么启动方法将被固定为默认的启动方法，并且返回其方法名。如果启动方法没有设定，并且 *allow_none* 被设置成 True ，那么将返回  "
"``None``  。"

#: ../../library/multiprocessing.rst:1018
msgid ""
"The return value can be ``'fork'``, ``'spawn'``, ``'forkserver'`` or "
"``None``.  ``'fork'`` is the default on Unix, while ``'spawn'`` is the "
"default on Windows."
msgstr ""
"返回值将为   ``'fork'``  ,  ``'spawn'`` ,  ``'forkserver'``   或者   ``None``  。  "
"``'fork'``是 Unix 的默认值，   ``'spawn'``  是 Windows 的默认值。"

#: ../../library/multiprocessing.rst:1026
msgid ""
"Sets the path of the Python interpreter to use when starting a child "
"process. (By default :data:`sys.executable` is used).  Embedders will "
"probably need to do some thing like ::"
msgstr ""
"设置在启动子进程时使用的 Python 解释器路径。 ( 默认使用  :data:`sys.executable`  ) 嵌入式编程人员可能需要这样做："

#: ../../library/multiprocessing.rst:1032
msgid "before they can create child processes."
msgstr "以使他们可以创建子进程。"

#: ../../library/multiprocessing.rst:1034
msgid "Now supported on Unix when the ``'spawn'`` start method is used."
msgstr "现在在 Unix 平台上使用  ``'spawn'``  启动方法时支持调用该方法。"

#: ../../library/multiprocessing.rst:1039
msgid ""
"Set the method which should be used to start child processes. *method* can "
"be ``'fork'``, ``'spawn'`` or ``'forkserver'``."
msgstr ""
"设置启动子进程的方法。 *method*  可以是  ``'fork'`` ,  ``'spawn'``  或者 ``'forkserver'``  。"

#: ../../library/multiprocessing.rst:1042
msgid ""
"Note that this should be called at most once, and it should be protected "
"inside the ``if __name__ == '__main__'`` clause of the main module."
msgstr "注意这最多只能调用一次，并且需要藏在 main 模块中，由  ``if __name__ == '__main__'``  保护着。"

#: ../../library/multiprocessing.rst:1050
msgid ""
":mod:`multiprocessing` contains no analogues of "
":func:`threading.active_count`, :func:`threading.enumerate`, "
":func:`threading.settrace`, :func:`threading.setprofile`, "
":class:`threading.Timer`, or :class:`threading.local`."
msgstr ""
":mod:`multiprocessing`   并没有包含类似  :func:`threading.active_count` , "
":func:`threading.enumerate` ,  :func:`threading.settrace` , "
":func:`threading.setprofile`, :class:`threading.Timer` ,  或者 "
":class:`threading.local`  的方法和类。"

#: ../../library/multiprocessing.rst:1057
msgid "Connection Objects"
msgstr "连接（Connection）对象"

#: ../../library/multiprocessing.rst:1061
msgid ""
"Connection objects allow the sending and receiving of picklable objects or "
"strings.  They can be thought of as message oriented connected sockets."
msgstr "Connection 对象允许收发可以序列化的对象或字符串。它们可以看作面向消息的连接套接字。"

#: ../../library/multiprocessing.rst:1064
msgid ""
"Connection objects are usually created using :func:`Pipe "
"<multiprocessing.Pipe>` -- see also :ref:`multiprocessing-listeners-"
"clients`."
msgstr ""
"通常使用  :func:`Pipe <multiprocessing.Pipe>`   创建 Connection 对象。详见 ：  :ref"
":`multiprocessing-listeners-clients`."

#: ../../library/multiprocessing.rst:1072
msgid ""
"Send an object to the other end of the connection which should be read using"
" :meth:`recv`."
msgstr "将一个对象发送到连接的另一端，可以用  :meth:`recv`  读取。"

#: ../../library/multiprocessing.rst:1075
msgid ""
"The object must be picklable.  Very large pickles (approximately 32 MiB+, "
"though it depends on the OS) may raise a :exc:`ValueError` exception."
msgstr ""
"发送的对象必须是可以序列化的，过大的对象 (  接近 32MiB+ ，这个值取决于操作系统 ) 有可能引发   :exc:`ValueError`   "
"异常。"

#: ../../library/multiprocessing.rst:1080
msgid ""
"Return an object sent from the other end of the connection using "
":meth:`send`.  Blocks until there is something to receive.  Raises "
":exc:`EOFError` if there is nothing left to receive and the other end was "
"closed."
msgstr ""
"返回一个由另一端使用 :meth:`send` 发送的对象。该方法会一直阻塞直到接收到对象。 如果对端关闭了连接或者没有东西可接收，将抛出   "
":exc:`EOFError`  异常。"

#: ../../library/multiprocessing.rst:1087
msgid "Return the file descriptor or handle used by the connection."
msgstr "返回由连接对象使用的描述符或者句柄。"

#: ../../library/multiprocessing.rst:1091
msgid "Close the connection."
msgstr "关闭连接对象。"

#: ../../library/multiprocessing.rst:1093
msgid "This is called automatically when the connection is garbage collected."
msgstr "当连接对象被垃圾回收时会自动调用。"

#: ../../library/multiprocessing.rst:1097
msgid "Return whether there is any data available to be read."
msgstr "返回连接对象中是否有可以读取的数据。"

#: ../../library/multiprocessing.rst:1099
msgid ""
"If *timeout* is not specified then it will return immediately.  If *timeout*"
" is a number then this specifies the maximum time in seconds to block.  If "
"*timeout* is ``None`` then an infinite timeout is used."
msgstr ""
"如果未指定  *timeout* ，此方法会马上返回。如果  *timeout* 是一个数字，则指定了最大阻塞的秒数。如果  *timeout* 是"
"   ``None``  ，那么将一直等待，不会超时。"

#: ../../library/multiprocessing.rst:1103
msgid ""
"Note that multiple connection objects may be polled at once by using "
":func:`multiprocessing.connection.wait`."
msgstr "注意通过使用  :func:`multiprocessing.connection.wait`   可以一次轮询多个连接对象。"

#: ../../library/multiprocessing.rst:1108
msgid "Send byte data from a :term:`bytes-like object` as a complete message."
msgstr "从一个  :term:`bytes-like object`   （字节类对象）对象中取出字节数组并作为一条完整消息发送。"

#: ../../library/multiprocessing.rst:1110
msgid ""
"If *offset* is given then data is read from that position in *buffer*.  If "
"*size* is given then that many bytes will be read from buffer.  Very large "
"buffers (approximately 32 MiB+, though it depends on the OS) may raise a "
":exc:`ValueError` exception"
msgstr ""
"如果由  *offset*  给定了在 *buffer* 中读取数据的位置。 如果给定了 *size* ，那么将会从缓冲区中读取多个字节。 过大的缓冲区"
" ( 接近 32MiB+ ，此值依赖于操作系统 ) 有可能引发   :exc:`ValueError`  异常。"

#: ../../library/multiprocessing.rst:1117
msgid ""
"Return a complete message of byte data sent from the other end of the "
"connection as a string.  Blocks until there is something to receive. Raises "
":exc:`EOFError` if there is nothing left to receive and the other end has "
"closed."
msgstr ""
"以字符串形式返回一条从连接对象另一端发送过来的字节数据。此方法在接收到数据前将一直阻塞。 如果连接对象被对端关闭或者没有数据可读取，将抛出  "
":exc:`EOFError`  异常。"

#: ../../library/multiprocessing.rst:1122
msgid ""
"If *maxlength* is specified and the message is longer than *maxlength* then "
":exc:`OSError` is raised and the connection will no longer be readable."
msgstr ""
"如果给定了  *maxlength*  并且消息短于  *maxlength*  那么将抛出  :exc:`OSError`  "
"并且该连接对象将不再可读。"

#: ../../library/multiprocessing.rst:1126
msgid ""
"This function used to raise :exc:`IOError`, which is now an alias of "
":exc:`OSError`."
msgstr "曾经该函数抛出 :exc:`IOError`  ，现在这是 :exc:`OSError` 的别名。"

#: ../../library/multiprocessing.rst:1133
msgid ""
"Read into *buffer* a complete message of byte data sent from the other end "
"of the connection and return the number of bytes in the message.  Blocks "
"until there is something to receive.  Raises :exc:`EOFError` if there is "
"nothing left to receive and the other end was closed."
msgstr ""
"将一条完整的字节数据消息读入  *buffer*  中并返回消息的字节数。 此方法在接收到数据前将一直阻塞。 "
"如果连接对象被对端关闭或者没有数据可读取，将抛出  :exc:`EOFError`  异常。"

#: ../../library/multiprocessing.rst:1139
msgid ""
"*buffer* must be a writable :term:`bytes-like object`.  If *offset* is given"
" then the message will be written into the buffer from that position.  "
"Offset must be a non-negative integer less than the length of *buffer* (in "
"bytes)."
msgstr ""
" *buffer*  必须是一个可写的 :term:`bytes-like object`  。 如果给定了  *offset*  "
"该消息会被写入缓冲区对应的位置。   *offset* 必须是一个小于   *buffer* 长度 ( 以字节计 ) 的非负整数。"

#: ../../library/multiprocessing.rst:1144
msgid ""
"If the buffer is too short then a :exc:`BufferTooShort` exception is raised "
"and the complete message is available as ``e.args[0]`` where ``e`` is the "
"exception instance."
msgstr ""
"如果缓冲区太小，则将引发  :exc:`BufferTooShort`  异常，并且完整的消息将会存放在异常实例      ``e``  的 "
"``e.args[0]``  中。  "

#: ../../library/multiprocessing.rst:1148
msgid ""
"Connection objects themselves can now be transferred between processes using"
" :meth:`Connection.send` and :meth:`Connection.recv`."
msgstr ""
"现在连接对象自身可以通过 :meth:`Connection.send`   和  :meth:`Connection.recv`  在进程之间传递。"

#: ../../library/multiprocessing.rst:1152
msgid ""
"Connection objects now support the context management protocol -- see "
":ref:`typecontextmanager`.  :meth:`~contextmanager.__enter__` returns the "
"connection object, and :meth:`~contextmanager.__exit__` calls :meth:`close`."
msgstr ""
"连接对象现已支持上下文管理协议 -- 参见 see :ref:`typecontextmanager`  。 "
":meth:`~contextmanager.__enter__`   返回连接对象，   "
":meth:`~contextmanager.__exit__`   会调用  :meth:`close`  。"

#: ../../library/multiprocessing.rst:1157
msgid "For example:"
msgstr "例如:"

#: ../../library/multiprocessing.rst:1181
msgid ""
"The :meth:`Connection.recv` method automatically unpickles the data it "
"receives, which can be a security risk unless you can trust the process "
"which sent the message."
msgstr ""
"  :meth:`Connection.recv`   方法会自动反序列化收到的对象，除非你能够信任发送消息的进程，否则此处可能有安全隐患。"

#: ../../library/multiprocessing.rst:1185
msgid ""
"Therefore, unless the connection object was produced using :func:`Pipe` you "
"should only use the :meth:`~Connection.recv` and :meth:`~Connection.send` "
"methods after performing some sort of authentication.  See :ref"
":`multiprocessing-auth-keys`."
msgstr ""
"因此，  除非连接对象是由  :func:`Pipe`   产生的，在通过一些认证手段之前你应该只使用   "
":meth:`~Connection.recv`  和  :meth:`~Connection.send`  方法。参考  :ref"
":`multiprocessing-auth-keys` 。"

#: ../../library/multiprocessing.rst:1192
msgid ""
"If a process is killed while it is trying to read or write to a pipe then "
"the data in the pipe is likely to become corrupted, because it may become "
"impossible to be sure where the message boundaries lie."
msgstr "如果一个进程在试图读写管道时被终止了，那么管道中的数据很可能是不完整的，因为此时可能无法确定消息的边界。"

#: ../../library/multiprocessing.rst:1198
msgid "Synchronization primitives"
msgstr "同步原语"

#: ../../library/multiprocessing.rst:1202
msgid ""
"Generally synchronization primitives are not as necessary in a multiprocess "
"program as they are in a multithreaded program.  See the documentation for "
":mod:`threading` module."
msgstr "通常来说同步愿意在多进程环境中并不像它们在多线程环境中那么必要。参考  :mod:`threading`  模块的文档。"

#: ../../library/multiprocessing.rst:1206
msgid ""
"Note that one can also create synchronization primitives by using a manager "
"object -- see :ref:`multiprocessing-managers`."
msgstr "注意可以使用管理器对象创建同步原语，参考 :ref:`multiprocessing-managers` 。"

#: ../../library/multiprocessing.rst:1211
msgid "A barrier object: a clone of :class:`threading.Barrier`."
msgstr "类似  :class:`threading.Barrier` 的栅栏对象。"

#: ../../library/multiprocessing.rst:1217
msgid ""
"A bounded semaphore object: a close analog of "
":class:`threading.BoundedSemaphore`."
msgstr "非常类似 :class:`threading.BoundedSemaphore`  的有界信号量对象。"

#: ../../library/multiprocessing.rst:1220
#: ../../library/multiprocessing.rst:1358
msgid ""
"A solitary difference from its close analog exists: its ``acquire`` method's"
" first argument is named *block*, as is consistent with "
":meth:`Lock.acquire`."
msgstr ""
"一个小小的不同在于，它的  ``acquire``  方法的第一个参数名是和  :meth:`Lock.acquire` 一样的 *block* 。"

#: ../../library/multiprocessing.rst:1224
msgid ""
"On Mac OS X, this is indistinguishable from :class:`Semaphore` because "
"``sem_getvalue()`` is not implemented on that platform."
msgstr ""
"在 Mac OS X 平台上， 该对象于  :class:`Semaphore`  不同在于  ``sem_getvalue()`` "
"方法并没有在该平台上实现。"

#: ../../library/multiprocessing.rst:1229
msgid "A condition variable: an alias for :class:`threading.Condition`."
msgstr "条件变量：   :class:`threading.Condition` 的别名。"

#: ../../library/multiprocessing.rst:1231
msgid ""
"If *lock* is specified then it should be a :class:`Lock` or :class:`RLock` "
"object from :mod:`multiprocessing`."
msgstr ""
"指定的 *lock* 参数应该是 :mod:`multiprocessing`  模块中的   :class:`Lock`   或者  "
":class:`RLock` 对象。"

#: ../../library/multiprocessing.rst:1234
#: ../../library/multiprocessing.rst:1768
msgid "The :meth:`~threading.Condition.wait_for` method was added."
msgstr "新增了 :meth:`~threading.Condition.wait_for`  方法。"

#: ../../library/multiprocessing.rst:1239
msgid "A clone of :class:`threading.Event`."
msgstr "  :class:`threading.Event`  的复制品。"

#: ../../library/multiprocessing.rst:1244
msgid ""
"A non-recursive lock object: a close analog of :class:`threading.Lock`. Once"
" a process or thread has acquired a lock, subsequent attempts to acquire it "
"from any process or thread will block until it is released; any process or "
"thread may release it.  The concepts and behaviors of "
":class:`threading.Lock` as it applies to threads are replicated here in "
":class:`multiprocessing.Lock` as it applies to either processes or threads, "
"except as noted."
msgstr ""
"原始锁（非递归锁）对象，类似于   :class:`threading.Lock`  "
"。一旦一个进程或者线程拿到了锁，后续的任何其他进程或线程的其他请求都会被阻塞直到锁被释放。任何进程或线程都可以释放锁。除非另有说明，否则 "
":class:`multiprocessing.Lock`  用于进程或者线程的概念和行为都和 :class:`threading.Lock`  一致。"

#: ../../library/multiprocessing.rst:1252
msgid ""
"Note that :class:`Lock` is actually a factory function which returns an "
"instance of ``multiprocessing.synchronize.Lock`` initialized with a default "
"context."
msgstr ""
"注意   :class:`Lock`  实际上是一个工厂函数。它返回由默认上下文初始化的  "
"``multiprocessing.synchronize.Lock``  对象。"

#: ../../library/multiprocessing.rst:1256
msgid ""
":class:`Lock` supports the :term:`context manager` protocol and thus may be "
"used in :keyword:`with` statements."
msgstr ""
"  :class:`Lock`  支持   :term:`context manager`  协议，可以在 :keyword:`with`  "
"语句中使用。"

#: ../../library/multiprocessing.rst:1261
#: ../../library/multiprocessing.rst:1312
msgid "Acquire a lock, blocking or non-blocking."
msgstr "获得锁，阻塞或非阻塞的。"

#: ../../library/multiprocessing.rst:1263
msgid ""
"With the *block* argument set to ``True`` (the default), the method call "
"will block until the lock is in an unlocked state, then set it to locked and"
" return ``True``.  Note that the name of this first argument differs from "
"that in :meth:`threading.Lock.acquire`."
msgstr ""
"如果  *block*   参数被设为  ``True``   ( 默认值 ) ， "
"对该方法的调用在锁处于释放状态之前都会阻塞，然后将锁设置为锁住状态并返回   ``True``  。需要注意的是第一个参数名与   "
":meth:`threading.Lock.acquire`  的不同。"

#: ../../library/multiprocessing.rst:1268
msgid ""
"With the *block* argument set to ``False``, the method call does not block."
"  If the lock is currently in a locked state, return ``False``; otherwise "
"set the lock to a locked state and return ``True``."
msgstr ""
"如果 *block* 参数被设置成 ``False`` ，方法的调用将不会阻塞。 如果锁当前处于锁住状态，将返回   ``False``  ； "
"否则将锁设置成锁住状态，并返回 ``True`` 。"

#: ../../library/multiprocessing.rst:1272
msgid ""
"When invoked with a positive, floating-point value for *timeout*, block for "
"at most the number of seconds specified by *timeout* as long as the lock can"
" not be acquired.  Invocations with a negative value for *timeout* are "
"equivalent to a *timeout* of zero.  Invocations with a *timeout* value of "
"``None`` (the default) set the timeout period to infinite.  Note that the "
"treatment of negative or ``None`` values for *timeout* differs from the "
"implemented behavior in :meth:`threading.Lock.acquire`.  The *timeout* "
"argument has no practical implications if the *block* argument is set to "
"``False`` and is thus ignored.  Returns ``True`` if the lock has been "
"acquired or ``False`` if the timeout period has elapsed."
msgstr ""
"当  *timeout* 是一个正浮点数时，会在等待锁的过程中最多阻塞等待 *timeout* 秒，当  *timeout* 是负数时，效果和  "
"*timeout* 为0时一样，当  *timeout* 是 ``None`` （默认值）时，等待时间是无限长。需要注意的是，对于 *timeout* "
"参数是负数和 ``None`` 的情况, 其行为与  :meth:`threading.Lock.acquire` 是不一样的。当 *block* 参数"
" 为 ``False`` 时，  *timeout* 并没有实际用处，会直接忽略。否则，函数会在拿到锁后返回 ``True`` 或者 超时没拿到锁后返回"
" ``False`` 。"

#: ../../library/multiprocessing.rst:1287
msgid ""
"Release a lock.  This can be called from any process or thread, not only the"
" process or thread which originally acquired the lock."
msgstr "释放锁，可以在任何进程、线程使用，并不限于锁的拥有者。"

#: ../../library/multiprocessing.rst:1290
msgid ""
"Behavior is the same as in :meth:`threading.Lock.release` except that when "
"invoked on an unlocked lock, a :exc:`ValueError` is raised."
msgstr ""
"当尝试释放一个没有被持有的锁时，会抛出 :exc:`ValueError` 异常，除此之外其行为与 "
":meth:`threading.Lock.release` 一样。"

#: ../../library/multiprocessing.rst:1296
msgid ""
"A recursive lock object: a close analog of :class:`threading.RLock`.  A "
"recursive lock must be released by the process or thread that acquired it. "
"Once a process or thread has acquired a recursive lock, the same process or "
"thread may acquire it again without blocking; that process or thread must "
"release it once for each time it has been acquired."
msgstr ""

#: ../../library/multiprocessing.rst:1302
msgid ""
"Note that :class:`RLock` is actually a factory function which returns an "
"instance of ``multiprocessing.synchronize.RLock`` initialized with a default"
" context."
msgstr ""
"注意 :class:`RLock` 是一个工厂函数，调用后返回一个使用默认 context 初始化的 "
"``multiprocessing.synchronize.RLock`` 实例。"

#: ../../library/multiprocessing.rst:1306
msgid ""
":class:`RLock` supports the :term:`context manager` protocol and thus may be"
" used in :keyword:`with` statements."
msgstr ":class:`RLock` 支持 :term:`context manager`，所以可在 :keyword:`with` 语句内使用。"

#: ../../library/multiprocessing.rst:1314
msgid ""
"When invoked with the *block* argument set to ``True``, block until the lock"
" is in an unlocked state (not owned by any process or thread) unless the "
"lock is already owned by the current process or thread.  The current process"
" or thread then takes ownership of the lock (if it does not already have "
"ownership) and the recursion level inside the lock increments by one, "
"resulting in a return value of ``True``.  Note that there are several "
"differences in this first argument's behavior compared to the implementation"
" of :meth:`threading.RLock.acquire`, starting with the name of the argument "
"itself."
msgstr ""
"当 *block* 参数设置为 ``True`` "
"时，会一直阻塞直到锁处于空闲状态（没有被任何进程、线程拥有），除非当前进程或线程已经拥有了这把锁。然后当前进程/线程会持有这把锁（在锁没有其他持有者的情况下），锁内的递归等级加一，并返回"
" ``True`` . 注意， 这个函数第一个参数的行为和 :meth:`threading.RLock.acquire` "
"的实现有几个不同点，包括参数名本身。"

#: ../../library/multiprocessing.rst:1324
msgid ""
"When invoked with the *block* argument set to ``False``, do not block. If "
"the lock has already been acquired (and thus is owned) by another process or"
" thread, the current process or thread does not take ownership and the "
"recursion level within the lock is not changed, resulting in a return value "
"of ``False``.  If the lock is in an unlocked state, the current process or "
"thread takes ownership and the recursion level is incremented, resulting in "
"a return value of ``True``."
msgstr ""

#: ../../library/multiprocessing.rst:1332
msgid ""
"Use and behaviors of the *timeout* argument are the same as in "
":meth:`Lock.acquire`.  Note that some of these behaviors of *timeout* differ"
" from the implemented behaviors in :meth:`threading.RLock.acquire`."
msgstr ""

#: ../../library/multiprocessing.rst:1339
msgid ""
"Release a lock, decrementing the recursion level.  If after the decrement "
"the recursion level is zero, reset the lock to unlocked (not owned by any "
"process or thread) and if any other processes or threads are blocked waiting"
" for the lock to become unlocked, allow exactly one of them to proceed.  If "
"after the decrement the recursion level is still nonzero, the lock remains "
"locked and owned by the calling process or thread."
msgstr ""

#: ../../library/multiprocessing.rst:1347
msgid ""
"Only call this method when the calling process or thread owns the lock. An "
":exc:`AssertionError` is raised if this method is called by a process or "
"thread other than the owner or if the lock is in an unlocked (unowned) "
"state.  Note that the type of exception raised in this situation differs "
"from the implemented behavior in :meth:`threading.RLock.release`."
msgstr ""

#: ../../library/multiprocessing.rst:1356
msgid "A semaphore object: a close analog of :class:`threading.Semaphore`."
msgstr ""

#: ../../library/multiprocessing.rst:1363
msgid ""
"On Mac OS X, ``sem_timedwait`` is unsupported, so calling ``acquire()`` with"
" a timeout will emulate that function's behavior using a sleeping loop."
msgstr ""

#: ../../library/multiprocessing.rst:1368
msgid ""
"If the SIGINT signal generated by :kbd:`Ctrl-C` arrives while the main "
"thread is blocked by a call to :meth:`BoundedSemaphore.acquire`, "
":meth:`Lock.acquire`, :meth:`RLock.acquire`, :meth:`Semaphore.acquire`, "
":meth:`Condition.acquire` or :meth:`Condition.wait` then the call will be "
"immediately interrupted and :exc:`KeyboardInterrupt` will be raised."
msgstr ""

#: ../../library/multiprocessing.rst:1374
msgid ""
"This differs from the behaviour of :mod:`threading` where SIGINT will be "
"ignored while the equivalent blocking calls are in progress."
msgstr ""

#: ../../library/multiprocessing.rst:1379
msgid ""
"Some of this package's functionality requires a functioning shared semaphore"
" implementation on the host operating system. Without one, the "
":mod:`multiprocessing.synchronize` module will be disabled, and attempts to "
"import it will result in an :exc:`ImportError`. See :issue:`3770` for "
"additional information."
msgstr ""

#: ../../library/multiprocessing.rst:1387
msgid "Shared :mod:`ctypes` Objects"
msgstr ""

#: ../../library/multiprocessing.rst:1389
msgid ""
"It is possible to create shared objects using shared memory which can be "
"inherited by child processes."
msgstr ""

#: ../../library/multiprocessing.rst:1394
msgid ""
"Return a :mod:`ctypes` object allocated from shared memory.  By default the "
"return value is actually a synchronized wrapper for the object.  The object "
"itself can be accessed via the *value* attribute of a :class:`Value`."
msgstr ""

#: ../../library/multiprocessing.rst:1398
#: ../../library/multiprocessing.rst:1485
msgid ""
"*typecode_or_type* determines the type of the returned object: it is either "
"a ctypes type or a one character typecode of the kind used by the "
":mod:`array` module.  *\\*args* is passed on to the constructor for the "
"type."
msgstr ""

#: ../../library/multiprocessing.rst:1402
msgid ""
"If *lock* is ``True`` (the default) then a new recursive lock object is "
"created to synchronize access to the value.  If *lock* is a :class:`Lock` or"
" :class:`RLock` object then that will be used to synchronize access to the "
"value.  If *lock* is ``False`` then access to the returned object will not "
"be automatically protected by a lock, so it will not necessarily be "
"\"process-safe\"."
msgstr ""

#: ../../library/multiprocessing.rst:1409
msgid ""
"Operations like ``+=`` which involve a read and write are not atomic.  So "
"if, for instance, you want to atomically increment a shared value it is "
"insufficient to just do ::"
msgstr ""

#: ../../library/multiprocessing.rst:1415
msgid ""
"Assuming the associated lock is recursive (which it is by default) you can "
"instead do ::"
msgstr ""

#: ../../library/multiprocessing.rst:1421
#: ../../library/multiprocessing.rst:1511
#: ../../library/multiprocessing.rst:1526
msgid "Note that *lock* is a keyword-only argument."
msgstr ""

#: ../../library/multiprocessing.rst:1425
msgid ""
"Return a ctypes array allocated from shared memory.  By default the return "
"value is actually a synchronized wrapper for the array."
msgstr ""

#: ../../library/multiprocessing.rst:1428
msgid ""
"*typecode_or_type* determines the type of the elements of the returned "
"array: it is either a ctypes type or a one character typecode of the kind "
"used by the :mod:`array` module.  If *size_or_initializer* is an integer, "
"then it determines the length of the array, and the array will be initially "
"zeroed. Otherwise, *size_or_initializer* is a sequence which is used to "
"initialize the array and whose length determines the length of the array."
msgstr ""

#: ../../library/multiprocessing.rst:1435
msgid ""
"If *lock* is ``True`` (the default) then a new lock object is created to "
"synchronize access to the value.  If *lock* is a :class:`Lock` or "
":class:`RLock` object then that will be used to synchronize access to the "
"value.  If *lock* is ``False`` then access to the returned object will not "
"be automatically protected by a lock, so it will not necessarily be "
"\"process-safe\"."
msgstr ""

#: ../../library/multiprocessing.rst:1442
msgid "Note that *lock* is a keyword only argument."
msgstr ""

#: ../../library/multiprocessing.rst:1444
msgid ""
"Note that an array of :data:`ctypes.c_char` has *value* and *raw* attributes"
" which allow one to use it to store and retrieve strings."
msgstr ""

#: ../../library/multiprocessing.rst:1449
msgid "The :mod:`multiprocessing.sharedctypes` module"
msgstr ""

#: ../../library/multiprocessing.rst:1454
msgid ""
"The :mod:`multiprocessing.sharedctypes` module provides functions for "
"allocating :mod:`ctypes` objects from shared memory which can be inherited "
"by child processes."
msgstr ""

#: ../../library/multiprocessing.rst:1460
msgid ""
"Although it is possible to store a pointer in shared memory remember that "
"this will refer to a location in the address space of a specific process. "
"However, the pointer is quite likely to be invalid in the context of a "
"second process and trying to dereference the pointer from the second process"
" may cause a crash."
msgstr ""

#: ../../library/multiprocessing.rst:1468
msgid "Return a ctypes array allocated from shared memory."
msgstr ""

#: ../../library/multiprocessing.rst:1470
msgid ""
"*typecode_or_type* determines the type of the elements of the returned "
"array: it is either a ctypes type or a one character typecode of the kind "
"used by the :mod:`array` module.  If *size_or_initializer* is an integer "
"then it determines the length of the array, and the array will be initially "
"zeroed. Otherwise *size_or_initializer* is a sequence which is used to "
"initialize the array and whose length determines the length of the array."
msgstr ""

#: ../../library/multiprocessing.rst:1477
msgid ""
"Note that setting and getting an element is potentially non-atomic -- use "
":func:`Array` instead to make sure that access is automatically synchronized"
" using a lock."
msgstr ""

#: ../../library/multiprocessing.rst:1483
msgid "Return a ctypes object allocated from shared memory."
msgstr ""

#: ../../library/multiprocessing.rst:1489
msgid ""
"Note that setting and getting the value is potentially non-atomic -- use "
":func:`Value` instead to make sure that access is automatically synchronized"
" using a lock."
msgstr ""

#: ../../library/multiprocessing.rst:1493
msgid ""
"Note that an array of :data:`ctypes.c_char` has ``value`` and ``raw`` "
"attributes which allow one to use it to store and retrieve strings -- see "
"documentation for :mod:`ctypes`."
msgstr ""

#: ../../library/multiprocessing.rst:1499
msgid ""
"The same as :func:`RawArray` except that depending on the value of *lock* a "
"process-safe synchronization wrapper may be returned instead of a raw ctypes"
" array."
msgstr ""

#: ../../library/multiprocessing.rst:1503
#: ../../library/multiprocessing.rst:1519
msgid ""
"If *lock* is ``True`` (the default) then a new lock object is created to "
"synchronize access to the value.  If *lock* is a "
":class:`~multiprocessing.Lock` or :class:`~multiprocessing.RLock` object "
"then that will be used to synchronize access to the value.  If *lock* is "
"``False`` then access to the returned object will not be automatically "
"protected by a lock, so it will not necessarily be \"process-safe\"."
msgstr ""

#: ../../library/multiprocessing.rst:1515
msgid ""
"The same as :func:`RawValue` except that depending on the value of *lock* a "
"process-safe synchronization wrapper may be returned instead of a raw ctypes"
" object."
msgstr ""

#: ../../library/multiprocessing.rst:1530
msgid ""
"Return a ctypes object allocated from shared memory which is a copy of the "
"ctypes object *obj*."
msgstr ""

#: ../../library/multiprocessing.rst:1535
msgid ""
"Return a process-safe wrapper object for a ctypes object which uses *lock* "
"to synchronize access.  If *lock* is ``None`` (the default) then a "
":class:`multiprocessing.RLock` object is created automatically."
msgstr ""

#: ../../library/multiprocessing.rst:1539
msgid ""
"A synchronized wrapper will have two methods in addition to those of the "
"object it wraps: :meth:`get_obj` returns the wrapped object and "
":meth:`get_lock` returns the lock object used for synchronization."
msgstr ""

#: ../../library/multiprocessing.rst:1543
msgid ""
"Note that accessing the ctypes object through the wrapper can be a lot "
"slower than accessing the raw ctypes object."
msgstr ""

#: ../../library/multiprocessing.rst:1546
msgid "Synchronized objects support the :term:`context manager` protocol."
msgstr ""

#: ../../library/multiprocessing.rst:1550
msgid ""
"The table below compares the syntax for creating shared ctypes objects from "
"shared memory with the normal ctypes syntax.  (In the table ``MyStruct`` is "
"some subclass of :class:`ctypes.Structure`.)"
msgstr ""

#: ../../library/multiprocessing.rst:1555
msgid "ctypes"
msgstr "ctypes"

#: ../../library/multiprocessing.rst:1555
msgid "sharedctypes using type"
msgstr "使用类型的共享ctypes"

#: ../../library/multiprocessing.rst:1555
msgid "sharedctypes using typecode"
msgstr "使用 typecode 的共享 ctypes"

#: ../../library/multiprocessing.rst:1557
msgid "c_double(2.4)"
msgstr "c_double(2.4)"

#: ../../library/multiprocessing.rst:1557
msgid "RawValue(c_double, 2.4)"
msgstr "RawValue(c_double, 2.4)"

#: ../../library/multiprocessing.rst:1557
msgid "RawValue('d', 2.4)"
msgstr "RawValue('d', 2.4)"

#: ../../library/multiprocessing.rst:1558
msgid "MyStruct(4, 6)"
msgstr "MyStruct(4, 6)"

#: ../../library/multiprocessing.rst:1558
msgid "RawValue(MyStruct, 4, 6)"
msgstr "RawValue(MyStruct, 4, 6)"

#: ../../library/multiprocessing.rst:1559
msgid "(c_short * 7)()"
msgstr "(c_short * 7)()"

#: ../../library/multiprocessing.rst:1559
msgid "RawArray(c_short, 7)"
msgstr "RawArray(c_short, 7)"

#: ../../library/multiprocessing.rst:1559
msgid "RawArray('h', 7)"
msgstr "RawArray('h', 7)"

#: ../../library/multiprocessing.rst:1560
msgid "(c_int * 3)(9, 2, 8)"
msgstr "(c_int * 3)(9, 2, 8)"

#: ../../library/multiprocessing.rst:1560
msgid "RawArray(c_int, (9, 2, 8))"
msgstr "RawArray(c_int, (9, 2, 8))"

#: ../../library/multiprocessing.rst:1560
msgid "RawArray('i', (9, 2, 8))"
msgstr "RawArray('i', (9, 2, 8))"

#: ../../library/multiprocessing.rst:1564
msgid ""
"Below is an example where a number of ctypes objects are modified by a child"
" process::"
msgstr ""

#: ../../library/multiprocessing.rst:1602
msgid "The results printed are ::"
msgstr ""

#: ../../library/multiprocessing.rst:1615
msgid "Managers"
msgstr ""

#: ../../library/multiprocessing.rst:1617
msgid ""
"Managers provide a way to create data which can be shared between different "
"processes, including sharing over a network between processes running on "
"different machines. A manager object controls a server process which manages"
" *shared objects*.  Other processes can access the shared objects by using "
"proxies."
msgstr ""

#: ../../library/multiprocessing.rst:1625
msgid ""
"Returns a started :class:`~multiprocessing.managers.SyncManager` object "
"which can be used for sharing objects between processes.  The returned "
"manager object corresponds to a spawned child process and has methods which "
"will create shared objects and return corresponding proxies."
msgstr ""

#: ../../library/multiprocessing.rst:1633
msgid ""
"Manager processes will be shutdown as soon as they are garbage collected or "
"their parent process exits.  The manager classes are defined in the "
":mod:`multiprocessing.managers` module:"
msgstr ""

#: ../../library/multiprocessing.rst:1639
msgid "Create a BaseManager object."
msgstr ""

#: ../../library/multiprocessing.rst:1641
msgid ""
"Once created one should call :meth:`start` or "
"``get_server().serve_forever()`` to ensure that the manager object refers to"
" a started manager process."
msgstr ""

#: ../../library/multiprocessing.rst:1644
msgid ""
"*address* is the address on which the manager process listens for new "
"connections.  If *address* is ``None`` then an arbitrary one is chosen."
msgstr ""

#: ../../library/multiprocessing.rst:1647
msgid ""
"*authkey* is the authentication key which will be used to check the validity"
" of incoming connections to the server process.  If *authkey* is ``None`` "
"then ``current_process().authkey`` is used. Otherwise *authkey* is used and "
"it must be a byte string."
msgstr ""

#: ../../library/multiprocessing.rst:1654
msgid ""
"Start a subprocess to start the manager.  If *initializer* is not ``None`` "
"then the subprocess will call ``initializer(*initargs)`` when it starts."
msgstr ""

#: ../../library/multiprocessing.rst:1659
msgid ""
"Returns a :class:`Server` object which represents the actual server under "
"the control of the Manager. The :class:`Server` object supports the "
":meth:`serve_forever` method::"
msgstr ""

#: ../../library/multiprocessing.rst:1668
msgid ":class:`Server` additionally has an :attr:`address` attribute."
msgstr ""

#: ../../library/multiprocessing.rst:1672
msgid "Connect a local manager object to a remote manager process::"
msgstr ""

#: ../../library/multiprocessing.rst:1680
msgid ""
"Stop the process used by the manager.  This is only available if "
":meth:`start` has been used to start the server process."
msgstr ""

#: ../../library/multiprocessing.rst:1683
msgid "This can be called multiple times."
msgstr "它可以被多次调用。"

#: ../../library/multiprocessing.rst:1687
msgid ""
"A classmethod which can be used for registering a type or callable with the "
"manager class."
msgstr ""

#: ../../library/multiprocessing.rst:1690
msgid ""
"*typeid* is a \"type identifier\" which is used to identify a particular "
"type of shared object.  This must be a string."
msgstr ""

#: ../../library/multiprocessing.rst:1693
msgid ""
"*callable* is a callable used for creating objects for this type identifier."
"  If a manager instance will be connected to the server using the "
":meth:`connect` method, or if the *create_method* argument is ``False`` then"
" this can be left as ``None``."
msgstr ""

#: ../../library/multiprocessing.rst:1699
msgid ""
"*proxytype* is a subclass of :class:`BaseProxy` which is used to create "
"proxies for shared objects with this *typeid*.  If ``None`` then a proxy "
"class is created automatically."
msgstr ""

#: ../../library/multiprocessing.rst:1703
msgid ""
"*exposed* is used to specify a sequence of method names which proxies for "
"this typeid should be allowed to access using :meth:`BaseProxy._callmethod`."
"  (If *exposed* is ``None`` then :attr:`proxytype._exposed_` is used instead"
" if it exists.)  In the case where no exposed list is specified, all "
"\"public methods\" of the shared object will be accessible.  (Here a "
"\"public method\" means any attribute which has a :meth:`~object.__call__` "
"method and whose name does not begin with ``'_'``.)"
msgstr ""

#: ../../library/multiprocessing.rst:1712
msgid ""
"*method_to_typeid* is a mapping used to specify the return type of those "
"exposed methods which should return a proxy.  It maps method names to typeid"
" strings.  (If *method_to_typeid* is ``None`` then "
":attr:`proxytype._method_to_typeid_` is used instead if it exists.)  If a "
"method's name is not a key of this mapping or if the mapping is ``None`` "
"then the object returned by the method will be copied by value."
msgstr ""

#: ../../library/multiprocessing.rst:1719
msgid ""
"*create_method* determines whether a method should be created with name "
"*typeid* which can be used to tell the server process to create a new shared"
" object and return a proxy for it.  By default it is ``True``."
msgstr ""

#: ../../library/multiprocessing.rst:1723
msgid ":class:`BaseManager` instances also have one read-only property:"
msgstr ""

#: ../../library/multiprocessing.rst:1727
msgid "The address used by the manager."
msgstr "管理器所用的地址。"

#: ../../library/multiprocessing.rst:1729
msgid ""
"Manager objects support the context management protocol -- see "
":ref:`typecontextmanager`.  :meth:`~contextmanager.__enter__` starts the "
"server process (if it has not already started) and then returns the manager "
"object.  :meth:`~contextmanager.__exit__` calls :meth:`shutdown`."
msgstr ""

#: ../../library/multiprocessing.rst:1735
msgid ""
"In previous versions :meth:`~contextmanager.__enter__` did not start the "
"manager's server process if it was not already started."
msgstr ""

#: ../../library/multiprocessing.rst:1740
msgid ""
"A subclass of :class:`BaseManager` which can be used for the synchronization"
" of processes.  Objects of this type are returned by "
":func:`multiprocessing.Manager`."
msgstr ""

#: ../../library/multiprocessing.rst:1744
msgid ""
"Its methods create and return :ref:`multiprocessing-proxy_objects` for a "
"number of commonly used data types to be synchronized across processes. This"
" notably includes shared lists and dictionaries."
msgstr ""

#: ../../library/multiprocessing.rst:1750
msgid ""
"Create a shared :class:`threading.Barrier` object and return a proxy for it."
msgstr ""

#: ../../library/multiprocessing.rst:1757
msgid ""
"Create a shared :class:`threading.BoundedSemaphore` object and return a "
"proxy for it."
msgstr ""

#: ../../library/multiprocessing.rst:1762
msgid ""
"Create a shared :class:`threading.Condition` object and return a proxy for "
"it."
msgstr ""

#: ../../library/multiprocessing.rst:1765
msgid ""
"If *lock* is supplied then it should be a proxy for a "
":class:`threading.Lock` or :class:`threading.RLock` object."
msgstr ""

#: ../../library/multiprocessing.rst:1773
msgid ""
"Create a shared :class:`threading.Event` object and return a proxy for it."
msgstr ""

#: ../../library/multiprocessing.rst:1777
msgid ""
"Create a shared :class:`threading.Lock` object and return a proxy for it."
msgstr ""

#: ../../library/multiprocessing.rst:1781
msgid "Create a shared :class:`Namespace` object and return a proxy for it."
msgstr ""

#: ../../library/multiprocessing.rst:1785
msgid "Create a shared :class:`queue.Queue` object and return a proxy for it."
msgstr ""

#: ../../library/multiprocessing.rst:1789
msgid ""
"Create a shared :class:`threading.RLock` object and return a proxy for it."
msgstr ""

#: ../../library/multiprocessing.rst:1793
msgid ""
"Create a shared :class:`threading.Semaphore` object and return a proxy for "
"it."
msgstr ""

#: ../../library/multiprocessing.rst:1798
msgid "Create an array and return a proxy for it."
msgstr ""

#: ../../library/multiprocessing.rst:1802
msgid ""
"Create an object with a writable ``value`` attribute and return a proxy for "
"it."
msgstr ""

#: ../../library/multiprocessing.rst:1809
msgid "Create a shared :class:`dict` object and return a proxy for it."
msgstr ""

#: ../../library/multiprocessing.rst:1814
msgid "Create a shared :class:`list` object and return a proxy for it."
msgstr ""

#: ../../library/multiprocessing.rst:1816
msgid ""
"Shared objects are capable of being nested.  For example, a shared container"
" object such as a shared list can contain other shared objects which will "
"all be managed and synchronized by the :class:`SyncManager`."
msgstr ""

#: ../../library/multiprocessing.rst:1823
msgid "A type that can register with :class:`SyncManager`."
msgstr ""

#: ../../library/multiprocessing.rst:1825
msgid ""
"A namespace object has no public methods, but does have writable attributes."
" Its representation shows the values of its attributes."
msgstr ""

#: ../../library/multiprocessing.rst:1828
msgid ""
"However, when using a proxy for a namespace object, an attribute beginning "
"with ``'_'`` will be an attribute of the proxy and not an attribute of the "
"referent:"
msgstr ""

#: ../../library/multiprocessing.rst:1844
msgid "Customized managers"
msgstr ""

#: ../../library/multiprocessing.rst:1846
msgid ""
"To create one's own manager, one creates a subclass of :class:`BaseManager` "
"and uses the :meth:`~BaseManager.register` classmethod to register new types"
" or callables with the manager class.  For example::"
msgstr ""

#: ../../library/multiprocessing.rst:1871
msgid "Using a remote manager"
msgstr ""

#: ../../library/multiprocessing.rst:1873
msgid ""
"It is possible to run a manager server on one machine and have clients use "
"it from other machines (assuming that the firewalls involved allow it)."
msgstr ""

#: ../../library/multiprocessing.rst:1876
msgid ""
"Running the following commands creates a server for a single shared queue "
"which remote clients can access::"
msgstr ""

#: ../../library/multiprocessing.rst:1888
msgid "One client can access the server as follows::"
msgstr ""

#: ../../library/multiprocessing.rst:1898
msgid "Another client can also use it::"
msgstr ""

#: ../../library/multiprocessing.rst:1909
msgid ""
"Local processes can also access that queue, using the code from above on the"
" client to access it remotely::"
msgstr ""

#: ../../library/multiprocessing.rst:1934
msgid "Proxy Objects"
msgstr "代理对象"

#: ../../library/multiprocessing.rst:1936
msgid ""
"A proxy is an object which *refers* to a shared object which lives "
"(presumably) in a different process.  The shared object is said to be the "
"*referent* of the proxy.  Multiple proxy objects may have the same referent."
msgstr ""

#: ../../library/multiprocessing.rst:1940
msgid ""
"A proxy object has methods which invoke corresponding methods of its "
"referent (although not every method of the referent will necessarily be "
"available through the proxy).  In this way, a proxy can be used just like "
"its referent can:"
msgstr ""

#: ../../library/multiprocessing.rst:1958
msgid ""
"Notice that applying :func:`str` to a proxy will return the representation "
"of the referent, whereas applying :func:`repr` will return the "
"representation of the proxy."
msgstr ""

#: ../../library/multiprocessing.rst:1962
msgid ""
"An important feature of proxy objects is that they are picklable so they can"
" be passed between processes.  As such, a referent can contain :ref"
":`multiprocessing-proxy_objects`.  This permits nesting of these managed "
"lists, dicts, and other :ref:`multiprocessing-proxy_objects`:"
msgstr ""

#: ../../library/multiprocessing.rst:1978
msgid "Similarly, dict and list proxies may be nested inside one another::"
msgstr ""

#: ../../library/multiprocessing.rst:1991
msgid ""
"If standard (non-proxy) :class:`list` or :class:`dict` objects are contained"
" in a referent, modifications to those mutable values will not be propagated"
" through the manager because the proxy has no way of knowing when the values"
" contained within are modified.  However, storing a value in a container "
"proxy (which triggers a ``__setitem__`` on the proxy object) does propagate "
"through the manager and so to effectively modify such an item, one could re-"
"assign the modified value to the container proxy::"
msgstr ""

#: ../../library/multiprocessing.rst:2010
msgid ""
"This approach is perhaps less convenient than employing nested :ref"
":`multiprocessing-proxy_objects` for most use cases but also demonstrates a "
"level of control over the synchronization."
msgstr ""

#: ../../library/multiprocessing.rst:2016
msgid ""
"The proxy types in :mod:`multiprocessing` do nothing to support comparisons "
"by value.  So, for instance, we have:"
msgstr ""

#: ../../library/multiprocessing.rst:2024
msgid ""
"One should just use a copy of the referent instead when making comparisons."
msgstr ""

#: ../../library/multiprocessing.rst:2028
msgid "Proxy objects are instances of subclasses of :class:`BaseProxy`."
msgstr ""

#: ../../library/multiprocessing.rst:2032
msgid "Call and return the result of a method of the proxy's referent."
msgstr ""

#: ../../library/multiprocessing.rst:2034
msgid ""
"If ``proxy`` is a proxy whose referent is ``obj`` then the expression ::"
msgstr ""

#: ../../library/multiprocessing.rst:2038
msgid "will evaluate the expression ::"
msgstr ""

#: ../../library/multiprocessing.rst:2042
msgid "in the manager's process."
msgstr ""

#: ../../library/multiprocessing.rst:2044
msgid ""
"The returned value will be a copy of the result of the call or a proxy to a "
"new shared object -- see documentation for the *method_to_typeid* argument "
"of :meth:`BaseManager.register`."
msgstr ""

#: ../../library/multiprocessing.rst:2048
msgid ""
"If an exception is raised by the call, then is re-raised by "
":meth:`_callmethod`.  If some other exception is raised in the manager's "
"process then this is converted into a :exc:`RemoteError` exception and is "
"raised by :meth:`_callmethod`."
msgstr ""

#: ../../library/multiprocessing.rst:2053
msgid ""
"Note in particular that an exception will be raised if *methodname* has not "
"been *exposed*."
msgstr ""

#: ../../library/multiprocessing.rst:2056
msgid "An example of the usage of :meth:`_callmethod`:"
msgstr ""

#: ../../library/multiprocessing.rst:2072
msgid "Return a copy of the referent."
msgstr ""

#: ../../library/multiprocessing.rst:2074
msgid "If the referent is unpicklable then this will raise an exception."
msgstr ""

#: ../../library/multiprocessing.rst:2078
msgid "Return a representation of the proxy object."
msgstr ""

#: ../../library/multiprocessing.rst:2082
msgid "Return the representation of the referent."
msgstr ""

#: ../../library/multiprocessing.rst:2086
msgid "Cleanup"
msgstr ""

#: ../../library/multiprocessing.rst:2088
msgid ""
"A proxy object uses a weakref callback so that when it gets garbage "
"collected it deregisters itself from the manager which owns its referent."
msgstr ""

#: ../../library/multiprocessing.rst:2091
msgid ""
"A shared object gets deleted from the manager process when there are no "
"longer any proxies referring to it."
msgstr ""

#: ../../library/multiprocessing.rst:2096
msgid "Process Pools"
msgstr "进程池"

#: ../../library/multiprocessing.rst:2101
msgid ""
"One can create a pool of processes which will carry out tasks submitted to "
"it with the :class:`Pool` class."
msgstr ""

#: ../../library/multiprocessing.rst:2106
msgid ""
"A process pool object which controls a pool of worker processes to which "
"jobs can be submitted.  It supports asynchronous results with timeouts and "
"callbacks and has a parallel map implementation."
msgstr ""

#: ../../library/multiprocessing.rst:2110
msgid ""
"*processes* is the number of worker processes to use.  If *processes* is "
"``None`` then the number returned by :func:`os.cpu_count` is used."
msgstr ""

#: ../../library/multiprocessing.rst:2113
msgid ""
"If *initializer* is not ``None`` then each worker process will call "
"``initializer(*initargs)`` when it starts."
msgstr ""

#: ../../library/multiprocessing.rst:2116
msgid ""
"*maxtasksperchild* is the number of tasks a worker process can complete "
"before it will exit and be replaced with a fresh worker process, to enable "
"unused resources to be freed. The default *maxtasksperchild* is ``None``, "
"which means worker processes will live as long as the pool."
msgstr ""

#: ../../library/multiprocessing.rst:2121
msgid ""
"*context* can be used to specify the context used for starting the worker "
"processes.  Usually a pool is created using the function "
":func:`multiprocessing.Pool` or the :meth:`Pool` method of a context object."
"  In both cases *context* is set appropriately."
msgstr ""

#: ../../library/multiprocessing.rst:2127
msgid ""
"Note that the methods of the pool object should only be called by the "
"process which created the pool."
msgstr ""

#: ../../library/multiprocessing.rst:2130
msgid "*maxtasksperchild*"
msgstr ""

#: ../../library/multiprocessing.rst:2133
msgid "*context*"
msgstr ""

#: ../../library/multiprocessing.rst:2138
msgid ""
"Worker processes within a :class:`Pool` typically live for the complete "
"duration of the Pool's work queue. A frequent pattern found in other systems"
" (such as Apache, mod_wsgi, etc) to free resources held by workers is to "
"allow a worker within a pool to complete only a set amount of work before "
"being exiting, being cleaned up and a new process spawned to replace the old"
" one. The *maxtasksperchild* argument to the :class:`Pool` exposes this "
"ability to the end user."
msgstr ""

#: ../../library/multiprocessing.rst:2148
msgid ""
"Call *func* with arguments *args* and keyword arguments *kwds*.  It blocks "
"until the result is ready. Given this blocks, :meth:`apply_async` is better "
"suited for performing work in parallel. Additionally, *func* is only "
"executed in one of the workers of the pool."
msgstr ""

#: ../../library/multiprocessing.rst:2155
msgid "A variant of the :meth:`apply` method which returns a result object."
msgstr ""

#: ../../library/multiprocessing.rst:2157
#: ../../library/multiprocessing.rst:2186
msgid ""
"If *callback* is specified then it should be a callable which accepts a "
"single argument.  When the result becomes ready *callback* is applied to it,"
" that is unless the call failed, in which case the *error_callback* is "
"applied instead."
msgstr ""

#: ../../library/multiprocessing.rst:2162
#: ../../library/multiprocessing.rst:2191
msgid ""
"If *error_callback* is specified then it should be a callable which accepts "
"a single argument.  If the target function fails, then the *error_callback* "
"is called with the exception instance."
msgstr ""

#: ../../library/multiprocessing.rst:2166
#: ../../library/multiprocessing.rst:2195
msgid ""
"Callbacks should complete immediately since otherwise the thread which "
"handles the results will get blocked."
msgstr ""

#: ../../library/multiprocessing.rst:2171
msgid ""
"A parallel equivalent of the :func:`map` built-in function (it supports only"
" one *iterable* argument though).  It blocks until the result is ready."
msgstr ""

#: ../../library/multiprocessing.rst:2174
msgid ""
"This method chops the iterable into a number of chunks which it submits to "
"the process pool as separate tasks.  The (approximate) size of these chunks "
"can be specified by setting *chunksize* to a positive integer."
msgstr ""

#: ../../library/multiprocessing.rst:2178
msgid ""
"Note that it may cause high memory usage for very long iterables. Consider "
"using :meth:`imap` or :meth:`imap_unordered` with explicit *chunksize* "
"option for better efficiency."
msgstr ""

#: ../../library/multiprocessing.rst:2184
msgid "A variant of the :meth:`.map` method which returns a result object."
msgstr ""

#: ../../library/multiprocessing.rst:2200
msgid "A lazier version of :meth:`.map`."
msgstr ""

#: ../../library/multiprocessing.rst:2202
msgid ""
"The *chunksize* argument is the same as the one used by the :meth:`.map` "
"method.  For very long iterables using a large value for *chunksize* can "
"make the job complete **much** faster than using the default value of ``1``."
msgstr ""

#: ../../library/multiprocessing.rst:2207
msgid ""
"Also if *chunksize* is ``1`` then the :meth:`!next` method of the iterator "
"returned by the :meth:`imap` method has an optional *timeout* parameter: "
"``next(timeout)`` will raise :exc:`multiprocessing.TimeoutError` if the "
"result cannot be returned within *timeout* seconds."
msgstr ""

#: ../../library/multiprocessing.rst:2214
msgid ""
"The same as :meth:`imap` except that the ordering of the results from the "
"returned iterator should be considered arbitrary.  (Only when there is only "
"one worker process is the order guaranteed to be \"correct\".)"
msgstr ""

#: ../../library/multiprocessing.rst:2220
msgid ""
"Like :meth:`map` except that the elements of the *iterable* are expected to "
"be iterables that are unpacked as arguments."
msgstr ""

#: ../../library/multiprocessing.rst:2223
msgid ""
"Hence an *iterable* of ``[(1,2), (3, 4)]`` results in ``[func(1,2), "
"func(3,4)]``."
msgstr ""

#: ../../library/multiprocessing.rst:2230
msgid ""
"A combination of :meth:`starmap` and :meth:`map_async` that iterates over "
"*iterable* of iterables and calls *func* with the iterables unpacked. "
"Returns a result object."
msgstr ""

#: ../../library/multiprocessing.rst:2238
msgid ""
"Prevents any more tasks from being submitted to the pool.  Once all the "
"tasks have been completed the worker processes will exit."
msgstr ""

#: ../../library/multiprocessing.rst:2243
msgid ""
"Stops the worker processes immediately without completing outstanding work."
"  When the pool object is garbage collected :meth:`terminate` will be called"
" immediately."
msgstr ""

#: ../../library/multiprocessing.rst:2249
msgid ""
"Wait for the worker processes to exit.  One must call :meth:`close` or "
":meth:`terminate` before using :meth:`join`."
msgstr ""

#: ../../library/multiprocessing.rst:2252
msgid ""
"Pool objects now support the context management protocol -- see "
":ref:`typecontextmanager`.  :meth:`~contextmanager.__enter__` returns the "
"pool object, and :meth:`~contextmanager.__exit__` calls :meth:`terminate`."
msgstr ""

#: ../../library/multiprocessing.rst:2260
msgid ""
"The class of the result returned by :meth:`Pool.apply_async` and "
":meth:`Pool.map_async`."
msgstr ""

#: ../../library/multiprocessing.rst:2265
msgid ""
"Return the result when it arrives.  If *timeout* is not ``None`` and the "
"result does not arrive within *timeout* seconds then "
":exc:`multiprocessing.TimeoutError` is raised.  If the remote call raised an"
" exception then that exception will be reraised by :meth:`get`."
msgstr ""

#: ../../library/multiprocessing.rst:2272
msgid "Wait until the result is available or until *timeout* seconds pass."
msgstr ""

#: ../../library/multiprocessing.rst:2276
msgid "Return whether the call has completed."
msgstr ""

#: ../../library/multiprocessing.rst:2280
msgid ""
"Return whether the call completed without raising an exception.  Will raise "
":exc:`AssertionError` if the result is not ready."
msgstr ""

#: ../../library/multiprocessing.rst:2283
msgid ""
"If the result is not ready, :exc:`ValueError` is raised instead of "
":exc:`AssertionError`."
msgstr ""

#: ../../library/multiprocessing.rst:2287
msgid "The following example demonstrates the use of a pool::"
msgstr ""

#: ../../library/multiprocessing.rst:2314
msgid "Listeners and Clients"
msgstr ""

#: ../../library/multiprocessing.rst:2319
msgid ""
"Usually message passing between processes is done using queues or by using "
":class:`~Connection` objects returned by :func:`~multiprocessing.Pipe`."
msgstr ""

#: ../../library/multiprocessing.rst:2323
msgid ""
"However, the :mod:`multiprocessing.connection` module allows some extra "
"flexibility.  It basically gives a high level message oriented API for "
"dealing with sockets or Windows named pipes.  It also has support for "
"*digest authentication* using the :mod:`hmac` module, and for polling "
"multiple connections at the same time."
msgstr ""

#: ../../library/multiprocessing.rst:2332
msgid ""
"Send a randomly generated message to the other end of the connection and "
"wait for a reply."
msgstr ""

#: ../../library/multiprocessing.rst:2335
msgid ""
"If the reply matches the digest of the message using *authkey* as the key "
"then a welcome message is sent to the other end of the connection.  "
"Otherwise :exc:`~multiprocessing.AuthenticationError` is raised."
msgstr ""

#: ../../library/multiprocessing.rst:2341
msgid ""
"Receive a message, calculate the digest of the message using *authkey* as "
"the key, and then send the digest back."
msgstr ""

#: ../../library/multiprocessing.rst:2344
msgid ""
"If a welcome message is not received, then "
":exc:`~multiprocessing.AuthenticationError` is raised."
msgstr ""

#: ../../library/multiprocessing.rst:2349
msgid ""
"Attempt to set up a connection to the listener which is using address "
"*address*, returning a :class:`~Connection`."
msgstr ""

#: ../../library/multiprocessing.rst:2352
msgid ""
"The type of the connection is determined by *family* argument, but this can "
"generally be omitted since it can usually be inferred from the format of "
"*address*. (See :ref:`multiprocessing-address-formats`)"
msgstr ""

#: ../../library/multiprocessing.rst:2356
#: ../../library/multiprocessing.rst:2391
msgid ""
"If *authkey* is given and not None, it should be a byte string and will be "
"used as the secret key for an HMAC-based authentication challenge. No "
"authentication is done if *authkey* is None. "
":exc:`~multiprocessing.AuthenticationError` is raised if authentication "
"fails. See :ref:`multiprocessing-auth-keys`."
msgstr ""

#: ../../library/multiprocessing.rst:2364
msgid ""
"A wrapper for a bound socket or Windows named pipe which is 'listening' for "
"connections."
msgstr ""

#: ../../library/multiprocessing.rst:2367
msgid ""
"*address* is the address to be used by the bound socket or named pipe of the"
" listener object."
msgstr ""

#: ../../library/multiprocessing.rst:2372
msgid ""
"If an address of '0.0.0.0' is used, the address will not be a connectable "
"end point on Windows. If you require a connectable end-point, you should use"
" '127.0.0.1'."
msgstr ""

#: ../../library/multiprocessing.rst:2376
msgid ""
"*family* is the type of socket (or named pipe) to use.  This can be one of "
"the strings ``'AF_INET'`` (for a TCP socket), ``'AF_UNIX'`` (for a Unix "
"domain socket) or ``'AF_PIPE'`` (for a Windows named pipe).  Of these only "
"the first is guaranteed to be available.  If *family* is ``None`` then the "
"family is inferred from the format of *address*.  If *address* is also "
"``None`` then a default is chosen.  This default is the family which is "
"assumed to be the fastest available.  See :ref:`multiprocessing-address-"
"formats`.  Note that if *family* is ``'AF_UNIX'`` and address is ``None`` "
"then the socket will be created in a private temporary directory created "
"using :func:`tempfile.mkstemp`."
msgstr ""

#: ../../library/multiprocessing.rst:2387
msgid ""
"If the listener object uses a socket then *backlog* (1 by default) is passed"
" to the :meth:`~socket.socket.listen` method of the socket once it has been "
"bound."
msgstr ""

#: ../../library/multiprocessing.rst:2399
msgid ""
"Accept a connection on the bound socket or named pipe of the listener object"
" and return a :class:`~Connection` object. If authentication is attempted "
"and fails, then :exc:`~multiprocessing.AuthenticationError` is raised."
msgstr ""

#: ../../library/multiprocessing.rst:2406
msgid ""
"Close the bound socket or named pipe of the listener object.  This is called"
" automatically when the listener is garbage collected.  However it is "
"advisable to call it explicitly."
msgstr ""

#: ../../library/multiprocessing.rst:2410
msgid "Listener objects have the following read-only properties:"
msgstr ""

#: ../../library/multiprocessing.rst:2414
msgid "The address which is being used by the Listener object."
msgstr ""

#: ../../library/multiprocessing.rst:2418
msgid ""
"The address from which the last accepted connection came.  If this is "
"unavailable then it is ``None``."
msgstr ""

#: ../../library/multiprocessing.rst:2421
msgid ""
"Listener objects now support the context management protocol -- see "
":ref:`typecontextmanager`.  :meth:`~contextmanager.__enter__` returns the "
"listener object, and :meth:`~contextmanager.__exit__` calls :meth:`close`."
msgstr ""

#: ../../library/multiprocessing.rst:2428
msgid ""
"Wait till an object in *object_list* is ready.  Returns the list of those "
"objects in *object_list* which are ready.  If *timeout* is a float then the "
"call blocks for at most that many seconds.  If *timeout* is ``None`` then it"
" will block for an unlimited period. A negative timeout is equivalent to a "
"zero timeout."
msgstr ""

#: ../../library/multiprocessing.rst:2434
msgid ""
"For both Unix and Windows, an object can appear in *object_list* if it is"
msgstr ""

#: ../../library/multiprocessing.rst:2437
msgid "a readable :class:`~multiprocessing.connection.Connection` object;"
msgstr ""

#: ../../library/multiprocessing.rst:2438
msgid "a connected and readable :class:`socket.socket` object; or"
msgstr ""

#: ../../library/multiprocessing.rst:2439
msgid ""
"the :attr:`~multiprocessing.Process.sentinel` attribute of a "
":class:`~multiprocessing.Process` object."
msgstr ""

#: ../../library/multiprocessing.rst:2442
msgid ""
"A connection or socket object is ready when there is data available to be "
"read from it, or the other end has been closed."
msgstr ""

#: ../../library/multiprocessing.rst:2445
msgid ""
"**Unix**: ``wait(object_list, timeout)`` almost equivalent "
"``select.select(object_list, [], [], timeout)``.  The difference is that, if"
" :func:`select.select` is interrupted by a signal, it can raise "
":exc:`OSError` with an error number of ``EINTR``, whereas :func:`wait` will "
"not."
msgstr ""

#: ../../library/multiprocessing.rst:2451
msgid ""
"**Windows**: An item in *object_list* must either be an integer handle which"
" is waitable (according to the definition used by the documentation of the "
"Win32 function ``WaitForMultipleObjects()``) or it can be an object with a "
":meth:`fileno` method which returns a socket handle or pipe handle.  (Note "
"that pipe handles and socket handles are **not** waitable handles.)"
msgstr ""

#: ../../library/multiprocessing.rst:2461
msgid "**Examples**"
msgstr ""

#: ../../library/multiprocessing.rst:2463
msgid ""
"The following server code creates a listener which uses ``'secret "
"password'`` as an authentication key.  It then waits for a connection and "
"sends some data to the client::"
msgstr ""

#: ../../library/multiprocessing.rst:2482
msgid ""
"The following code connects to the server and receives some data from the "
"server::"
msgstr ""

#: ../../library/multiprocessing.rst:2499
msgid ""
"The following code uses :func:`~multiprocessing.connection.wait` to wait for"
" messages from multiple processes at once::"
msgstr ""

#: ../../library/multiprocessing.rst:2538
msgid "Address Formats"
msgstr ""

#: ../../library/multiprocessing.rst:2540
msgid ""
"An ``'AF_INET'`` address is a tuple of the form ``(hostname, port)`` where "
"*hostname* is a string and *port* is an integer."
msgstr ""

#: ../../library/multiprocessing.rst:2543
msgid ""
"An ``'AF_UNIX'`` address is a string representing a filename on the "
"filesystem."
msgstr ""

#: ../../library/multiprocessing.rst:2549
msgid "An ``'AF_PIPE'`` address is a string of the form"
msgstr ""

#: ../../library/multiprocessing.rst:2547
msgid ""
":samp:`r'\\\\\\\\.\\\\pipe\\\\{PipeName}'`.  To use :func:`Client` to "
"connect to a named pipe on a remote computer called *ServerName* one should "
"use an address of the form "
":samp:`r'\\\\\\\\{ServerName}\\\\pipe\\\\{PipeName}'` instead."
msgstr ""

#: ../../library/multiprocessing.rst:2551
msgid ""
"Note that any string beginning with two backslashes is assumed by default to"
" be an ``'AF_PIPE'`` address rather than an ``'AF_UNIX'`` address."
msgstr ""

#: ../../library/multiprocessing.rst:2558
msgid "Authentication keys"
msgstr ""

#: ../../library/multiprocessing.rst:2560
msgid ""
"When one uses :meth:`Connection.recv <Connection.recv>`, the data received "
"is automatically unpickled. Unfortunately unpickling data from an untrusted "
"source is a security risk. Therefore :class:`Listener` and :func:`Client` "
"use the :mod:`hmac` module to provide digest authentication."
msgstr ""

#: ../../library/multiprocessing.rst:2566
msgid ""
"An authentication key is a byte string which can be thought of as a "
"password: once a connection is established both ends will demand proof that "
"the other knows the authentication key.  (Demonstrating that both ends are "
"using the same key does **not** involve sending the key over the "
"connection.)"
msgstr ""

#: ../../library/multiprocessing.rst:2572
msgid ""
"If authentication is requested but no authentication key is specified then "
"the return value of ``current_process().authkey`` is used (see "
":class:`~multiprocessing.Process`).  This value will be automatically "
"inherited by any :class:`~multiprocessing.Process` object that the current "
"process creates. This means that (by default) all processes of a multi-"
"process program will share a single authentication key which can be used "
"when setting up connections between themselves."
msgstr ""

#: ../../library/multiprocessing.rst:2580
msgid ""
"Suitable authentication keys can also be generated by using "
":func:`os.urandom`."
msgstr ""

#: ../../library/multiprocessing.rst:2584
msgid "Logging"
msgstr "日志"

#: ../../library/multiprocessing.rst:2586
msgid ""
"Some support for logging is available.  Note, however, that the "
":mod:`logging` package does not use process shared locks so it is possible "
"(depending on the handler type) for messages from different processes to get"
" mixed up."
msgstr ""

#: ../../library/multiprocessing.rst:2593
msgid ""
"Returns the logger used by :mod:`multiprocessing`.  If necessary, a new one "
"will be created."
msgstr ""

#: ../../library/multiprocessing.rst:2596
msgid ""
"When first created the logger has level :data:`logging.NOTSET` and no "
"default handler. Messages sent to this logger will not by default propagate "
"to the root logger."
msgstr ""

#: ../../library/multiprocessing.rst:2600
msgid ""
"Note that on Windows child processes will only inherit the level of the "
"parent process's logger -- any other customization of the logger will not be"
" inherited."
msgstr ""

#: ../../library/multiprocessing.rst:2607
msgid ""
"This function performs a call to :func:`get_logger` but in addition to "
"returning the logger created by get_logger, it adds a handler which sends "
"output to :data:`sys.stderr` using format ``'[%(levelname)s/%(processName)s]"
" %(message)s'``."
msgstr ""

#: ../../library/multiprocessing.rst:2612
msgid "Below is an example session with logging turned on::"
msgstr ""

#: ../../library/multiprocessing.rst:2627
msgid "For a full table of logging levels, see the :mod:`logging` module."
msgstr ""

#: ../../library/multiprocessing.rst:2631
msgid "The :mod:`multiprocessing.dummy` module"
msgstr ""

#: ../../library/multiprocessing.rst:2636
msgid ""
":mod:`multiprocessing.dummy` replicates the API of :mod:`multiprocessing` "
"but is no more than a wrapper around the :mod:`threading` module."
msgstr ""

#: ../../library/multiprocessing.rst:2643
msgid "Programming guidelines"
msgstr ""

#: ../../library/multiprocessing.rst:2645
msgid ""
"There are certain guidelines and idioms which should be adhered to when "
"using :mod:`multiprocessing`."
msgstr ""

#: ../../library/multiprocessing.rst:2650
msgid "All start methods"
msgstr ""

#: ../../library/multiprocessing.rst:2652
msgid "The following applies to all start methods."
msgstr ""

#: ../../library/multiprocessing.rst:2654
msgid "Avoid shared state"
msgstr ""

#: ../../library/multiprocessing.rst:2656
msgid ""
"As far as possible one should try to avoid shifting large amounts of data "
"between processes."
msgstr ""

#: ../../library/multiprocessing.rst:2659
msgid ""
"It is probably best to stick to using queues or pipes for communication "
"between processes rather than using the lower level synchronization "
"primitives."
msgstr ""

#: ../../library/multiprocessing.rst:2663
msgid "Picklability"
msgstr ""

#: ../../library/multiprocessing.rst:2665
msgid "Ensure that the arguments to the methods of proxies are picklable."
msgstr ""

#: ../../library/multiprocessing.rst:2667
msgid "Thread safety of proxies"
msgstr ""

#: ../../library/multiprocessing.rst:2669
msgid ""
"Do not use a proxy object from more than one thread unless you protect it "
"with a lock."
msgstr ""

#: ../../library/multiprocessing.rst:2672
msgid ""
"(There is never a problem with different processes using the *same* proxy.)"
msgstr ""

#: ../../library/multiprocessing.rst:2674
msgid "Joining zombie processes"
msgstr ""

#: ../../library/multiprocessing.rst:2676
msgid ""
"On Unix when a process finishes but has not been joined it becomes a zombie."
" There should never be very many because each time a new process starts (or "
":func:`~multiprocessing.active_children` is called) all completed processes "
"which have not yet been joined will be joined.  Also calling a finished "
"process's :meth:`Process.is_alive <multiprocessing.Process.is_alive>` will "
"join the process.  Even so it is probably good practice to explicitly join "
"all the processes that you start."
msgstr ""

#: ../../library/multiprocessing.rst:2684
msgid "Better to inherit than pickle/unpickle"
msgstr ""

#: ../../library/multiprocessing.rst:2686
msgid ""
"When using the *spawn* or *forkserver* start methods many types from "
":mod:`multiprocessing` need to be picklable so that child processes can use "
"them.  However, one should generally avoid sending shared objects to other "
"processes using pipes or queues. Instead you should arrange the program so "
"that a process which needs access to a shared resource created elsewhere can"
" inherit it from an ancestor process."
msgstr ""

#: ../../library/multiprocessing.rst:2694
msgid "Avoid terminating processes"
msgstr ""

#: ../../library/multiprocessing.rst:2696
msgid ""
"Using the :meth:`Process.terminate <multiprocessing.Process.terminate>` "
"method to stop a process is liable to cause any shared resources (such as "
"locks, semaphores, pipes and queues) currently being used by the process to "
"become broken or unavailable to other processes."
msgstr ""

#: ../../library/multiprocessing.rst:2702
msgid ""
"Therefore it is probably best to only consider using "
":meth:`Process.terminate <multiprocessing.Process.terminate>` on processes "
"which never use any shared resources."
msgstr ""

#: ../../library/multiprocessing.rst:2706
msgid "Joining processes that use queues"
msgstr ""

#: ../../library/multiprocessing.rst:2708
msgid ""
"Bear in mind that a process that has put items in a queue will wait before "
"terminating until all the buffered items are fed by the \"feeder\" thread to"
" the underlying pipe.  (The child process can call the "
":meth:`Queue.cancel_join_thread <multiprocessing.Queue.cancel_join_thread>` "
"method of the queue to avoid this behaviour.)"
msgstr ""

#: ../../library/multiprocessing.rst:2714
msgid ""
"This means that whenever you use a queue you need to make sure that all "
"items which have been put on the queue will eventually be removed before the"
" process is joined.  Otherwise you cannot be sure that processes which have "
"put items on the queue will terminate.  Remember also that non-daemonic "
"processes will be joined automatically."
msgstr ""

#: ../../library/multiprocessing.rst:2720
msgid "An example which will deadlock is the following::"
msgstr ""

#: ../../library/multiprocessing.rst:2734
msgid ""
"A fix here would be to swap the last two lines (or simply remove the "
"``p.join()`` line)."
msgstr ""

#: ../../library/multiprocessing.rst:2737
msgid "Explicitly pass resources to child processes"
msgstr ""

#: ../../library/multiprocessing.rst:2739
msgid ""
"On Unix using the *fork* start method, a child process can make use of a "
"shared resource created in a parent process using a global resource.  "
"However, it is better to pass the object as an argument to the constructor "
"for the child process."
msgstr ""

#: ../../library/multiprocessing.rst:2744
msgid ""
"Apart from making the code (potentially) compatible with Windows and the "
"other start methods this also ensures that as long as the child process is "
"still alive the object will not be garbage collected in the parent process."
"  This might be important if some resource is freed when the object is "
"garbage collected in the parent process."
msgstr ""

#: ../../library/multiprocessing.rst:2751
msgid "So for instance ::"
msgstr "所以对于实例："

#: ../../library/multiprocessing.rst:2763
msgid "should be rewritten as ::"
msgstr "应当重写成这样："

#: ../../library/multiprocessing.rst:2775
msgid "Beware of replacing :data:`sys.stdin` with a \"file like object\""
msgstr ""

#: ../../library/multiprocessing.rst:2777
msgid ":mod:`multiprocessing` originally unconditionally called::"
msgstr ""

#: ../../library/multiprocessing.rst:2781
msgid ""
"in the :meth:`multiprocessing.Process._bootstrap` method --- this resulted "
"in issues with processes-in-processes. This has been changed to::"
msgstr ""

#: ../../library/multiprocessing.rst:2787
msgid ""
"Which solves the fundamental issue of processes colliding with each other "
"resulting in a bad file descriptor error, but introduces a potential danger "
"to applications which replace :func:`sys.stdin` with a \"file-like object\" "
"with output buffering.  This danger is that if multiple processes call "
":meth:`~io.IOBase.close()` on this file-like object, it could result in the "
"same data being flushed to the object multiple times, resulting in "
"corruption."
msgstr ""

#: ../../library/multiprocessing.rst:2794
msgid ""
"If you write a file-like object and implement your own caching, you can make"
" it fork-safe by storing the pid whenever you append to the cache, and "
"discarding the cache when the pid changes. For example::"
msgstr ""

#: ../../library/multiprocessing.rst:2806
msgid ""
"For more information, see :issue:`5155`, :issue:`5313` and :issue:`5331`"
msgstr ""

#: ../../library/multiprocessing.rst:2809
msgid "The *spawn* and *forkserver* start methods"
msgstr ""

#: ../../library/multiprocessing.rst:2811
msgid ""
"There are a few extra restriction which don't apply to the *fork* start "
"method."
msgstr ""

#: ../../library/multiprocessing.rst:2814
msgid "More picklability"
msgstr ""

#: ../../library/multiprocessing.rst:2816
msgid ""
"Ensure that all arguments to :meth:`Process.__init__` are picklable. Also, "
"if you subclass :class:`~multiprocessing.Process` then make sure that "
"instances will be picklable when the :meth:`Process.start "
"<multiprocessing.Process.start>` method is called."
msgstr ""

#: ../../library/multiprocessing.rst:2821
msgid "Global variables"
msgstr ""

#: ../../library/multiprocessing.rst:2823
msgid ""
"Bear in mind that if code run in a child process tries to access a global "
"variable, then the value it sees (if any) may not be the same as the value "
"in the parent process at the time that :meth:`Process.start "
"<multiprocessing.Process.start>` was called."
msgstr ""

#: ../../library/multiprocessing.rst:2828
msgid ""
"However, global variables which are just module level constants cause no "
"problems."
msgstr ""

#: ../../library/multiprocessing.rst:2831
msgid "Safe importing of main module"
msgstr ""

#: ../../library/multiprocessing.rst:2833
msgid ""
"Make sure that the main module can be safely imported by a new Python "
"interpreter without causing unintended side effects (such a starting a new "
"process)."
msgstr ""

#: ../../library/multiprocessing.rst:2837
msgid ""
"For example, using the *spawn* or *forkserver* start method running the "
"following module would fail with a :exc:`RuntimeError`::"
msgstr ""

#: ../../library/multiprocessing.rst:2849
msgid ""
"Instead one should protect the \"entry point\" of the program by using ``if "
"__name__ == '__main__':`` as follows::"
msgstr ""

#: ../../library/multiprocessing.rst:2863
msgid ""
"(The ``freeze_support()`` line can be omitted if the program will be run "
"normally instead of frozen.)"
msgstr ""

#: ../../library/multiprocessing.rst:2866
msgid ""
"This allows the newly spawned Python interpreter to safely import the module"
" and then run the module's ``foo()`` function."
msgstr ""

#: ../../library/multiprocessing.rst:2869
msgid ""
"Similar restrictions apply if a pool or manager is created in the main "
"module."
msgstr ""

#: ../../library/multiprocessing.rst:2876
msgid "Examples"
msgstr "示例"

#: ../../library/multiprocessing.rst:2878
msgid ""
"Demonstration of how to create and use customized managers and proxies:"
msgstr ""

#: ../../library/multiprocessing.rst:2884
msgid "Using :class:`~multiprocessing.pool.Pool`:"
msgstr ""

#: ../../library/multiprocessing.rst:2890
msgid ""
"An example showing how to use queues to feed tasks to a collection of worker"
" processes and collect the results:"
msgstr ""
