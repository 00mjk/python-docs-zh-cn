# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Shengjing Zhu <zsj950618@gmail.com>, 2018
# ww song <sww4718168@gmail.com>, 2018
# Freesand Leo <yuqinju@163.com>, 2019
# Zombie110year <zombie110year@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-24 10:57+0900\n"
"PO-Revision-Date: 2017-02-16 23:28+0000\n"
"Last-Translator: Zombie110year <zombie110year@gmail.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/subprocess.rst:2
msgid ":mod:`subprocess` --- Subprocess management"
msgstr ":mod:`subprocess` --- 子进程管理"

#: ../../library/subprocess.rst:10
msgid "**Source code:** :source:`Lib/subprocess.py`"
msgstr "**源代码:** :source:`Lib/subprocess.py`"

#: ../../library/subprocess.rst:14
msgid ""
"The :mod:`subprocess` module allows you to spawn new processes, connect to "
"their input/output/error pipes, and obtain their return codes.  This module "
"intends to replace several older modules and functions::"
msgstr ""
":mod:`subprocess` 模块允许你生成新的进程，连接它们的输入、输出、错误管道，并且获取它们的返回码。此模块打算代替一些老旧的模块与功能："

#: ../../library/subprocess.rst:21
msgid ""
"Information about how the :mod:`subprocess` module can be used to replace "
"these modules and functions can be found in the following sections."
msgstr "在下面的段落中，你可以找到关于 :mod:`subprocess` 模块如何代替这些模块和功能的相关信息。"

#: ../../library/subprocess.rst:26
msgid ":pep:`324` -- PEP proposing the subprocess module"
msgstr ":pep:`324` -- 提出 subprocess 模块的 PEP"

#: ../../library/subprocess.rst:30
msgid "Using the :mod:`subprocess` Module"
msgstr "使用 :mod:`subprocess` 模块"

#: ../../library/subprocess.rst:32
msgid ""
"The recommended approach to invoking subprocesses is to use the :func:`run` "
"function for all use cases it can handle. For more advanced use cases, the "
"underlying :class:`Popen` interface can be used directly."
msgstr ""
"推荐的调用子进程的方式是在任何它支持的用例中使用 :func:`run` 函数。对于更进阶的用例，也可以使用底层的 :class:`Popen` 接口。"

#: ../../library/subprocess.rst:36
msgid ""
"The :func:`run` function was added in Python 3.5; if you need to retain "
"compatibility with older versions, see the :ref:`call-function-trio` "
"section."
msgstr ""
":func:`run` 函数是在 Python 3.5 被添加的；如果你需要与旧版本保持兼容，查看 :ref:`call-function-trio` "
"段落。"

#: ../../library/subprocess.rst:45
msgid ""
"Run the command described by *args*.  Wait for command to complete, then "
"return a :class:`CompletedProcess` instance."
msgstr "运行被 *arg* 描述的指令。等待指令完成，然后返回一个 :class:`CompletedProcess` 示例。"

#: ../../library/subprocess.rst:48
msgid ""
"The arguments shown above are merely the most common ones, described below "
"in :ref:`frequently-used-arguments` (hence the use of keyword-only notation "
"in the abbreviated signature). The full function signature is largely the "
"same as that of the :class:`Popen` constructor - most of the arguments to "
"this function are passed through to that interface. (*timeout*,  *input*, "
"*check*, and *capture_output* are not.)"
msgstr ""
"以上显示的参数仅仅是最简单的一些，下面 :ref:`frequently-used-arguments` "
"描述（因此在缩写签名中使用仅关键字标示）。完整的函数头和 :class:`Popen` "
"的构造函数一样，此函数接受的大多数参数都被传递给该接口。（*timeout*, *input*, *check* 和 *capture_output* "
"除外）。"

#: ../../library/subprocess.rst:55
msgid ""
"If *capture_output* is true, stdout and stderr will be captured. When used, "
"the internal :class:`Popen` object is automatically created with "
"``stdout=PIPE`` and ``stderr=PIPE``. The *stdout* and *stderr* arguments may"
" not be supplied at the same time as *capture_output*."
msgstr ""
"如果 *capture_output* 为 True，标准输出和标准错误将被捕获。当使用时，内部的 :class:`Popen` "
"对象将会自动地被创建，伴随着 ``stdout=PIPE`` 以及 ``stderr=PIPE`` 设置。 *stdout* 和 *stderr* "
"参数不应当和 *capture_output* 同时传入。"

#: ../../library/subprocess.rst:60
msgid ""
"The *timeout* argument is passed to :meth:`Popen.communicate`. If the "
"timeout expires, the child process will be killed and waited for.  The "
":exc:`TimeoutExpired` exception will be re-raised after the child process "
"has terminated."
msgstr ""
"*timeout* 参数将被传递给 :meth:`Popen.communicate`。如果发生超时，子进程将被杀死并等待。 "
":exc:`TimeoutExpired` 异常将在子进程中断后被抛出。"

#: ../../library/subprocess.rst:65
msgid ""
"The *input* argument is passed to :meth:`Popen.communicate` and thus to the "
"subprocess's stdin.  If used it must be a byte sequence, or a string if "
"*encoding* or *errors* is specified or *text* is true.  When used, the "
"internal :class:`Popen` object is automatically created with ``stdin=PIPE``,"
" and the *stdin* argument may not be used as well."
msgstr ""
"*input* 参数将被传递给 :meth:`Popen.communicate` 以及子进程的标准输入. 如果使用此参数, 它必须是一个字节序列. "
"如果指定了 *encoding* 或 *errors* 或者将 *text* 设置为 ``True``, 那么也可以是一个字符串. 当使用此参数时, "
"内部的 :class:`Popen` 对象将自动被创建, 伴随着设置 ``stdin=PIPE``, 并且 *stdin*  可能不被使用."

#: ../../library/subprocess.rst:71
msgid ""
"If *check* is true, and the process exits with a non-zero exit code, a "
":exc:`CalledProcessError` exception will be raised. Attributes of that "
"exception hold the arguments, the exit code, and stdout and stderr if they "
"were captured."
msgstr ""
"如果 *check* 设为 True, 并且进程以非零状态码退出, 一个 :exc:`CalledProcessError` 异常将被抛出. "
"这个异常的属性将设置为参数, 退出码, 以及标准输出和标准错误, 如果被捕获到."

#: ../../library/subprocess.rst:76
msgid ""
"If *encoding* or *errors* are specified, or *text* is true, file objects for"
" stdin, stdout and stderr are opened in text mode using the specified "
"*encoding* and *errors* or the :class:`io.TextIOWrapper` default. The "
"*universal_newlines* argument is equivalent  to *text* and is provided for "
"backwards compatibility. By default, file objects are opened in binary mode."
msgstr ""
"如果 *encoding* 或者 *error* 被指定, 或者 *text* 被设为 True, 标准输入, 标准输出和标准错误的文件对象将通过指定的"
" *encoding* 和 *errors* 以文本模式打开, 否则以默认的 :class:`io.TextIOWrapper` 打开. "
"*universal_newline* 参数等同于 *text* 并且提供了向后兼容性. 默认情况下, 文件对象是以二进制模式打开的."

#: ../../library/subprocess.rst:82
msgid ""
"If *env* is not ``None``, it must be a mapping that defines the environment "
"variables for the new process; these are used instead of the default "
"behavior of inheriting the current process' environment. It is passed "
"directly to :class:`Popen`."
msgstr ""
"如果 *env* 不是 ``None``, 它必须是一个字典, 为新的进程设置环境变量; 它用于替换继承的当前进程的环境的默认行为. 它将直接被传递给 "
":class:`Popen`."

#: ../../library/subprocess.rst:87
msgid "Examples::"
msgstr "例如::"

#: ../../library/subprocess.rst:105
msgid "Added *encoding* and *errors* parameters"
msgstr "添加了 *encoding* 和 *errors* 形参."

#: ../../library/subprocess.rst:109
msgid ""
"Added the *text* parameter, as a more understandable alias of "
"*universal_newlines*. Added the *capture_output* parameter."
msgstr ""
"添加了 *text* 形参, 作为 *universal_newlines* 的一个更好理解的别名. 添加了 *capture_output* 形参."

#: ../../library/subprocess.rst:114
msgid ""
"The return value from :func:`run`, representing a process that has finished."
msgstr ":func:`run` 的返回值, 代表一个进程已经结束."

#: ../../library/subprocess.rst:118
msgid ""
"The arguments used to launch the process. This may be a list or a string."
msgstr "被用作启动进程的参数. 可能是一个列表或字符串."

#: ../../library/subprocess.rst:122
msgid ""
"Exit status of the child process. Typically, an exit status of 0 indicates "
"that it ran successfully."
msgstr "子进程的退出状态码. 通常来说, 一个为 0 的退出码表示进程运行正常."

#: ../../library/subprocess.rst:125 ../../library/subprocess.rst:776
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal "
"``N`` (POSIX only)."
msgstr "一个负值 ``-N`` 表示子进程被信号 ``N`` 中断 (仅 POSIX)."

#: ../../library/subprocess.rst:130
msgid ""
"Captured stdout from the child process. A bytes sequence, or a string if "
":func:`run` was called with an encoding, errors, or text=True. ``None`` if "
"stdout was not captured."
msgstr ""
"从子进程捕获到的标准输出. 一个字节序列, 或一个字符串, 如果 :func:`run` 是设置了 *encoding*, *errors* 或者 "
"``text=True`` 来运行的. 如果未有捕获, 则为 ``None``."

#: ../../library/subprocess.rst:134
msgid ""
"If you ran the process with ``stderr=subprocess.STDOUT``, stdout and stderr "
"will be combined in this attribute, and :attr:`stderr` will be ``None``."
msgstr ""
"如果你通过 ``stderr=subprocess.STDOUT`` 运行, 标准输入和标准错误将被组合在一起, 并且 :attr:`stderr`` "
"将为 ``None``."

#: ../../library/subprocess.rst:140
msgid ""
"Captured stderr from the child process. A bytes sequence, or a string if "
":func:`run` was called with an encoding, errors, or text=True. ``None`` if "
"stderr was not captured."
msgstr ""
"捕获到的子进程的标准错误. 一个字节序列, 或者一个字符串, 如果 :func:`run` 是设置了参数 *encoding*, *errors* 或者"
" ``text=True`` 运行的. 如果未有捕获, 则为 ``None``."

#: ../../library/subprocess.rst:146
msgid "If :attr:`returncode` is non-zero, raise a :exc:`CalledProcessError`."
msgstr "如果 :attr:`returncode` 非零, 抛出 :exc:`CalledProcessError`."

#: ../../library/subprocess.rst:152
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument"
" to :class:`Popen` and indicates that the special file :data:`os.devnull` "
"will be used."
msgstr ""
"可被 :class:`Popen` 的 *stdin*, *stdout* 或者 *stderr* 参数使用的特殊值, 表示使用特殊文件 "
":data:`os.devnull`."

#: ../../library/subprocess.rst:161
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument"
" to :class:`Popen` and indicates that a pipe to the standard stream should "
"be opened.  Most useful with :meth:`Popen.communicate`."
msgstr ""
"可被 :class:`Popen` 的 *stdin*, *stdout* 或者 *stderr* 参数使用的特殊值, 表示打开标准流的管道.\n"
"常用于 :meth:`Popen.communicate`."

#: ../../library/subprocess.rst:168
msgid ""
"Special value that can be used as the *stderr* argument to :class:`Popen` "
"and indicates that standard error should go into the same handle as standard"
" output."
msgstr ""
"可被 :class:`Popen` 的 *stdin*, *stdout* 或者 *stderr* 参数使用的特殊值, 表示标准错误与标准输出进入同一个"
" handle."

#: ../../library/subprocess.rst:175
msgid "Base class for all other exceptions from this module."
msgstr "此模块的其他异常的基类。"

#: ../../library/subprocess.rst:182
msgid ""
"Subclass of :exc:`SubprocessError`, raised when a timeout expires while "
"waiting for a child process."
msgstr ":exc:`SubprocessError` 的子类，等待子进程的过程中发生超时时被抛出。"

#: ../../library/subprocess.rst:187 ../../library/subprocess.rst:224
msgid "Command that was used to spawn the child process."
msgstr "用于创建子进程的指令。"

#: ../../library/subprocess.rst:191
msgid "Timeout in seconds."
msgstr "超时秒数。"

#: ../../library/subprocess.rst:195 ../../library/subprocess.rst:228
msgid ""
"Output of the child process if it was captured by :func:`run` or "
":func:`check_output`.  Otherwise, ``None``."
msgstr "子进程的输出， 如果被 :func:`run` 或 :func:`check_output` 捕获。否则为 ``None``。"

#: ../../library/subprocess.rst:200 ../../library/subprocess.rst:233
msgid "Alias for output, for symmetry with :attr:`stderr`."
msgstr "对 output 的别名，对应的有 :attr:`stderr`。"

#: ../../library/subprocess.rst:204 ../../library/subprocess.rst:237
msgid ""
"Stderr output of the child process if it was captured by :func:`run`. "
"Otherwise, ``None``."
msgstr "子进程的标准错误输出，如果被 :func:`run` 捕获。 否则为 ``None``。"

#: ../../library/subprocess.rst:209 ../../library/subprocess.rst:240
msgid "*stdout* and *stderr* attributes added"
msgstr "添加了 *stdout* 和 *stderr* 属性。"

#: ../../library/subprocess.rst:214
msgid ""
"Subclass of :exc:`SubprocessError`, raised when a process run by "
":func:`check_call` or :func:`check_output` returns a non-zero exit status."
msgstr ""
":exc:`SubprocessError` 的子类，当一个被 :func:`check_call` 或 :func:`check_output` "
"函数运行的子进程返回了非零退出码时被抛出。"

#: ../../library/subprocess.rst:219
msgid ""
"Exit status of the child process.  If the process exited due to a signal, "
"this will be the negative signal number."
msgstr "子进程的退出状态。如果程序由一个信号终止，这将会被设为一个负的信号码。"

#: ../../library/subprocess.rst:247
msgid "Frequently Used Arguments"
msgstr "常用参数"

#: ../../library/subprocess.rst:249
msgid ""
"To support a wide variety of use cases, the :class:`Popen` constructor (and "
"the convenience functions) accept a large number of optional arguments. For "
"most typical use cases, many of these arguments can be safely left at their "
"default values. The arguments that are most commonly needed are:"
msgstr ""
"为了支持丰富的使用案例， :class:`Popen` "
"的构造函数（以及方便的函数）接受大量可选的参数。对于大多数典型的用例，许多参数可以被安全地留以它们的默认值。通常需要的参数有："

#: ../../library/subprocess.rst:254
msgid ""
"*args* is required for all calls and should be a string, or a sequence of "
"program arguments. Providing a sequence of arguments is generally preferred,"
" as it allows the module to take care of any required escaping and quoting "
"of arguments (e.g. to permit spaces in file names). If passing a single "
"string, either *shell* must be :const:`True` (see below) or else the string "
"must simply name the program to be executed without specifying any "
"arguments."
msgstr ""
"*args* "
"被所有调用需要，应当为一个字符串，或者一个程序参数序列。提供一个参数序列通常更好，它可以更小心地使用参数中的转义字符以及引用（例如允许文件名中的空格）。如果传递一个简单的字符串，则"
" *shell* 参数必须为 :const:`True`（见下文）或者该字符串中将被运行的程序名必须用简单的命名而不指定任何参数。"

#: ../../library/subprocess.rst:262
msgid ""
"*stdin*, *stdout* and *stderr* specify the executed program's standard "
"input, standard output and standard error file handles, respectively.  Valid"
" values are :data:`PIPE`, :data:`DEVNULL`, an existing file descriptor (a "
"positive integer), an existing file object, and ``None``.  :data:`PIPE` "
"indicates that a new pipe to the child should be created.  :data:`DEVNULL` "
"indicates that the special file :data:`os.devnull` will be used.  With the "
"default settings of ``None``, no redirection will occur; the child's file "
"handles will be inherited from the parent.  Additionally, *stderr* can be "
":data:`STDOUT`, which indicates that the stderr data from the child process "
"should be captured into the same file handle as for *stdout*."
msgstr ""
"*stdin*， *stdout* 和 *stderr* 分别指定了执行的程序的标准输入、输出和标准错误文件流。合法的值有 :data:`PIPE` 、"
" :data:`DEVNULL` 、 一个现存的文件描述符（一个正整数）、一个现存的文件对象以及 ``None``。 :data:`PIPE` "
"表示应该新建一个对子进程的管道。 :data:`DEVNULL` 表示使用特殊的文件 :data:`os.devnull`。当使用默认设置 "
"``None`` 时，将不会进行重定向，子进程的文件流将继承自父进程。另外， *stderr* 可能为 "
":data:`STDOUT`，表示来自于子进程的标准错误数据应该被 *stdout* 相同的流捕获。"

#: ../../library/subprocess.rst:276
msgid ""
"If *encoding* or *errors* are specified, or *text* (also known as "
"*universal_newlines*) is true, the file objects *stdin*, *stdout* and "
"*stderr* will be opened in text mode using the *encoding* and *errors* "
"specified in the call or the defaults for :class:`io.TextIOWrapper`."
msgstr ""
"如果 *encoding* 或 *errors* 被指定，或者 *text* （也名为 *universal_newlines*）为 "
":const:`True`，则文件对象 *stdin* 、 *stdout* 与 *stderr* 将会使用在此次调用中指定的 *encoding* 和"
" *errors* 以文本模式打开或者为默认的 :class:`io.TextIOWrapper`。"

#: ../../library/subprocess.rst:282
msgid ""
"For *stdin*, line ending characters ``'\\n'`` in the input will be converted"
" to the default line separator :data:`os.linesep`. For *stdout* and "
"*stderr*, all line endings in the output will be converted to ``'\\n'``.  "
"For more information see the documentation of the :class:`io.TextIOWrapper` "
"class when the *newline* argument to its constructor is ``None``."
msgstr ""
"当构造函数的 *newline* 参数为 ``None`` 时。对于 *stdin*， 输入的换行符 ``'\\n'`` 将被转换为默认的换行符 "
":data:`os.linesep`。对于 *stdout* 和 *stderr*， 所有输出的换行符都被转换为 ``'\\n'``。更多信息，查看 "
":class:`io.TextIOWrapper` 类的文档。"

#: ../../library/subprocess.rst:288
msgid ""
"If text mode is not used, *stdin*, *stdout* and *stderr* will be opened as "
"binary streams. No encoding or line ending conversion is performed."
msgstr "如果文本模式未被使用， *stdin*， *stdout* 和 *stderr* 将会以二进制流模式打开。没有编码与换行符转换发生。"

#: ../../library/subprocess.rst:291
msgid "Added *encoding* and *errors* parameters."
msgstr "添加了 *encoding* 和 *errors* 形参。"

#: ../../library/subprocess.rst:294
msgid "Added the *text* parameter as an alias for *universal_newlines*."
msgstr "添加了 *text* 形参作为 *universal_newlines* 的别名。"

#: ../../library/subprocess.rst:299
msgid ""
"The newlines attribute of the file objects :attr:`Popen.stdin`, "
":attr:`Popen.stdout` and :attr:`Popen.stderr` are not updated by the "
":meth:`Popen.communicate` method."
msgstr ""
"文件对象 :attr:`Popen.stdin` 、 :attr:`Popen.stdout` 和 :attr:`Popen.stderr` "
"的换行符属性不会被 :meth:`Popen.communicate` 方法更新。"

#: ../../library/subprocess.rst:303
msgid ""
"If *shell* is ``True``, the specified command will be executed through the "
"shell.  This can be useful if you are using Python primarily for the "
"enhanced control flow it offers over most system shells and still want "
"convenient access to other shell features such as shell pipes, filename "
"wildcards, environment variable expansion, and expansion of ``~`` to a "
"user's home directory.  However, note that Python itself offers "
"implementations of many shell-like features (in particular, :mod:`glob`, "
":mod:`fnmatch`, :func:`os.walk`, :func:`os.path.expandvars`, "
":func:`os.path.expanduser`, and :mod:`shutil`)."
msgstr ""

#: ../../library/subprocess.rst:313
msgid ""
"When *universal_newlines* is ``True``, the class uses the encoding "
":func:`locale.getpreferredencoding(False) <locale.getpreferredencoding>` "
"instead of ``locale.getpreferredencoding()``.  See the "
":class:`io.TextIOWrapper` class for more information on this change."
msgstr ""

#: ../../library/subprocess.rst:321 ../../library/subprocess.rst:405
msgid ""
"Read the `Security Considerations`_ section before using ``shell=True``."
msgstr ""

#: ../../library/subprocess.rst:323
msgid ""
"These options, along with all of the other options, are described in more "
"detail in the :class:`Popen` constructor documentation."
msgstr ""

#: ../../library/subprocess.rst:328
msgid "Popen Constructor"
msgstr ""

#: ../../library/subprocess.rst:330
msgid ""
"The underlying process creation and management in this module is handled by "
"the :class:`Popen` class. It offers a lot of flexibility so that developers "
"are able to handle the less common cases not covered by the convenience "
"functions."
msgstr ""

#: ../../library/subprocess.rst:343
msgid ""
"Execute a child program in a new process.  On POSIX, the class uses "
":meth:`os.execvp`-like behavior to execute the child program.  On Windows, "
"the class uses the Windows ``CreateProcess()`` function.  The arguments to "
":class:`Popen` are as follows."
msgstr ""

#: ../../library/subprocess.rst:348
msgid ""
"*args* should be a sequence of program arguments or else a single string. By"
" default, the program to execute is the first item in *args* if *args* is a "
"sequence.  If *args* is a string, the interpretation is platform-dependent "
"and described below.  See the *shell* and *executable* arguments for "
"additional differences from the default behavior.  Unless otherwise stated, "
"it is recommended to pass *args* as a sequence."
msgstr ""

#: ../../library/subprocess.rst:355
msgid ""
"On POSIX, if *args* is a string, the string is interpreted as the name or "
"path of the program to execute.  However, this can only be done if not "
"passing arguments to the program."
msgstr ""

#: ../../library/subprocess.rst:361
msgid ""
":meth:`shlex.split` can be useful when determining the correct tokenization "
"for *args*, especially in complex cases::"
msgstr ""

#: ../../library/subprocess.rst:372
msgid ""
"Note in particular that options (such as *-input*) and arguments (such as "
"*eggs.txt*) that are separated by whitespace in the shell go in separate "
"list elements, while arguments that need quoting or backslash escaping when "
"used in the shell (such as filenames containing spaces or the *echo* command"
" shown above) are single list elements."
msgstr ""

#: ../../library/subprocess.rst:378
msgid ""
"On Windows, if *args* is a sequence, it will be converted to a string in a "
"manner described in :ref:`converting-argument-sequence`.  This is because "
"the underlying ``CreateProcess()`` operates on strings."
msgstr ""

#: ../../library/subprocess.rst:382
msgid ""
"The *shell* argument (which defaults to ``False``) specifies whether to use "
"the shell as the program to execute.  If *shell* is ``True``, it is "
"recommended to pass *args* as a string rather than as a sequence."
msgstr ""

#: ../../library/subprocess.rst:386
msgid ""
"On POSIX with ``shell=True``, the shell defaults to :file:`/bin/sh`.  If "
"*args* is a string, the string specifies the command to execute through the "
"shell.  This means that the string must be formatted exactly as it would be "
"when typed at the shell prompt.  This includes, for example, quoting or "
"backslash escaping filenames with spaces in them.  If *args* is a sequence, "
"the first item specifies the command string, and any additional items will "
"be treated as additional arguments to the shell itself.  That is to say, "
":class:`Popen` does the equivalent of::"
msgstr ""

#: ../../library/subprocess.rst:397
msgid ""
"On Windows with ``shell=True``, the :envvar:`COMSPEC` environment variable "
"specifies the default shell.  The only time you need to specify "
"``shell=True`` on Windows is when the command you wish to execute is built "
"into the shell (e.g. :command:`dir` or :command:`copy`).  You do not need "
"``shell=True`` to run a batch file or console-based executable."
msgstr ""

#: ../../library/subprocess.rst:407
msgid ""
"*bufsize* will be supplied as the corresponding argument to the :func:`open`"
" function when creating the stdin/stdout/stderr pipe file objects:"
msgstr ""

#: ../../library/subprocess.rst:411
msgid ""
":const:`0` means unbuffered (read and write are one system call and can "
"return short)"
msgstr ""

#: ../../library/subprocess.rst:413
msgid ""
":const:`1` means line buffered (only usable if ``universal_newlines=True`` "
"i.e., in a text mode)"
msgstr ""

#: ../../library/subprocess.rst:415
msgid "any other positive value means use a buffer of approximately that size"
msgstr ""

#: ../../library/subprocess.rst:417
msgid ""
"negative bufsize (the default) means the system default of "
"io.DEFAULT_BUFFER_SIZE will be used."
msgstr ""

#: ../../library/subprocess.rst:420
msgid ""
"*bufsize* now defaults to -1 to enable buffering by default to match the "
"behavior that most code expects.  In versions prior to Python 3.2.4 and "
"3.3.1 it incorrectly defaulted to :const:`0` which was unbuffered and "
"allowed short reads.  This was unintentional and did not match the behavior "
"of Python 2 as most code expected."
msgstr ""

#: ../../library/subprocess.rst:427
msgid ""
"The *executable* argument specifies a replacement program to execute.   It "
"is very seldom needed.  When ``shell=False``, *executable* replaces the "
"program to execute specified by *args*.  However, the original *args* is "
"still passed to the program.  Most programs treat the program specified by "
"*args* as the command name, which can then be different from the program "
"actually executed.  On POSIX, the *args* name becomes the display name for "
"the executable in utilities such as :program:`ps`.  If ``shell=True``, on "
"POSIX the *executable* argument specifies a replacement shell for the "
"default :file:`/bin/sh`."
msgstr ""

#: ../../library/subprocess.rst:437
msgid ""
"*stdin*, *stdout* and *stderr* specify the executed program's standard "
"input, standard output and standard error file handles, respectively.  Valid"
" values are :data:`PIPE`, :data:`DEVNULL`, an existing file descriptor (a "
"positive integer), an existing :term:`file object`, and ``None``.  "
":data:`PIPE` indicates that a new pipe to the child should be created.  "
":data:`DEVNULL` indicates that the special file :data:`os.devnull` will be "
"used. With the default settings of ``None``, no redirection will occur; the "
"child's file handles will be inherited from the parent.  Additionally, "
"*stderr* can be :data:`STDOUT`, which indicates that the stderr data from "
"the applications should be captured into the same file handle as for stdout."
msgstr ""

#: ../../library/subprocess.rst:448
msgid ""
"If *preexec_fn* is set to a callable object, this object will be called in "
"the child process just before the child is executed. (POSIX only)"
msgstr ""

#: ../../library/subprocess.rst:454
msgid ""
"The *preexec_fn* parameter is not safe to use in the presence of threads in "
"your application.  The child process could deadlock before exec is called. "
"If you must use it, keep it trivial!  Minimize the number of libraries you "
"call into."
msgstr ""

#: ../../library/subprocess.rst:462
msgid ""
"If you need to modify the environment for the child use the *env* parameter "
"rather than doing it in a *preexec_fn*. The *start_new_session* parameter "
"can take the place of a previously common use of *preexec_fn* to call "
"os.setsid() in the child."
msgstr ""

#: ../../library/subprocess.rst:467
msgid ""
"If *close_fds* is true, all file descriptors except :const:`0`, :const:`1` "
"and :const:`2` will be closed before the child process is executed.  "
"Otherwise when *close_fds* is false, file descriptors obey their inheritable"
" flag as described in :ref:`fd_inheritance`."
msgstr ""

#: ../../library/subprocess.rst:472
msgid ""
"On Windows, if *close_fds* is true then no handles will be inherited by the "
"child process unless explicitly passed in the ``handle_list`` element of "
":attr:`STARTUPINFO.lpAttributeList`, or by standard handle redirection."
msgstr ""

#: ../../library/subprocess.rst:476
msgid ""
"The default for *close_fds* was changed from :const:`False` to what is "
"described above."
msgstr ""

#: ../../library/subprocess.rst:480
msgid ""
"On Windows the default for *close_fds* was changed from :const:`False` to "
":const:`True` when redirecting the standard handles. It's now possible to "
"set *close_fds* to :const:`True` when redirecting the standard handles."
msgstr ""

#: ../../library/subprocess.rst:485
msgid ""
"*pass_fds* is an optional sequence of file descriptors to keep open between "
"the parent and child.  Providing any *pass_fds* forces *close_fds* to be "
":const:`True`.  (POSIX only)"
msgstr ""

#: ../../library/subprocess.rst:489
msgid "The *pass_fds* parameter was added."
msgstr ""

#: ../../library/subprocess.rst:492
msgid ""
"If *cwd* is not ``None``, the function changes the working directory to "
"*cwd* before executing the child.  *cwd* can be a :class:`str` and :term"
":`path-like <path-like object>` object.  In particular, the function looks "
"for *executable* (or for the first item in *args*) relative to *cwd* if the "
"executable path is a relative path."
msgstr ""

#: ../../library/subprocess.rst:498
msgid "*cwd* parameter accepts a :term:`path-like object`."
msgstr ""

#: ../../library/subprocess.rst:501
msgid ""
"If *restore_signals* is true (the default) all signals that Python has set "
"to SIG_IGN are restored to SIG_DFL in the child process before the exec. "
"Currently this includes the SIGPIPE, SIGXFZ and SIGXFSZ signals. (POSIX "
"only)"
msgstr ""

#: ../../library/subprocess.rst:506
msgid "*restore_signals* was added."
msgstr ""

#: ../../library/subprocess.rst:509
msgid ""
"If *start_new_session* is true the setsid() system call will be made in the "
"child process prior to the execution of the subprocess.  (POSIX only)"
msgstr ""

#: ../../library/subprocess.rst:512
msgid "*start_new_session* was added."
msgstr ""

#: ../../library/subprocess.rst:515
msgid ""
"If *env* is not ``None``, it must be a mapping that defines the environment "
"variables for the new process; these are used instead of the default "
"behavior of inheriting the current process' environment."
msgstr ""

#: ../../library/subprocess.rst:521
msgid ""
"If specified, *env* must provide any variables required for the program to "
"execute.  On Windows, in order to run a `side-by-side assembly`_ the "
"specified *env* **must** include a valid :envvar:`SystemRoot`."
msgstr ""

#: ../../library/subprocess.rst:527
msgid ""
"If *encoding* or *errors* are specified, or *text* is true, the file objects"
" *stdin*, *stdout* and *stderr* are opened in text mode with the specified "
"encoding and *errors*, as described above in :ref:`frequently-used-"
"arguments`. The *universal_newlines* argument is equivalent  to *text* and "
"is provided for backwards compatibility. By default, file objects are opened"
" in binary mode."
msgstr ""

#: ../../library/subprocess.rst:533
msgid "*encoding* and *errors* were added."
msgstr ""

#: ../../library/subprocess.rst:536 ../../library/subprocess.rst:1104
msgid "*text* was added as a more readable alias for *universal_newlines*."
msgstr ""

#: ../../library/subprocess.rst:539
msgid ""
"If given, *startupinfo* will be a :class:`STARTUPINFO` object, which is "
"passed to the underlying ``CreateProcess`` function. *creationflags*, if "
"given, can be one or more of the following flags:"
msgstr ""

#: ../../library/subprocess.rst:543
msgid ":data:`CREATE_NEW_CONSOLE`"
msgstr ""

#: ../../library/subprocess.rst:544
msgid ":data:`CREATE_NEW_PROCESS_GROUP`"
msgstr ""

#: ../../library/subprocess.rst:545
msgid ":data:`ABOVE_NORMAL_PRIORITY_CLASS`"
msgstr ""

#: ../../library/subprocess.rst:546
msgid ":data:`BELOW_NORMAL_PRIORITY_CLASS`"
msgstr ""

#: ../../library/subprocess.rst:547
msgid ":data:`HIGH_PRIORITY_CLASS`"
msgstr ""

#: ../../library/subprocess.rst:548
msgid ":data:`IDLE_PRIORITY_CLASS`"
msgstr ""

#: ../../library/subprocess.rst:549
msgid ":data:`NORMAL_PRIORITY_CLASS`"
msgstr ""

#: ../../library/subprocess.rst:550
msgid ":data:`REALTIME_PRIORITY_CLASS`"
msgstr ""

#: ../../library/subprocess.rst:551
msgid ":data:`CREATE_NO_WINDOW`"
msgstr ""

#: ../../library/subprocess.rst:552
msgid ":data:`DETACHED_PROCESS`"
msgstr ""

#: ../../library/subprocess.rst:553
msgid ":data:`CREATE_DEFAULT_ERROR_MODE`"
msgstr ""

#: ../../library/subprocess.rst:554
msgid ":data:`CREATE_BREAKAWAY_FROM_JOB`"
msgstr ""

#: ../../library/subprocess.rst:556
msgid ""
"Popen objects are supported as context managers via the :keyword:`with` "
"statement: on exit, standard file descriptors are closed, and the process is"
" waited for. ::"
msgstr ""

#: ../../library/subprocess.rst:563
msgid "Added context manager support."
msgstr ""

#: ../../library/subprocess.rst:566
msgid ""
"Popen destructor now emits a :exc:`ResourceWarning` warning if the child "
"process is still running."
msgstr ""

#: ../../library/subprocess.rst:572
msgid "Exceptions"
msgstr "异常"

#: ../../library/subprocess.rst:574
msgid ""
"Exceptions raised in the child process, before the new program has started "
"to execute, will be re-raised in the parent."
msgstr ""

#: ../../library/subprocess.rst:577
msgid ""
"The most common exception raised is :exc:`OSError`.  This occurs, for "
"example, when trying to execute a non-existent file.  Applications should "
"prepare for :exc:`OSError` exceptions."
msgstr ""

#: ../../library/subprocess.rst:581
msgid ""
"A :exc:`ValueError` will be raised if :class:`Popen` is called with invalid "
"arguments."
msgstr ""

#: ../../library/subprocess.rst:584
msgid ""
":func:`check_call` and :func:`check_output` will raise "
":exc:`CalledProcessError` if the called process returns a non-zero return "
"code."
msgstr ""

#: ../../library/subprocess.rst:588
msgid ""
"All of the functions and methods that accept a *timeout* parameter, such as "
":func:`call` and :meth:`Popen.communicate` will raise :exc:`TimeoutExpired` "
"if the timeout expires before the process exits."
msgstr ""

#: ../../library/subprocess.rst:592
msgid ""
"Exceptions defined in this module all inherit from :exc:`SubprocessError`."
msgstr ""

#: ../../library/subprocess.rst:594
msgid "The :exc:`SubprocessError` base class was added."
msgstr ""

#: ../../library/subprocess.rst:599
msgid "Security Considerations"
msgstr ""

#: ../../library/subprocess.rst:601
msgid ""
"Unlike some other popen functions, this implementation will never implicitly"
" call a system shell.  This means that all characters, including shell "
"metacharacters, can safely be passed to child processes. If the shell is "
"invoked explicitly, via ``shell=True``, it is the application's "
"responsibility to ensure that all whitespace and metacharacters are quoted "
"appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities."
msgstr ""

#: ../../library/subprocess.rst:610
msgid ""
"When using ``shell=True``, the :func:`shlex.quote` function can be used to "
"properly escape whitespace and shell metacharacters in strings that are "
"going to be used to construct shell commands."
msgstr ""

#: ../../library/subprocess.rst:616
msgid "Popen Objects"
msgstr ""

#: ../../library/subprocess.rst:618
msgid "Instances of the :class:`Popen` class have the following methods:"
msgstr ""

#: ../../library/subprocess.rst:623
msgid ""
"Check if child process has terminated.  Set and return "
":attr:`~Popen.returncode` attribute. Otherwise, returns ``None``."
msgstr ""

#: ../../library/subprocess.rst:629
msgid ""
"Wait for child process to terminate.  Set and return "
":attr:`~Popen.returncode` attribute."
msgstr ""

#: ../../library/subprocess.rst:632
msgid ""
"If the process does not terminate after *timeout* seconds, raise a "
":exc:`TimeoutExpired` exception.  It is safe to catch this exception and "
"retry the wait."
msgstr ""

#: ../../library/subprocess.rst:638
msgid ""
"This will deadlock when using ``stdout=PIPE`` or ``stderr=PIPE`` and the "
"child process generates enough output to a pipe such that it blocks waiting "
"for the OS pipe buffer to accept more data. Use :meth:`Popen.communicate` "
"when using pipes to avoid that."
msgstr ""

#: ../../library/subprocess.rst:645
msgid ""
"The function is implemented using a busy loop (non-blocking call and short "
"sleeps). Use the :mod:`asyncio` module for an asynchronous wait: see "
":class:`asyncio.create_subprocess_exec`."
msgstr ""

#: ../../library/subprocess.rst:649 ../../library/subprocess.rst:689
#: ../../library/subprocess.rst:1023 ../../library/subprocess.rst:1051
#: ../../library/subprocess.rst:1095
msgid "*timeout* was added."
msgstr ""

#: ../../library/subprocess.rst:654
msgid ""
"Interact with process: Send data to stdin.  Read data from stdout and "
"stderr, until end-of-file is reached.  Wait for process to terminate.  The "
"optional *input* argument should be data to be sent to the child process, or"
" ``None``, if no data should be sent to the child.  If streams were opened "
"in text mode, *input* must be a string.  Otherwise, it must be bytes."
msgstr ""

#: ../../library/subprocess.rst:660
msgid ""
":meth:`communicate` returns a tuple ``(stdout_data, stderr_data)``. The data"
" will be strings if streams were opened in text mode; otherwise, bytes."
msgstr ""

#: ../../library/subprocess.rst:664
msgid ""
"Note that if you want to send data to the process's stdin, you need to "
"create the Popen object with ``stdin=PIPE``.  Similarly, to get anything "
"other than ``None`` in the result tuple, you need to give ``stdout=PIPE`` "
"and/or ``stderr=PIPE`` too."
msgstr ""

#: ../../library/subprocess.rst:669
msgid ""
"If the process does not terminate after *timeout* seconds, a "
":exc:`TimeoutExpired` exception will be raised.  Catching this exception and"
" retrying communication will not lose any output."
msgstr ""

#: ../../library/subprocess.rst:673
msgid ""
"The child process is not killed if the timeout expires, so in order to "
"cleanup properly a well-behaved application should kill the child process "
"and finish communication::"
msgstr ""

#: ../../library/subprocess.rst:686
msgid ""
"The data read is buffered in memory, so do not use this method if the data "
"size is large or unlimited."
msgstr ""

#: ../../library/subprocess.rst:695
msgid "Sends the signal *signal* to the child."
msgstr ""

#: ../../library/subprocess.rst:699
msgid ""
"On Windows, SIGTERM is an alias for :meth:`terminate`. CTRL_C_EVENT and "
"CTRL_BREAK_EVENT can be sent to processes started with a *creationflags* "
"parameter which includes `CREATE_NEW_PROCESS_GROUP`."
msgstr ""

#: ../../library/subprocess.rst:706
msgid ""
"Stop the child. On Posix OSs the method sends SIGTERM to the child. On "
"Windows the Win32 API function :c:func:`TerminateProcess` is called to stop "
"the child."
msgstr ""

#: ../../library/subprocess.rst:713
msgid ""
"Kills the child. On Posix OSs the function sends SIGKILL to the child. On "
"Windows :meth:`kill` is an alias for :meth:`terminate`."
msgstr ""

#: ../../library/subprocess.rst:717
msgid "The following attributes are also available:"
msgstr ""

#: ../../library/subprocess.rst:721
msgid ""
"The *args* argument as it was passed to :class:`Popen` -- a sequence of "
"program arguments or else a single string."
msgstr ""

#: ../../library/subprocess.rst:728
msgid ""
"If the *stdin* argument was :data:`PIPE`, this attribute is a writeable "
"stream object as returned by :func:`open`. If the *encoding* or *errors* "
"arguments were specified or the *universal_newlines* argument was ``True``, "
"the stream is a text stream, otherwise it is a byte stream. If the *stdin* "
"argument was not :data:`PIPE`, this attribute is ``None``."
msgstr ""

#: ../../library/subprocess.rst:737
msgid ""
"If the *stdout* argument was :data:`PIPE`, this attribute is a readable "
"stream object as returned by :func:`open`. Reading from the stream provides "
"output from the child process. If the *encoding* or *errors* arguments were "
"specified or the *universal_newlines* argument was ``True``, the stream is a"
" text stream, otherwise it is a byte stream. If the *stdout* argument was "
"not :data:`PIPE`, this attribute is ``None``."
msgstr ""

#: ../../library/subprocess.rst:747
msgid ""
"If the *stderr* argument was :data:`PIPE`, this attribute is a readable "
"stream object as returned by :func:`open`. Reading from the stream provides "
"error output from the child process. If the *encoding* or *errors* arguments"
" were specified or the *universal_newlines* argument was ``True``, the "
"stream is a text stream, otherwise it is a byte stream. If the *stderr* "
"argument was not :data:`PIPE`, this attribute is ``None``."
msgstr ""

#: ../../library/subprocess.rst:756
msgid ""
"Use :meth:`~Popen.communicate` rather than :attr:`.stdin.write "
"<Popen.stdin>`, :attr:`.stdout.read <Popen.stdout>` or :attr:`.stderr.read "
"<Popen.stderr>` to avoid deadlocks due to any of the other OS pipe buffers "
"filling up and blocking the child process."
msgstr ""

#: ../../library/subprocess.rst:764
msgid "The process ID of the child process."
msgstr ""

#: ../../library/subprocess.rst:766
msgid ""
"Note that if you set the *shell* argument to ``True``, this is the process "
"ID of the spawned shell."
msgstr ""

#: ../../library/subprocess.rst:772
msgid ""
"The child return code, set by :meth:`poll` and :meth:`wait` (and indirectly "
"by :meth:`communicate`).  A ``None`` value indicates that the process hasn't"
" terminated yet."
msgstr ""

#: ../../library/subprocess.rst:781
msgid "Windows Popen Helpers"
msgstr ""

#: ../../library/subprocess.rst:783
msgid ""
"The :class:`STARTUPINFO` class and following constants are only available on"
" Windows."
msgstr ""

#: ../../library/subprocess.rst:789
msgid ""
"Partial support of the Windows `STARTUPINFO <https://msdn.microsoft.com/en-"
"us/library/ms686331(v=vs.85).aspx>`__ structure is used for :class:`Popen` "
"creation.  The following attributes can be set by passing them as keyword-"
"only arguments."
msgstr ""

#: ../../library/subprocess.rst:794
msgid "Keyword-only argument support was added."
msgstr ""

#: ../../library/subprocess.rst:799
msgid ""
"A bit field that determines whether certain :class:`STARTUPINFO` attributes "
"are used when the process creates a window. ::"
msgstr ""

#: ../../library/subprocess.rst:807
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute is"
" the standard input handle for the process. If :data:`STARTF_USESTDHANDLES` "
"is not specified, the default for standard input is the keyboard buffer."
msgstr ""

#: ../../library/subprocess.rst:814
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute is"
" the standard output handle for the process. Otherwise, this attribute is "
"ignored and the default for standard output is the console window's buffer."
msgstr ""

#: ../../library/subprocess.rst:821
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute is"
" the standard error handle for the process. Otherwise, this attribute is "
"ignored and the default for standard error is the console window's buffer."
msgstr ""

#: ../../library/subprocess.rst:827
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESHOWWINDOW`, this attribute "
"can be any of the values that can be specified in the ``nCmdShow`` parameter"
" for the `ShowWindow <https://msdn.microsoft.com/en-"
"us/library/ms633548(v=vs.85).aspx>`__ function, except for "
"``SW_SHOWDEFAULT``. Otherwise, this attribute is ignored."
msgstr ""

#: ../../library/subprocess.rst:834
msgid ""
":data:`SW_HIDE` is provided for this attribute. It is used when "
":class:`Popen` is called with ``shell=True``."
msgstr ""

#: ../../library/subprocess.rst:839
msgid ""
"A dictionary of additional attributes for process creation as given in "
"``STARTUPINFOEX``, see `UpdateProcThreadAttribute "
"<https://msdn.microsoft.com/en-"
"us/library/windows/desktop/ms686880(v=vs.85).aspx>`__."
msgstr ""

#: ../../library/subprocess.rst:843
msgid "Supported attributes:"
msgstr ""

#: ../../library/subprocess.rst:861
msgid "**handle_list**"
msgstr ""

#: ../../library/subprocess.rst:846
msgid ""
"Sequence of handles that will be inherited. *close_fds* must be true if non-"
"empty."
msgstr ""

#: ../../library/subprocess.rst:849
msgid ""
"The handles must be temporarily made inheritable by "
":func:`os.set_handle_inheritable` when passed to the :class:`Popen` "
"constructor, else :class:`OSError` will be raised with Windows error "
"``ERROR_INVALID_PARAMETER`` (87)."
msgstr ""

#: ../../library/subprocess.rst:856
msgid ""
"In a multithreaded process, use caution to avoid leaking handles that are "
"marked inheritable when combining this feature with concurrent calls to "
"other process creation functions that inherit all handles such as "
":func:`os.system`.  This also applies to standard handle redirection, which "
"temporarily creates inheritable handles."
msgstr ""

#: ../../library/subprocess.rst:866
msgid "Windows Constants"
msgstr ""

#: ../../library/subprocess.rst:868
msgid "The :mod:`subprocess` module exposes the following constants."
msgstr ""

#: ../../library/subprocess.rst:872
msgid ""
"The standard input device. Initially, this is the console input buffer, "
"``CONIN$``."
msgstr ""

#: ../../library/subprocess.rst:877
msgid ""
"The standard output device. Initially, this is the active console screen "
"buffer, ``CONOUT$``."
msgstr ""

#: ../../library/subprocess.rst:882
msgid ""
"The standard error device. Initially, this is the active console screen "
"buffer, ``CONOUT$``."
msgstr ""

#: ../../library/subprocess.rst:887
msgid "Hides the window. Another window will be activated."
msgstr ""

#: ../../library/subprocess.rst:891
msgid ""
"Specifies that the :attr:`STARTUPINFO.hStdInput`, "
":attr:`STARTUPINFO.hStdOutput`, and :attr:`STARTUPINFO.hStdError` attributes"
" contain additional information."
msgstr ""

#: ../../library/subprocess.rst:897
msgid ""
"Specifies that the :attr:`STARTUPINFO.wShowWindow` attribute contains "
"additional information."
msgstr ""

#: ../../library/subprocess.rst:902
msgid ""
"The new process has a new console, instead of inheriting its parent's "
"console (the default)."
msgstr ""

#: ../../library/subprocess.rst:907
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"group will be created. This flag is necessary for using :func:`os.kill` on "
"the subprocess."
msgstr ""

#: ../../library/subprocess.rst:911
msgid "This flag is ignored if :data:`CREATE_NEW_CONSOLE` is specified."
msgstr ""

#: ../../library/subprocess.rst:915
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"will have an above average priority."
msgstr ""

#: ../../library/subprocess.rst:922
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"will have a below average priority."
msgstr ""

#: ../../library/subprocess.rst:929
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"will have a high priority."
msgstr ""

#: ../../library/subprocess.rst:936
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"will have an idle (lowest) priority."
msgstr ""

#: ../../library/subprocess.rst:943
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"will have an normal priority. (default)"
msgstr ""

#: ../../library/subprocess.rst:950
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"will have realtime priority. You should almost never use "
"REALTIME_PRIORITY_CLASS, because this interrupts system threads that manage "
"mouse input, keyboard input, and background disk flushing. This class can be"
" appropriate for applications that \"talk\" directly to hardware or that "
"perform brief tasks that should have limited interruptions."
msgstr ""

#: ../../library/subprocess.rst:961
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"will not create a window."
msgstr ""

#: ../../library/subprocess.rst:968
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"will not inherit its parent's console. This value cannot be used with "
"CREATE_NEW_CONSOLE."
msgstr ""

#: ../../library/subprocess.rst:976
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"does not inherit the error mode of the calling process. Instead, the new "
"process gets the default error mode. This feature is particularly useful for"
" multithreaded shell applications that run with hard errors disabled."
msgstr ""

#: ../../library/subprocess.rst:986
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"is not associated with the job."
msgstr ""

#: ../../library/subprocess.rst:994
msgid "Older high-level API"
msgstr ""

#: ../../library/subprocess.rst:996
msgid ""
"Prior to Python 3.5, these three functions comprised the high level API to "
"subprocess. You can now use :func:`run` in many cases, but lots of existing "
"code calls these functions."
msgstr ""

#: ../../library/subprocess.rst:1002
msgid ""
"Run the command described by *args*.  Wait for command to complete, then "
"return the :attr:`~Popen.returncode` attribute."
msgstr ""

#: ../../library/subprocess.rst:1005 ../../library/subprocess.rst:1033
msgid ""
"Code needing to capture stdout or stderr should use :func:`run` instead:"
msgstr ""

#: ../../library/subprocess.rst:1007
msgid "run(...).returncode"
msgstr ""

#: ../../library/subprocess.rst:1009 ../../library/subprocess.rst:1037
msgid "To suppress stdout or stderr, supply a value of :data:`DEVNULL`."
msgstr ""

#: ../../library/subprocess.rst:1011 ../../library/subprocess.rst:1039
msgid ""
"The arguments shown above are merely some common ones. The full function "
"signature is the same as that of the :class:`Popen` constructor - this "
"function passes all supplied arguments other than *timeout* directly through"
" to that interface."
msgstr ""

#: ../../library/subprocess.rst:1018 ../../library/subprocess.rst:1046
msgid ""
"Do not use ``stdout=PIPE`` or ``stderr=PIPE`` with this function.  The child"
" process will block if it generates enough output to a pipe to fill up the "
"OS pipe buffer as the pipes are not being read from."
msgstr ""

#: ../../library/subprocess.rst:1028
msgid ""
"Run command with arguments.  Wait for command to complete. If the return "
"code was zero then return, otherwise raise :exc:`CalledProcessError`. The "
":exc:`CalledProcessError` object will have the return code in the "
":attr:`~CalledProcessError.returncode` attribute."
msgstr ""

#: ../../library/subprocess.rst:1035
msgid "run(..., check=True)"
msgstr ""

#: ../../library/subprocess.rst:1059
msgid "Run command with arguments and return its output."
msgstr ""

#: ../../library/subprocess.rst:1061
msgid ""
"If the return code was non-zero it raises a :exc:`CalledProcessError`. The "
":exc:`CalledProcessError` object will have the return code in the "
":attr:`~CalledProcessError.returncode` attribute and any output in the "
":attr:`~CalledProcessError.output` attribute."
msgstr ""

#: ../../library/subprocess.rst:1066
msgid "This is equivalent to::"
msgstr ""

#: ../../library/subprocess.rst:1070
msgid ""
"The arguments shown above are merely some common ones. The full function "
"signature is largely the same as that of :func:`run` - most arguments are "
"passed directly through to that interface. However, explicitly passing "
"``input=None`` to inherit the parent's standard input file handle is not "
"supported."
msgstr ""

#: ../../library/subprocess.rst:1076
msgid ""
"By default, this function will return the data as encoded bytes. The actual "
"encoding of the output data may depend on the command being invoked, so the "
"decoding to text will often need to be handled at the application level."
msgstr ""

#: ../../library/subprocess.rst:1080
msgid ""
"This behaviour may be overridden by setting *text*, *encoding*, *errors*, or"
" *universal_newlines* to ``True`` as described in :ref:`frequently-used-"
"arguments` and :func:`run`."
msgstr ""

#: ../../library/subprocess.rst:1084
msgid ""
"To also capture standard error in the result, use "
"``stderr=subprocess.STDOUT``::"
msgstr ""

#: ../../library/subprocess.rst:1098
msgid "Support for the *input* keyword argument was added."
msgstr ""

#: ../../library/subprocess.rst:1101
msgid "*encoding* and *errors* were added.  See :func:`run` for details."
msgstr ""

#: ../../library/subprocess.rst:1111
msgid "Replacing Older Functions with the :mod:`subprocess` Module"
msgstr ""

#: ../../library/subprocess.rst:1113
msgid ""
"In this section, \"a becomes b\" means that b can be used as a replacement "
"for a."
msgstr ""

#: ../../library/subprocess.rst:1117
msgid ""
"All \"a\" functions in this section fail (more or less) silently if the "
"executed program cannot be found; the \"b\" replacements raise "
":exc:`OSError` instead."
msgstr ""

#: ../../library/subprocess.rst:1121
msgid ""
"In addition, the replacements using :func:`check_output` will fail with a "
":exc:`CalledProcessError` if the requested operation produces a non-zero "
"return code. The output is still available as the "
":attr:`~CalledProcessError.output` attribute of the raised exception."
msgstr ""

#: ../../library/subprocess.rst:1126
msgid ""
"In the following examples, we assume that the relevant functions have "
"already been imported from the :mod:`subprocess` module."
msgstr ""

#: ../../library/subprocess.rst:1131
msgid "Replacing /bin/sh shell backquote"
msgstr ""

#: ../../library/subprocess.rst:1137 ../../library/subprocess.rst:1148
#: ../../library/subprocess.rst:1165
msgid "becomes::"
msgstr ""

#: ../../library/subprocess.rst:1142
msgid "Replacing shell pipeline"
msgstr ""

#: ../../library/subprocess.rst:1155
msgid ""
"The p1.stdout.close() call after starting the p2 is important in order for "
"p1 to receive a SIGPIPE if p2 exits before p1."
msgstr ""

#: ../../library/subprocess.rst:1158
msgid ""
"Alternatively, for trusted input, the shell's own pipeline support may still"
" be used directly:"
msgstr ""

#: ../../library/subprocess.rst:1171
msgid "Replacing :func:`os.system`"
msgstr ""

#: ../../library/subprocess.rst:1179
msgid "Notes:"
msgstr "注释:"

#: ../../library/subprocess.rst:1181
msgid "Calling the program through the shell is usually not required."
msgstr ""

#: ../../library/subprocess.rst:1183
msgid "A more realistic example would look like this::"
msgstr ""

#: ../../library/subprocess.rst:1196
msgid "Replacing the :func:`os.spawn <os.spawnl>` family"
msgstr ""

#: ../../library/subprocess.rst:1198
msgid "P_NOWAIT example::"
msgstr ""

#: ../../library/subprocess.rst:1204
msgid "P_WAIT example::"
msgstr ""

#: ../../library/subprocess.rst:1210
msgid "Vector example::"
msgstr ""

#: ../../library/subprocess.rst:1216
msgid "Environment example::"
msgstr ""

#: ../../library/subprocess.rst:1225
msgid "Replacing :func:`os.popen`, :func:`os.popen2`, :func:`os.popen3`"
msgstr ""

#: ../../library/subprocess.rst:1255
msgid "Return code handling translates as follows::"
msgstr ""

#: ../../library/subprocess.rst:1271
msgid "Replacing functions from the :mod:`popen2` module"
msgstr ""

#: ../../library/subprocess.rst:1275
msgid ""
"If the cmd argument to popen2 functions is a string, the command is executed"
" through /bin/sh.  If it is a list, the command is directly executed."
msgstr ""

#: ../../library/subprocess.rst:1294
msgid ""
":class:`popen2.Popen3` and :class:`popen2.Popen4` basically work as "
":class:`subprocess.Popen`, except that:"
msgstr ""

#: ../../library/subprocess.rst:1297
msgid ":class:`Popen` raises an exception if the execution fails."
msgstr ""

#: ../../library/subprocess.rst:1299
msgid "The *capturestderr* argument is replaced with the *stderr* argument."
msgstr ""

#: ../../library/subprocess.rst:1301
msgid "``stdin=PIPE`` and ``stdout=PIPE`` must be specified."
msgstr ""

#: ../../library/subprocess.rst:1303
msgid ""
"popen2 closes all file descriptors by default, but you have to specify "
"``close_fds=True`` with :class:`Popen` to guarantee this behavior on all "
"platforms or past Python versions."
msgstr ""

#: ../../library/subprocess.rst:1309
msgid "Legacy Shell Invocation Functions"
msgstr ""

#: ../../library/subprocess.rst:1311
msgid ""
"This module also provides the following legacy functions from the 2.x "
"``commands`` module. These operations implicitly invoke the system shell and"
" none of the guarantees described above regarding security and exception "
"handling consistency are valid for these functions."
msgstr ""

#: ../../library/subprocess.rst:1318
msgid "Return ``(exitcode, output)`` of executing *cmd* in a shell."
msgstr ""

#: ../../library/subprocess.rst:1320
msgid ""
"Execute the string *cmd* in a shell with :meth:`Popen.check_output` and "
"return a 2-tuple ``(exitcode, output)``. The locale encoding is used; see "
"the notes on :ref:`frequently-used-arguments` for more details."
msgstr ""

#: ../../library/subprocess.rst:1324
msgid ""
"A trailing newline is stripped from the output. The exit code for the "
"command can be interpreted as the return code of subprocess.  Example::"
msgstr ""

#: ../../library/subprocess.rst:1338 ../../library/subprocess.rst:1358
msgid ":ref:`Availability <availability>`: POSIX & Windows."
msgstr ""

#: ../../library/subprocess.rst:1339
msgid "Windows support was added."
msgstr ""

#: ../../library/subprocess.rst:1342
msgid ""
"The function now returns (exitcode, output) instead of (status, output) as "
"it did in Python 3.3.3 and earlier.  exitcode has the same value as "
":attr:`~Popen.returncode`."
msgstr ""

#: ../../library/subprocess.rst:1349
msgid "Return output (stdout and stderr) of executing *cmd* in a shell."
msgstr ""

#: ../../library/subprocess.rst:1351
msgid ""
"Like :func:`getstatusoutput`, except the exit code is ignored and the return"
" value is a string containing the command's output.  Example::"
msgstr ""

#: ../../library/subprocess.rst:1359
msgid "Windows support added"
msgstr ""

#: ../../library/subprocess.rst:1364
msgid "Notes"
msgstr "注释"

#: ../../library/subprocess.rst:1369
msgid "Converting an argument sequence to a string on Windows"
msgstr ""

#: ../../library/subprocess.rst:1371
msgid ""
"On Windows, an *args* sequence is converted to a string that can be parsed "
"using the following rules (which correspond to the rules used by the MS C "
"runtime):"
msgstr ""

#: ../../library/subprocess.rst:1375
msgid ""
"Arguments are delimited by white space, which is either a space or a tab."
msgstr ""

#: ../../library/subprocess.rst:1378
msgid ""
"A string surrounded by double quotation marks is interpreted as a single "
"argument, regardless of white space contained within.  A quoted string can "
"be embedded in an argument."
msgstr ""

#: ../../library/subprocess.rst:1383
msgid ""
"A double quotation mark preceded by a backslash is interpreted as a literal "
"double quotation mark."
msgstr ""

#: ../../library/subprocess.rst:1386
msgid ""
"Backslashes are interpreted literally, unless they immediately precede a "
"double quotation mark."
msgstr ""

#: ../../library/subprocess.rst:1389
msgid ""
"If backslashes immediately precede a double quotation mark, every pair of "
"backslashes is interpreted as a literal backslash.  If the number of "
"backslashes is odd, the last backslash escapes the next double quotation "
"mark as described in rule 3."
msgstr ""

#: ../../library/subprocess.rst:1398
msgid ":mod:`shlex`"
msgstr ""

#: ../../library/subprocess.rst:1399
msgid "Module which provides function to parse and escape command lines."
msgstr ""
