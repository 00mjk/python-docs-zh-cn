# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Meng Du <alphanow@gmail.com>, 2019
# Kaizhao Zhang <zhangkaizhao@gmail.com>, 2019
# jacky <jackylvm@foxmail.com>, 2019
# ppcfish <ppcfish@gmail.com>, 2019
# Han YANG <yanghan.cs@outlook.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-04 11:20+0000\n"
"PO-Revision-Date: 2019-09-01 14:44+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.8.rst:3
msgid "What's New In Python 3.8"
msgstr "Python 3.8 有什么新变化"

#: ../../whatsnew/3.8.rst:0
msgid "Editor"
msgstr "编者"

#: ../../whatsnew/3.8.rst:45
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../whatsnew/3.8.rst:47
msgid ""
"This article explains the new features in Python 3.8, compared to 3.7. For "
"full details, see the :ref:`changelog <changelog>`."
msgstr "本文解释了 Python 3.8 相比 3.7 的新增特性。 完整的详情可参阅 :ref:`更新日志 <changelog>`。"

#: ../../whatsnew/3.8.rst:50
msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated as Python 3.8 moves towards release, so it's worth "
"checking back even after reading earlier versions. Some notable items not "
"yet covered are:"
msgstr ""
"预发布版用户应当清楚意识到此文档目前处于草稿状态。 它将随着 Python 3.8 的发布进程不断更新，因此即使已经阅读过较早的版本仍然值得再次查看。 "
"尚未覆盖到的部分关键条目为："

#: ../../whatsnew/3.8.rst:55
msgid ":pep:`578` - Runtime audit hooks for potentially sensitive operations"
msgstr ":pep:`578` - 针对潜在敏感操作的运行时审计钩子"

#: ../../whatsnew/3.8.rst:56
msgid "``python -m asyncio`` runs a natively async REPL"
msgstr "``python -m asyncio`` 运行原生的异步 REPL"

#: ../../whatsnew/3.8.rst:68
msgid "Summary -- Release highlights"
msgstr "摘要 - 发布重点"

#: ../../whatsnew/3.8.rst:79
msgid "New Features"
msgstr "新的特性"

#: ../../whatsnew/3.8.rst:82
msgid "Assignment expressions"
msgstr "赋值表达式"

#: ../../whatsnew/3.8.rst:84
msgid ""
"There is new syntax ``:=`` that assigns values to variables as part of a "
"larger expression. It is affectionately known as \"walrus operator\" due to "
"its resemblance to `the eyes and tusks of a walrus "
"<https://en.wikipedia.org/wiki/Walrus#/media/File:Pacific_Walrus_-"
"_Bull_(8247646168).jpg>`_."
msgstr ""
"新增的语法 ``:=`` 可在表达式内部将值赋给变量。 它被昵称为“海象运算符”因为它很像 `海象的眼睛和长牙 "
"<https://en.wikipedia.org/wiki/Walrus#/media/File:Pacific_Walrus_-"
"_Bull_(8247646168).jpg>`_。"

#: ../../whatsnew/3.8.rst:89
msgid ""
"In this example, the assignment expression helps avoid calling :func:`len` "
"twice::"
msgstr "在这个示例中，赋值表达式可以避免调用 :func:`len` 两次::"

#: ../../whatsnew/3.8.rst:95
msgid ""
"A similar benefit arises during regular expression matching where match "
"objects are needed twice, once to test whether a match occurred and another "
"to extract a subgroup::"
msgstr "类似的益处还可出现在正则表达式匹配中需要使用两次匹配对象的情况中，一次检测用于匹配是否发生，另一次用于提取子分组::"

#: ../../whatsnew/3.8.rst:103
msgid ""
"The operator is also useful with while-loops that compute a value to test "
"loop termination and then need that same value again in the body of the "
"loop::"
msgstr "此运算符也适用于配合 while 循环计算一个值来检测循环是否终止，而同一个值又在循环体中再次被使用的情况::"

#: ../../whatsnew/3.8.rst:111
msgid ""
"Another motivating use case arises in list comprehensions where a value "
"computed in a filtering condition is also needed in the expression body::"
msgstr "另一个值得介绍的用例出现于列表推导式中，在筛选条件中计算一个值，而同一个值又在表达式中需要被使用::"

#: ../../whatsnew/3.8.rst:118
msgid ""
"Try to limit use of the walrus operator to clean cases that reduce "
"complexity and improve readability."
msgstr "请尽量将海象运算符的使用限制在清晰的场合中，以降低复杂性并提升可读性。"

#: ../../whatsnew/3.8.rst:121
msgid "See :pep:`572` for a full description."
msgstr "请参阅 :pep:`572` 了解详情。"

#: ../../whatsnew/3.8.rst:123
msgid "(Contributed by Emily Morehouse in :issue:`35224`.)"
msgstr "（由 Morehouse 在 :issue:`35224` 中贡献。）"

#: ../../whatsnew/3.8.rst:129
msgid "Positional-only parameters"
msgstr "仅限位置形参"

#: ../../whatsnew/3.8.rst:131
msgid ""
"There is a new function parameter syntax ``/`` to indicate that some "
"function parameters must be specified positionally and cannot be used as "
"keyword arguments.  This is the same notation shown by ``help()`` for C "
"functions annotated with Larry Hastings' `Argument Clinic "
"<https://docs.python.org/3/howto/clinic.html>`_ tool."
msgstr ""
"新增了一个函数形参语法 ``/`` 用来指明某些函数形参必须使用仅限位置而非关键字参数的形式。 这种标记语法与通过 ``help()`` 所显示的使用 "
"Larry Hastings 的 `Argument Clinic "
"<https://docs.python.org/3/howto/clinic.html>`_ 工具标记的 C 函数相同。"

#: ../../whatsnew/3.8.rst:137
msgid ""
"In the following example, parameters *a* and *b* are positional-only, while "
"*c* or *d* can be positional or keyword, and *e* or *f* are required to be "
"keywords::"
msgstr ""
"在下面的例子中，形参 *a* 和 *b* 为仅限位置形参，*c* 或 *d* 可以是位置形参或关键字形参，而 *e* 或 *f* 要求为关键字形参::"

#: ../../whatsnew/3.8.rst:144
msgid "The following is a valid call::"
msgstr "以下均为合法的调用::"

#: ../../whatsnew/3.8.rst:148
msgid "However, these are invalid calls::"
msgstr "但是，以下均为不合法的调用::"

#: ../../whatsnew/3.8.rst:153
msgid ""
"One use case for this notation is that it allows pure Python functions to "
"fully emulate behaviors of existing C coded functions.  For example, the "
"built-in :func:`pow` function does not accept keyword arguments::"
msgstr ""
"这种标记形式的一个用例是它允许纯 Python 函数完整模拟现有的用 C 代码编写的函数的行为。 例如，内置的 :func:`pow` "
"函数不接受关键字参数::"

#: ../../whatsnew/3.8.rst:162
msgid ""
"Another use case is to preclude keyword arguments when the parameter name is"
" not helpful.  For example, the builtin :func:`len` function has the "
"signature ``len(obj, /)``.  This precludes awkward calls such as::"
msgstr ""
"另一个用例是在不需要形参名称时排除关键字参数。 例如，内置的 :func:`len` 函数的签名为 ``len(obj, /)``。 "
"这可以排除如下这种笨拙的调用形式::"

#: ../../whatsnew/3.8.rst:168
msgid ""
"A further benefit of marking a parameter as positional-only is that it "
"allows the parameter name to be changed in the future without risk of "
"breaking client code.  For example, in the :mod:`statistics` module, the "
"parameter name *dist* may be changed in the future.  This was made possible "
"with the following function specification::"
msgstr ""
"另一个益处是将形参标记为仅限位置形参将允许在未来修改形参名而不会破坏客户的代码。 例如，在 :mod:`statistics` 模块中，形参名 "
"*dist* 在未来可能被修改。 这使得以下函数描述成为可能::"

#: ../../whatsnew/3.8.rst:177
msgid ""
"Since the parameters to the left of ``/`` are not exposed as possible "
"keywords, the parameters names remain available for use in ``**kwargs``::"
msgstr "由于在 ``/`` 左侧的形参不会被公开为可用关键字，其他形参名仍可在 ``**kwargs`` 中使用::"

#: ../../whatsnew/3.8.rst:186
msgid ""
"This greatly simplifies the implementation of functions and methods that "
"need to accept arbitrary keyword arguments.  For example, here is an except "
"from code in the :mod:`collections` module::"
msgstr "这极大地简化了需要接受任意关键字参数的函数和方法的实现。 例如以下摘自 :mod:`collections` 模块的代码::"

#: ../../whatsnew/3.8.rst:195
msgid "See :pep:`570` for a full description."
msgstr "请参阅 :pep:`570` 了解详情。"

#: ../../whatsnew/3.8.rst:197
msgid "(Contributed by Pablo Galindo in :issue:`36540`.)"
msgstr "（由 Pablo Galindo 在 :issue:`36540` 中贡献。）"

#: ../../whatsnew/3.8.rst:203
msgid "Parallel filesystem cache for compiled bytecode files"
msgstr "用于已编译字节码文件的并行文件系统缓存"

#: ../../whatsnew/3.8.rst:205
msgid ""
"The new :envvar:`PYTHONPYCACHEPREFIX` setting (also available as "
":option:`-X` ``pycache_prefix``) configures the implicit bytecode cache to "
"use a separate parallel filesystem tree, rather than the default "
"``__pycache__`` subdirectories within each source directory."
msgstr ""
"新增的 :envvar:`PYTHONPYCACHEPREFIX` 设置 (也可使用 :option:`-X` ``pycache_prefix``) "
"可将隐式的字节码缓存配置为使用单独的并行文件系统树，而不是默认的每个源代码目录下的 ``__pycache__`` 子目录。"

#: ../../whatsnew/3.8.rst:211
msgid ""
"The location of the cache is reported in :data:`sys.pycache_prefix` "
"(:const:`None` indicates the default location in ``__pycache__`` "
"subdirectories)."
msgstr ""
"缓存的位置会在 :data:`sys.pycache_prefix` 中报告 (:const:`None` 表示默认位置即 "
"``__pycache__`` 子目录)。"

#: ../../whatsnew/3.8.rst:215
msgid "(Contributed by Carl Meyer in :issue:`33499`.)"
msgstr "（由 Carl Meyer 在 :issue:`33499` 中贡献。）"

#: ../../whatsnew/3.8.rst:218
msgid "Debug build uses the same ABI as release build"
msgstr "调试构建使用与发布构建相同的 ABI"

#: ../../whatsnew/3.8.rst:220
msgid ""
"Python now uses the same ABI whether it built in release or debug mode. On "
"Unix, when Python is built in debug mode, it is now possible to load C "
"extensions built in release mode and C extensions built using the stable "
"ABI."
msgstr ""
"Python 现在不论是以发布模式还是调试模块进行构建都将使用相同的 ABI。 在 Unix 上，当 Python "
"以调试模式构建时，现在将可以加载以发布模式构建的 C 扩展以及使用稳定版 ABI 构建的 C 扩展。"

#: ../../whatsnew/3.8.rst:224
msgid ""
"Release builds and debug builds are now ABI compatible: defining the "
"``Py_DEBUG`` macro no longer implies the ``Py_TRACE_REFS`` macro, which "
"introduces the only ABI incompatibility. The ``Py_TRACE_REFS`` macro, which "
"adds the :func:`sys.getobjects` function and the :envvar:`PYTHONDUMPREFS` "
"environment variable, can be set using the new ``./configure --with-trace-"
"refs`` build option. (Contributed by Victor Stinner in :issue:`36465`.)"
msgstr ""
"发布构建和调试构建现在都是 ABI 兼容的：定义 ``Py_DEBUG`` 宏不会再启用 ``Py_TRACE_REFS`` 宏，它引入了唯一的 ABI"
" 不兼容性。 ``Py_TRACE_REFS`` 宏添加了 :func:`sys.getobjects` 函数和 "
":envvar:`PYTHONDUMPREFS` 环境变量，它可以使用新的 ``./configure --with-trace-refs`` "
"构建选项来设置。 （由 Victor Stinner 在 :issue:`36465` 中贡献。）"

#: ../../whatsnew/3.8.rst:232
msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android "
"and Cygwin. It is now possible for a statically linked Python to load a C "
"extension built using a shared library Python. (Contributed by Victor "
"Stinner in :issue:`21536`.)"
msgstr ""
"在 Unix 上，C 扩展不会再被链接到 libpython，但 Android 和 Cygwin 例外。 现在静态链接的 Python "
"将可以加载使用共享库 Python 构建的 C 扩展。 （由 Victor Stinner 在 :issue:`21536` 中贡献。）"

#: ../../whatsnew/3.8.rst:239
msgid ""
"On Unix, when Python is built in debug mode, import now also looks for C "
"extensions compiled in release mode and for C extensions compiled with the "
"stable ABI. (Contributed by Victor Stinner in :issue:`36722`.)"
msgstr ""
"在 Unix 上，当 Python 以调试模式构建时，导入操作现在也会查找在发布模式下编译的 C 扩展以及使用稳定版 ABI 编译的 C 扩展。 （由 "
"Victor Stinner 在 :issue:`36722` 中贡献。）"

#: ../../whatsnew/3.8.rst:244
msgid ""
"To embed Python into an application, a new ``--embed`` option must be passed"
" to ``python3-config --libs --embed`` to get ``-lpython3.8`` (link the "
"application to libpython). To support both 3.8 and older, try "
"``python3-config --libs --embed`` first and fallback to ``python3-config "
"--libs`` (without ``--embed``) if the previous command fails."
msgstr ""
"要将 Python 嵌入到一个应用中，必须将新增的 ``--embed`` 选项传给 ``python3-config --libs --embed``"
" 以获得 ``-lpython3.8`` (将应用链接到 libpython)。 要同时支持 3.8 和旧版本，请先尝试 "
"``python3-config --libs --embed`` 并在此命令失败时回退到 ``python3-config --libs`` (即不带"
" ``--embed``)。"

#: ../../whatsnew/3.8.rst:250
msgid ""
"Add a pkg-config ``python-3.8-embed`` module to embed Python into an "
"application: ``pkg-config python-3.8-embed --libs`` includes "
"``-lpython3.8``. To support both 3.8 and older, try ``pkg-config "
"python-X.Y-embed --libs`` first and fallback to ``pkg-config python-X.Y "
"--libs`` (without ``--embed``) if the previous command fails (replace "
"``X.Y`` with the Python version)."
msgstr ""
"增加一个 pkg-config ``python-3.8-embed`` 模块用来将 Python 嵌入到一个应用中: ``pkg-config "
"python-3.8-embed --libs`` 包含 ``-lpython3.8``。 要同时支持 3.8 和旧版本，请先尝试 ``pkg-"
"config python-X.Y-embed --libs`` 并在此命令失败时回退到 ``pkg-config python-X.Y "
"--libs`` (即不带 ``--embed``) （请将 ``X.Y`` 替换为 Python 版本号）。"

#: ../../whatsnew/3.8.rst:256
msgid ""
"On the other hand, ``pkg-config python3.8 --libs`` no longer contains "
"``-lpython3.8``. C extensions must not be linked to libpython (except on "
"Android and Cygwin, whose cases are handled by the script); this change is "
"backward incompatible on purpose. (Contributed by Victor Stinner in "
":issue:`36721`.)"
msgstr ""
"另一方面，``pkg-config python3.8 --libs`` 不再包含 ``-lpython3.8``。 C 扩展不可被链接到 "
"libpython (但 Android 和 Cygwin 例外，这两者的情况由脚本处理)；此改变是故意被设为向下不兼容的。 （由 Victor "
"Stinner 在 :issue:`36721` 中贡献。）"

#: ../../whatsnew/3.8.rst:264
msgid "f-strings support ``=`` for self-documenting expressions and debugging"
msgstr "f-字符串支持 ``=`` 用于自动记录表达式和调试文档"

#: ../../whatsnew/3.8.rst:266
msgid ""
"Added an ``=`` specifier to :term:`f-string`\\s. An f-string such as "
"``f'{expr=}'`` will expand to the text of the expression, an equal sign, "
"then the representation of the evaluated expression.  For example:"
msgstr ""
"增加 ``=`` 说明符用于 :term:`f-string`。 形式为 ``f'{expr=}'`` 的 "
"f-字符串将扩展表示为表达式文本，加一个等于号，再加表达式的求值结果。 例如："

#: ../../whatsnew/3.8.rst:275
msgid ""
"The usual :ref:`f-string format specifiers <f-strings>` allow more control "
"over how the result of the expression is displayed::"
msgstr "通常的 :ref:`f-字符串格式说明符 <f-strings>` 允许更细致地控制所要显示的表达式结果::"

#: ../../whatsnew/3.8.rst:282
msgid ""
"The ``=`` specifier will display the whole expression so that calculations "
"can be shown::"
msgstr "``=`` 说明符将输出整个表达式，以便详细演示计算过程::"

#: ../../whatsnew/3.8.rst:288
msgid "(Contributed by Eric V. Smith and Larry Hastings in :issue:`36817`.)"
msgstr "（由 Eric V. Smith 和 Larry Hastings 在 :issue:`36817` 中贡献。）"

#: ../../whatsnew/3.8.rst:291
msgid "PEP 587: Python Initialization Configuration"
msgstr "PEP 587: Python 初始化配置"

#: ../../whatsnew/3.8.rst:293
msgid ""
"The :pep:`587` adds a new C API to configure the Python Initialization "
"providing finer control on the whole configuration and better error "
"reporting."
msgstr ":pep:`587` 增加了一个新的 C API 用来配置 Python 初始化，提供对整个配置过程的更细致控制以及更好的错误报告。"

#: ../../whatsnew/3.8.rst:296
msgid "New structures:"
msgstr "新的结构："

#: ../../whatsnew/3.8.rst:298
msgid ":c:type:`PyConfig`"
msgstr ":c:type:`PyConfig`"

#: ../../whatsnew/3.8.rst:299
msgid ":c:type:`PyPreConfig`"
msgstr ":c:type:`PyPreConfig`"

#: ../../whatsnew/3.8.rst:300
msgid ":c:type:`PyStatus`"
msgstr ":c:type:`PyStatus`"

#: ../../whatsnew/3.8.rst:301
msgid ":c:type:`PyWideStringList`"
msgstr ":c:type:`PyWideStringList`"

#: ../../whatsnew/3.8.rst:303
msgid "New functions:"
msgstr "新的函数："

#: ../../whatsnew/3.8.rst:305
msgid ":c:func:`PyConfig_Clear`"
msgstr ":c:func:`PyConfig_Clear`"

#: ../../whatsnew/3.8.rst:306
msgid ":c:func:`PyConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyConfig_InitIsolatedConfig`"

#: ../../whatsnew/3.8.rst:307
msgid ":c:func:`PyConfig_InitPythonConfig`"
msgstr ":c:func:`PyConfig_InitPythonConfig`"

#: ../../whatsnew/3.8.rst:308
msgid ":c:func:`PyConfig_Read`"
msgstr ":c:func:`PyConfig_Read`"

#: ../../whatsnew/3.8.rst:309
msgid ":c:func:`PyConfig_SetArgv`"
msgstr ":c:func:`PyConfig_SetArgv`"

#: ../../whatsnew/3.8.rst:310
msgid ":c:func:`PyConfig_SetBytesArgv`"
msgstr ":c:func:`PyConfig_SetBytesArgv`"

#: ../../whatsnew/3.8.rst:311
msgid ":c:func:`PyConfig_SetBytesString`"
msgstr ":c:func:`PyConfig_SetBytesString`"

#: ../../whatsnew/3.8.rst:312
msgid ":c:func:`PyConfig_SetString`"
msgstr ":c:func:`PyConfig_SetString`"

#: ../../whatsnew/3.8.rst:313
msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyPreConfig_InitIsolatedConfig`"

#: ../../whatsnew/3.8.rst:314
msgid ":c:func:`PyPreConfig_InitPythonConfig`"
msgstr ":c:func:`PyPreConfig_InitPythonConfig`"

#: ../../whatsnew/3.8.rst:315
msgid ":c:func:`PyStatus_Error`"
msgstr ":c:func:`PyStatus_Error`"

#: ../../whatsnew/3.8.rst:316
msgid ":c:func:`PyStatus_Exception`"
msgstr ":c:func:`PyStatus_Exception`"

#: ../../whatsnew/3.8.rst:317
msgid ":c:func:`PyStatus_Exit`"
msgstr ":c:func:`PyStatus_Exit`"

#: ../../whatsnew/3.8.rst:318
msgid ":c:func:`PyStatus_IsError`"
msgstr ":c:func:`PyStatus_IsError`"

#: ../../whatsnew/3.8.rst:319
msgid ":c:func:`PyStatus_IsExit`"
msgstr ":c:func:`PyStatus_IsExit`"

#: ../../whatsnew/3.8.rst:320
msgid ":c:func:`PyStatus_NoMemory`"
msgstr ":c:func:`PyStatus_NoMemory`"

#: ../../whatsnew/3.8.rst:321
msgid ":c:func:`PyStatus_Ok`"
msgstr ":c:func:`PyStatus_Ok`"

#: ../../whatsnew/3.8.rst:322
msgid ":c:func:`PyWideStringList_Append`"
msgstr ":c:func:`PyWideStringList_Append`"

#: ../../whatsnew/3.8.rst:323
msgid ":c:func:`PyWideStringList_Insert`"
msgstr ":c:func:`PyWideStringList_Insert`"

#: ../../whatsnew/3.8.rst:324
msgid ":c:func:`Py_BytesMain`"
msgstr ":c:func:`Py_BytesMain`"

#: ../../whatsnew/3.8.rst:325
msgid ":c:func:`Py_ExitStatusException`"
msgstr ":c:func:`Py_ExitStatusException`"

#: ../../whatsnew/3.8.rst:326
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ":c:func:`Py_InitializeFromConfig`"

#: ../../whatsnew/3.8.rst:327
msgid ":c:func:`Py_PreInitialize`"
msgstr ":c:func:`Py_PreInitialize`"

#: ../../whatsnew/3.8.rst:328
msgid ":c:func:`Py_PreInitializeFromArgs`"
msgstr ":c:func:`Py_PreInitializeFromArgs`"

#: ../../whatsnew/3.8.rst:329
msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
msgstr ":c:func:`Py_PreInitializeFromBytesArgs`"

#: ../../whatsnew/3.8.rst:330
msgid ":c:func:`Py_RunMain`"
msgstr ":c:func:`Py_RunMain`"

#: ../../whatsnew/3.8.rst:332
msgid ""
"This PEP also adds ``_PyRuntimeState.preconfig`` (:c:type:`PyPreConfig` "
"type) and ``PyInterpreterState.config`` (:c:type:`PyConfig` type) fields to "
"these internal structures. ``PyInterpreterState.config`` becomes the new "
"reference configuration, replacing global configuration variables and other "
"private variables."
msgstr ""
"此 PEP 还为这些内部结构添加了 ``_PyRuntimeState.preconfig`` (:c:type:`PyPreConfig` 类型) 和"
" ``PyInterpreterState.config`` (:c:type:`PyConfig` 类型) 字段。 "
"``PyInterpreterState.config`` 成为新的引用配置，替代全局配置变量和其他私有变量。"

#: ../../whatsnew/3.8.rst:338
msgid ""
"See :ref:`Python Initialization Configuration <init-config>` for the "
"documentation."
msgstr "请参阅 :ref:`Python 初始化配置 <init-config>` 获取详细文档。"

#: ../../whatsnew/3.8.rst:341
msgid "See :pep:`587` for a full description."
msgstr "请参阅 :pep:`587` 了解详情。"

#: ../../whatsnew/3.8.rst:343
msgid "(Contributed by Victor Stinner in :issue:`36763`.)"
msgstr "（由 Victor Stinner 在 :issue:`36763` 中贡献。）"

#: ../../whatsnew/3.8.rst:347
msgid "Vectorcall: a fast calling protocol for CPython"
msgstr "Vectorcall: 用于 CPython 的快速调用协议"

#: ../../whatsnew/3.8.rst:349
msgid ""
"The \"vectorcall\" protocol is added to the Python/C API. It is meant to "
"formalize existing optimizations which were already done for various "
"classes. Any extension type implementing a callable can use this protocol."
msgstr ""
"添加 \"vectorcall\" 协议到 Python/C API。 它的目标是对已被应用于许多类的现有优化进行正式化。 "
"任何实现可调用对象的扩展类型均可使用此协议。"

#: ../../whatsnew/3.8.rst:354
msgid ""
"This is currently provisional, the aim is to make it fully public in Python "
"3.9."
msgstr "此特性目前为暂定状态，计划在 Python 3.9 将其完全公开。"

#: ../../whatsnew/3.8.rst:357
msgid "See :pep:`590` for a full description."
msgstr "请参阅 :pep:`590` 了解详情。"

#: ../../whatsnew/3.8.rst:359
msgid "(Contributed by Jeroen Demeyer and Mark Shannon in :issue:`36974`.)"
msgstr "（由 Jeroen Demeyer 和 Mark Shannon 在 :issue:`36974` 中贡献。）"

#: ../../whatsnew/3.8.rst:363
msgid "Pickle protocol 5 with out-of-band data buffers"
msgstr "具有外部数据缓冲区的 pickle 协议 5"

#: ../../whatsnew/3.8.rst:365
msgid ""
"When :mod:`pickle` is used to transfer large data between Python processes "
"in order to take advantage of multi-core or multi-machine processing, it is "
"important to optimize the transfer by reducing memory copies, and possibly "
"by applying custom techniques such as data-dependent compression."
msgstr ""
"当使用 :mod:`pickle` 在 Python "
"进程间传输大量数据以充分发挥多核或多机处理的优势时，非常重要一点是通过减少内存拷贝来优化传输效率，并可能应用一些定制技巧例如针对特定数据的压缩。"

#: ../../whatsnew/3.8.rst:370
msgid ""
"The :mod:`pickle` protocol 5 introduces support for out-of-band buffers "
"where :pep:`3118`-compatible data can be transmitted separately from the "
"main pickle stream, at the discretion of the communication layer."
msgstr ""
":mod:`pickle` 协议 5 引入了对于外部缓冲区的支持，这样 :pep:`3118` 兼容的数据可以与主 pickle "
"流分开进行传输，这是由通信层来确定的。"

#: ../../whatsnew/3.8.rst:374
msgid "See :pep:`574` for a full description."
msgstr "请参阅 :pep:`574` 了解详情。"

#: ../../whatsnew/3.8.rst:376
msgid "(Contributed by Antoine Pitrou in :issue:`36785`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`36785` 中贡献。）"

#: ../../whatsnew/3.8.rst:380
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.8.rst:382
msgid ""
"A :keyword:`continue` statement was illegal in the :keyword:`finally` clause"
" due to a problem with the implementation.  In Python 3.8 this restriction "
"was lifted. (Contributed by Serhiy Storchaka in :issue:`32489`.)"
msgstr ""
"在之前版本中 :keyword:`continue` 语句不允许在 :keyword:`finally` 子句中使用，这是因为具体实现存在一个问题。 在"
" Python 3.8 中此限制已被取消。 （由 Serhiy Storchaka 在 :issue:`32489` 中贡献。）"

#: ../../whatsnew/3.8.rst:387
msgid ""
"The :class:`bool`, :class:`int`, and :class:`fractions.Fraction` types now "
"have an :meth:`~int.as_integer_ratio` method like that found in "
":class:`float` and :class:`decimal.Decimal`.  This minor API extension makes"
" it possible to write ``numerator, denominator = x.as_integer_ratio()`` and "
"have it work across multiple numeric types. (Contributed by Lisa Roach in "
":issue:`33073` and Raymond Hettinger in :issue:`37819`.)"
msgstr ""
":class:`bool`, :class:`int` 和 :class:`fractions.Fraction` 类型现在都有一个 "
":meth:`~int.as_integer_ratio` 方法，与 :class:`float` 和 :class:`decimal.Decimal`"
" 中的已有方法类似。 这个微小的 API 扩展使得 ``numerator, denominator = x.as_integer_ratio()`` "
"这样的写法在多种数字类型上通用成为可能。 （由 Lisa Roach 在 :issue:`33073` 和 Raymond Hettinger 在 "
":issue:`37819` 中贡献。）"

#: ../../whatsnew/3.8.rst:395
msgid ""
"Constructors of :class:`int`, :class:`float` and :class:`complex` will now "
"use the :meth:`~object.__index__` special method, if available and the "
"corresponding method :meth:`~object.__int__`, :meth:`~object.__float__` or "
":meth:`~object.__complex__` is not available. (Contributed by Serhiy "
"Storchaka in :issue:`20092`.)"
msgstr ""
":class:`int`, :class:`float` 和 :class:`complex` 的构造器现在会使用 "
":meth:`~object.__index__` 特殊方法，如果该方法可用而对应的方法 method :meth:`~object.__int__`,"
" :meth:`~object.__float__` 或 :meth:`~object.__complex__` 方法不可用的话。 （由 Serhiy "
"Storchaka 在 :issue:`20092` 中贡献。）"

#: ../../whatsnew/3.8.rst:401
msgid ""
"Added support of ``\\N{name}`` escapes in :mod:`regular expressions <re>`::"
msgstr "添加 ``\\N{name}`` 转义符在 :mod:`正则表达式 <re>` 中的支持::"

#: ../../whatsnew/3.8.rst:408
msgid ""
"(Contributed by Jonathan Eunice and Serhiy Storchaka in :issue:`30688`.)"
msgstr "（由 Jonathan Eunice 和 Serhiy Storchaka 在 :issue:`30688` 中贡献。）"

#: ../../whatsnew/3.8.rst:410
msgid ""
"Dict and dictviews are now iterable in reversed insertion order using "
":func:`reversed`. (Contributed by Rémi Lapeyre in :issue:`33462`.)"
msgstr ""
"现在 dict 和 dictview 可以使用 :func:`reversed` 按插入顺序反向迭代。 （由 Rémi Lapeyre 在 "
":issue:`33462` 中贡献。）"

#: ../../whatsnew/3.8.rst:413
msgid ""
"The syntax allowed for keyword names in function calls was further "
"restricted. In particular, ``f((keyword)=arg)`` is no longer allowed. It was"
" never intended to permit more than a bare name on the left-hand side of a "
"keyword argument assignment term. See :issue:`34641`."
msgstr ""
"在函数调用中允许使用的关键字名称语法受到进一步的限制。 特别地，``f((keyword)=arg)`` 不再被允许。 "
"关键字参数赋值形式的左侧绝不允许一般标识符以外的其他内容。 参阅 :issue:`34641`。"

#: ../../whatsnew/3.8.rst:418
msgid ""
"Generalized iterable unpacking in :keyword:`yield` and :keyword:`return` "
"statements no longer requires enclosing parentheses. This brings the *yield*"
" and *return* syntax into better agreement with normal assignment syntax::"
msgstr ""
"在 :keyword:`yield` 和 :keyword:`return` 语句中的一般可迭代对象解包不再要求加圆括号。 这使得 *yield* 和 "
"*return* 的语法与正常的赋值语法更为一致::"

#: ../../whatsnew/3.8.rst:431
msgid "(Contributed by David Cuthbert and Jordan Chapman in :issue:`32117`.)"
msgstr "（由 David Cuthbert 和 Jordan Chapman 在 :issue:`32117` 中贡献。）"

#: ../../whatsnew/3.8.rst:433
msgid ""
"When a comma is missed in code such as ``[(10, 20) (30, 40)]``, the compiler"
" displays a :exc:`SyntaxWarning` with a helpful suggestion. This improves on"
" just having a :exc:`TypeError` indicating that the first tuple was not "
"callable.  (Contributed by Serhiy Storchaka in :issue:`15248`.)"
msgstr ""
"当类似 ``[(10, 20) (30, 40)]`` 这样在代码中少了一个逗号时，编译器将显示 :exc:`SyntaxWarning` "
"并附带更有帮助的提示。 这相比原来用 :exc:`TypeError` 来提示第一个元组是不可调用的更容易被理解。 （由 Serhiy "
"Storchaka 在 :issue:`15248` 中贡献。）"

#: ../../whatsnew/3.8.rst:439
msgid ""
"Arithmetic operations between subclasses of :class:`datetime.date` or "
":class:`datetime.datetime` and :class:`datetime.timedelta` objects now "
"return an instance of the subclass, rather than the base class. This also "
"affects the return type of operations whose implementation (directly or "
"indirectly) uses :class:`datetime.timedelta` arithmetic, such as "
":meth:`datetime.datetime.astimezone`. (Contributed by Paul Ganssle in "
":issue:`32417`.)"
msgstr ""
":class:`datetime.date` 或 :class:`datetime.datetime` 的子类和 "
":class:`datetime.timedelta` 对象之间的算术运算现在将返回相应子类的实例而不是基类的实例。 "
"这也会影响到在具体实现中（直接或间接地）使用了 :class:`datetime.timedelta` 算术的运算的返回类型，例如 "
":meth:`datetime.datetime.astimezone`。 （由 Paul Ganssle 在 :issue:`32417` 中贡献。）"

#: ../../whatsnew/3.8.rst:447
msgid ""
"When the Python interpreter is interrupted by Ctrl-C (SIGINT) and the "
"resulting :exc:`KeyboardInterrupt` exception is not caught, the Python "
"process now exits via a SIGINT signal or with the correct exit code such "
"that the calling process can detect that it died due to a Ctrl-C.  Shells on"
" POSIX and Windows use this to properly terminate scripts in interactive "
"sessions. (Contributed by Google via Gregory P. Smith in :issue:`1054041`.)"
msgstr ""
"当 Python 解释器通过 Ctrl-C (SIGINT) 被中断并且所产生的 :exc:`KeyboardInterrupt` "
"异常未被捕获，Python 进程现在会通过一个 SIGINT 信号或是使得发起调用的进程能检测到它是由 Ctrl-C 操作杀死的正确退出代码来退出。 "
"POSIX 和 Windows 上的终端会相应地使用此代码在交互式会话中终止脚本。 （由 Google 的 Gregory P. Smith 在 "
":issue:`1054041` 中贡献。）"

#: ../../whatsnew/3.8.rst:454
msgid ""
"Some advanced styles of programming require updating the "
":class:`types.CodeType` object for an existing function.  Since code objects"
" are immutable, a new code object needs to be created, one that is modeled "
"on the existing code object.  With 19 parameters, this was somewhat tedious."
"  Now, the new ``replace()`` method makes it possible to create a clone with"
" a few altered parameters."
msgstr ""
"某些高级编程风格要求为现有的函数更新 :class:`types.CodeType` 对象。 "
"由于代码对象是不可变的，需要基于现有代码对象模型创建一个新的代码对象。 使用 19 个形参将会相当繁琐。 现在，新的 ``replace()`` "
"方法使得通过少量修改的形参创建克隆对象成为可能。"

#: ../../whatsnew/3.8.rst:461
msgid ""
"Here's an example that alters the :func:`statistics.mean` function to "
"prevent the *data* parameter from being used as a keyword argument::"
msgstr "下面是一个修改 :func:`statistics.mean` 函数来防止 *data* 形参被用作关键字参数的例子::"

#: ../../whatsnew/3.8.rst:473
msgid "(Contributed by Victor Stinner in :issue:`37032`.)"
msgstr "（由 Victor Stinner 在 :issue:`37032` 中贡献。）"

#: ../../whatsnew/3.8.rst:475
msgid ""
"For integers, the three-argument form of the :func:`pow` function now "
"permits the exponent to be negative in the case where the base is relatively"
" prime to the modulus. It then computes a modular inverse to the base when "
"the exponent is ``-1``, and a suitable power of that inverse for other "
"negative exponents.  For example, to compute the `modular multiplicative "
"inverse <https://en.wikipedia.org/wiki/Modular_multiplicative_inverse>`_ of "
"38 modulo 137, write::"
msgstr ""
"对于整数，现在 :func:`pow` 函数的三参数形式在底数与模数不可约的情况下允许指数为负值。 随后它会在指数为 ``-1`` "
"时计算底数的模乘逆元，并对其他负指数计算反模的适当幂次。 例如，要计算 38 模 137 的 `模乘逆元 "
"<https://en.wikipedia.org/wiki/Modular_multiplicative_inverse>`_ 则可写为::"

#: ../../whatsnew/3.8.rst:489
msgid ""
"Modular inverses arise in the solution of `linear Diophantine equations "
"<https://en.wikipedia.org/wiki/Diophantine_equation>`_. For example, to find"
" integer solutions for ``4258𝑥 + 147𝑦 = 369``, first rewrite as ``4258𝑥 ≡ "
"369 (mod 147)`` then solve:"
msgstr ""
"模乘逆元在求解 `线性丢番图方程 <https://en.wikipedia.org/wiki/Diophantine_equation>`_ "
"会被用到。 例如，想要求出 ``4258𝑥 + 147𝑦 = 369`` 的整数解，首先应重写为 ``4258𝑥 ≡ 369 (mod 147)`` "
"然后求解："

#: ../../whatsnew/3.8.rst:499
msgid "(Contributed by Mark Dickinson in :issue:`36027`.)"
msgstr "（由 Mark Dickinson 在 :issue:`36027` 中贡献。）"

#: ../../whatsnew/3.8.rst:501
msgid ""
"Dict comprehensions have been synced-up with dict literals so that the key "
"is computed first and the value second::"
msgstr "字典推导式已与字典字面值实现同步，会先计算键再计算值::"

#: ../../whatsnew/3.8.rst:516
msgid ""
"The guaranteed execution order is helpful with assignment expressions "
"because variables assigned in the key expression will be available in the "
"value expression::"
msgstr "对执行顺序的保证对赋值表达式来说很有用，因为在键表达式中赋值的变量将可在值表达式中被使用::"

#: ../../whatsnew/3.8.rst:528
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.8.rst:530
msgid ""
"The new :mod:`importlib.metadata` module provides (provisional) support for "
"reading metadata from third-party packages.  For example, it can extract an "
"installed package's version number, list of entry points, and more::"
msgstr ""
"新增的 :mod:`importlib.metadata` 模块提供了从第三方包读取元数据的（临时）支持。 "
"例如，它可以提取一个已安装软件包的版本号、入口点列表等等::"

#: ../../whatsnew/3.8.rst:549
msgid "(Contributed in :issue:`34632` by Barry Warsaw and Jason R. Coombs.)"
msgstr "（由 Barry Warsaw 和 Jason R. Coombs 在 :issue:`34632` 中贡献。）"

#: ../../whatsnew/3.8.rst:553
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.8.rst:557
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.8.rst:559
msgid ""
"AST nodes now have ``end_lineno`` and ``end_col_offset`` attributes, which "
"give the precise location of the end of the node.  (This only applies to "
"nodes that have ``lineno`` and ``col_offset`` attributes.)"
msgstr ""
"AST 节点现在具有 ``end_lineno`` 和 ``end_col_offset`` 属性，它们给出节点结束的精确位置。 （这只适用于具有 "
"``lineno`` 和 ``col_offset`` 属性的节点。）"

#: ../../whatsnew/3.8.rst:563
msgid "The :func:`ast.parse` function has some new flags:"
msgstr ":func:`ast.parse` 函数具有一些新的旗标："

#: ../../whatsnew/3.8.rst:565
msgid ""
"``type_comments=True`` causes it to return the text of :pep:`484` and "
":pep:`526` type comments associated with certain AST nodes;"
msgstr ""
"``type_comments=True`` 导致其返回与特定 AST 节点相关联的 :pep:`484` 和 :pep:`526` 类型注释文本；"

#: ../../whatsnew/3.8.rst:568
msgid ""
"``mode='func_type'`` can be used to parse :pep:`484` \"signature type "
"comments\" (returned for function definition AST nodes);"
msgstr "``mode='func_type'`` 可被用于解析 :pep:`484` \"签名类型注释\" (为函数定义 AST 节点而返回)；"

#: ../../whatsnew/3.8.rst:571
msgid ""
"``feature_version=(3, N)`` allows specifying an earlier Python 3 version.  "
"(For example, ``feature_version=(3, 4)`` will treat ``async`` and ``await`` "
"as non-reserved words.)"
msgstr ""
"``feature_version=(3, N)`` 允许指定一个更早的 Python 3 版本。 （例如，``feature_version=(3, "
"4)`` 将把 ``async`` 和 ``await`` 视为非保留字。）"

#: ../../whatsnew/3.8.rst:575
msgid ""
"New function :func:`ast.get_source_segment` returns the source code for a "
"specific AST node."
msgstr "新增函数 :func:`ast.get_source_segment` 返回指定 AST 节点的源代码。"

#: ../../whatsnew/3.8.rst:580
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.8.rst:582
msgid ""
"On Windows, the default event loop is now "
":class:`~asyncio.ProactorEventLoop`. (Contributed by Victor Stinner in "
":issue:`34687`.)"
msgstr ""
"在 Windows 上，现在默认的事件循环为 :class:`~asyncio.ProactorEventLoop`。 （由 Victor "
"Stinner 在 :issue:`34687` 中贡献。）"

#: ../../whatsnew/3.8.rst:585
msgid ""
":class:`~asyncio.ProactorEventLoop` now also supports UDP. (Contributed by "
"Adam Meily and Andrew Svetlov in :issue:`29883`.)"
msgstr ""
":class:`~asyncio.ProactorEventLoop` 现在也支持 UDP。 （由 Adam Meily 和 Andrew "
"Svetlov 在 :issue:`29883` 中贡献。）"

#: ../../whatsnew/3.8.rst:588
msgid ""
":class:`~asyncio.ProactorEventLoop` can now be interrupted by "
":exc:`KeyboardInterrupt` (\"CTRL+C\"). (Contributed by Vladimir Matveev in "
":issue:`23057`.)"
msgstr ""
":class:`~asyncio.ProactorEventLoop` 现在可通过 :exc:`KeyboardInterrupt` "
"(\"CTRL+C\") 来中断。 （由 Vladimir Matveev 在 :issue:`23057` 中贡献。）"

#: ../../whatsnew/3.8.rst:594
msgid "builtins"
msgstr "builtins"

#: ../../whatsnew/3.8.rst:596
msgid ""
"The :func:`compile` built-in has been improved to accept the "
"``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` flag. With this new flag passed, "
":func:`compile` will allow top-level ``await``, ``async for`` and ``async "
"with`` constructs that are usually considered invalid syntax. Asynchronous "
"code object marked with the ``CO_COROUTINE`` flag may then be returned."
msgstr ""
"内置的 :func:`compile` 已改进为可接受 ``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` 旗标。 "
"当传入此新旗标时，:func:`compile` 将允许之前会被视为无效语法的最高层级 ``await``, ``async for`` 和 "
"``async with`` 构造，并可随后返回带有 ``CO_COROUTINE`` 旗标的异步代码对象。"

#: ../../whatsnew/3.8.rst:602
msgid "(Contributed by Matthias Bussonnier in :issue:`34616`)"
msgstr "（由 Matthias Bussonnier 在 :issue:`34616` 中贡献。）"

#: ../../whatsnew/3.8.rst:605
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.8.rst:607
msgid ""
"The :meth:`_asdict()` method for :func:`collections.namedtuple` now returns "
"a :class:`dict` instead of a :class:`collections.OrderedDict`. This works "
"because regular dicts have guaranteed ordering since Python 3.7. If the "
"extra features of :class:`OrderedDict` are required, the suggested "
"remediation is to cast the result to the desired type: "
"``OrderedDict(nt._asdict())``. (Contributed by Raymond Hettinger in "
":issue:`35864`.)"
msgstr ""
":func:`collections.namedtuple` 的 :meth:`_asdict()` 方法现在将返回 :class:`dict` 而不是"
" :class:`collections.OrderedDict`。 此项更改是因为普通字典自 Python 3.7 起已保证具有确定的元素顺序。 "
"如果还需要 :class:`OrderedDict` 的额外特性，推荐的解决方案是将结果转换为需要的类型: "
"``OrderedDict(nt._asdict())``。 （由 Raymond Hettinger 在 :issue:`35864` 中贡献。）"

#: ../../whatsnew/3.8.rst:616
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.8.rst:618
msgid ""
"On Windows, :class:`~ctypes.CDLL` and subclasses now accept a *winmode* "
"parameter to specify flags for the underlying ``LoadLibraryEx`` call. The "
"default flags are set to only load DLL dependencies from trusted locations, "
"including the path where the DLL is stored (if a full or partial path is "
"used to load the initial DLL) and paths added by "
":func:`~os.add_dll_directory`."
msgstr ""
"在 Windows 上，:class:`~ctypes.CDLL` 及其子类现在接受 *winmode* 形参来指定用于底层 "
"``LoadLibraryEx`` 调用的旗标。 默认旗标被设为仅加载来自可信任位置的 DLL 依赖项，包括 DLL 的存放路径（如果加载初始 DLL "
"时使用了完整或部分路径）以及通过 :func:`~os.add_dll_directory` 添加的路径。"

#: ../../whatsnew/3.8.rst:626
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.8.rst:628
msgid ""
":func:`functools.lru_cache` can now be used as a straight decorator rather "
"than as a function returning a decorator.  So both of these are now "
"supported::"
msgstr ":func:`functools.lru_cache` 现在可直接作为装饰器而不是作为返回装饰器的函数。 因此这两种写法现在都被支持::"

#: ../../whatsnew/3.8.rst:639
msgid "(Contributed by Raymond Hettinger in :issue:`36772`.)"
msgstr "（由 Raymond Hettinger 在 :issue:`36772` 中贡献。）"

#: ../../whatsnew/3.8.rst:643
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.8.rst:645
msgid ""
"Added new alternate constructors :meth:`datetime.date.fromisocalendar` and "
":meth:`datetime.datetime.fromisocalendar`, which construct :class:`date` and"
" :class:`datetime` objects respectively from ISO year, week number and "
"weekday; these are the inverse of each class's ``isocalendar`` method. "
"(Contributed by Paul Ganssle in :issue:`36004`.)"
msgstr ""
"添加了新的替代构造器 :meth:`datetime.date.fromisocalendar` 和 "
":meth:`datetime.datetime.fromisocalendar`，它们分别基于 ISO 年份、周序号和周内日序号来构造 "
":class:`date` 和 :class:`datetime` 对象；这两者分别是其所对应类中 ``isocalendar`` 方法的逆操作。 （由"
" Paul Ganssle 在 :issue:`36004` 中贡献。）"

#: ../../whatsnew/3.8.rst:653
msgid "gettext"
msgstr "gettext"

#: ../../whatsnew/3.8.rst:655
msgid ""
"Added :func:`~gettext.pgettext` and its variants. (Contributed by Franz "
"Glasner, Éric Araujo, and Cheryl Sabella in :issue:`2504`.)"
msgstr ""
"添加了 :func:`~gettext.pgettext` 及其变化形式。 （由 Franz Glasner, Éric Araujo 和 Cheryl"
" Sabella 在 :issue:`2504` 中贡献。）"

#: ../../whatsnew/3.8.rst:660 ../../whatsnew/3.8.rst:730
msgid "idlelib and IDLE"
msgstr "idlelib 与 IDLE"

#: ../../whatsnew/3.8.rst:662 ../../whatsnew/3.8.rst:737
msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can be "
"changed in the PyShell section of the General page of the Settings dialog.  "
"Fewer, but possibly extra long, lines can be squeezed by right clicking on "
"the output.  Squeezed output can be expanded in place by double-clicking the"
" button or into the clipboard or a separate window by right-clicking the "
"button.  (Contributed by Tal Einat in :issue:`1529353`.)"
msgstr ""
"超过 N 行（默认值为 50）的输出将被折叠为一个按钮。 N 可以在 Settings 对话框的 General 页的 PyShell 部分中进行修改。"
" 数量较少但是超长的行可以通过在输出上右击来折叠。 被折叠的输出可通过双击按钮来展开，或是通过右击按钮来放入剪贴板或是单独的窗口。 （由 Tal "
"Einat 在 :issue:`1529353` 中贡献。）"

#: ../../whatsnew/3.8.rst:669
msgid ""
"Add \"Run Customized\" to the Run menu to run a module with customized "
"settings. Any command line arguments entered are added to sys.argv. They "
"also re-appear in the box for the next customized run.  One can also "
"suppress the normal Shell main module restart.  (Contributed by Cheryl "
"Sabella, Terry Jan Reedy, and others in :issue:`5680` and :issue:`37627`.)"
msgstr ""
"在 Run 菜单中增加了 \"Run Customized\" 以使用自定义设置来运行模块。 输入的任何命令行参数都会被加入 sys.argv。 "
"它们在下次自定义运行时会再次显示在窗体中。 用户也可以禁用通常的 Shell 主模块重启。 （由 Cheryl Sabella, Terry Jan "
"Reedy 等人在 :issue:`5680` 和 :issue:`37627` 中贡献。）"

#: ../../whatsnew/3.8.rst:675
msgid ""
"Add optional line numbers for IDLE editor windows. Windows open without line"
" numbers unless set otherwise in the General tab of the configuration "
"dialog.  Line numbers for an existing window are shown and hidden in the "
"Options menu. (Contributed by Tal Einat and Saimadhav Heblikar in "
":issue:`17535`.)"
msgstr ""
"在 IDLE 编辑器窗口中增加了可选的行序号。 窗口打开时默认不带行序号，除非在配置对话框的 General 选项卡中进行设置。 "
"已打开窗口中的行序号可以在 Options 菜单中显示和隐藏。 （由 Tal Einat 和 Saimadhav Heblikar 在 "
":issue:`17535` 中贡献。）"

#: ../../whatsnew/3.8.rst:681 ../../whatsnew/3.8.rst:744
msgid "The changes above have been backported to 3.7 maintenance releases."
msgstr "上述修改已被反向移植到 3.7 维护发行版中。"

#: ../../whatsnew/3.8.rst:685
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.8.rst:687
msgid ""
"The :func:`inspect.getdoc` function can now find docstrings for "
"``__slots__`` if that attribute is a :class:`dict` where the values are "
"docstrings. This provides documentation options similar to what we already "
"have for :func:`property`, :func:`classmethod`, and :func:`staticmethod`::"
msgstr ""
":func:`inspect.getdoc` 函数现在可以找到 ``__slots__`` 的文档字符串，如果该属性是一个元素值为文档字符串的 "
":class:`dict` 的话。 这提供了类似于目前已有的 :func:`property`, :func:`classmethod` 和 "
":func:`staticmethod` 等函数的文档选项::"

#: ../../whatsnew/3.8.rst:701
msgid "io"
msgstr "io"

#: ../../whatsnew/3.8.rst:703
msgid ""
"In development mode (:option:`-X` ``env``) and in debug build, the "
":class:`io.IOBase` finalizer now logs the exception if the ``close()`` "
"method fails. The exception is ignored silently by default in release build."
" (Contributed by Victor Stinner in :issue:`18748`.)"
msgstr ""
"在开发模式 (:option:`-X` ``env``) 和调试构建中，:class:`io.IOBase` 终结器现在会在 ``close()`` "
"方法失败时将异常写入日志。 发生的异常在发布构建中默认会被静默忽略。 （由 Victor Stinner 在 :issue:`18748` 中贡献。）"

#: ../../whatsnew/3.8.rst:710
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.8.rst:712
msgid ""
":func:`~gc.get_objects` can now receive an optional *generation* parameter "
"indicating a generation to get objects from. Contributed in :issue:`36016` "
"by Pablo Galindo."
msgstr ""
":func:`~gc.get_objects` 现在能接受一个可选的 *generation* 形参来指定一个用来获取对象的生成器。 由 Pablo "
"Galindo 在 :issue:`36016` 中贡献。"

#: ../../whatsnew/3.8.rst:718
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.8.rst:720
msgid ""
"Added the *mtime* parameter to :func:`gzip.compress` for reproducible "
"output. (Contributed by Guo Ci Teo in :issue:`34898`.)"
msgstr ""
"添加 *mtime* 形参到 :func:`gzip.compress` 用于可重现的输出。 （由 Guo Ci Teo 在 "
":issue:`34898` 中贡献。）"

#: ../../whatsnew/3.8.rst:723
msgid ""
"A :exc:`~gzip.BadGzipFile` exception is now raised instead of :exc:`OSError`"
" for certain types of invalid or corrupt gzip files. (Contributed by Filip "
"Gruszczyński, Michele Orrù, and Zackery Spytz in :issue:`6584`.)"
msgstr ""
"对于特定类型的无效或已损坏 gzip 文件现在将引发 :exc:`~gzip.BadGzipFile` 而不是 :exc:`OSError`。 （由 "
"Filip Gruszczyński, Michele Orrù 和 Zackery Spytz 在 :issue:`6584` 中贡献。）"

#: ../../whatsnew/3.8.rst:732
msgid ""
"Add optional line numbers for IDLE editor windows. Windows open without line"
" numbers unless set otherwise in the General tab of the configuration "
"dialog. (Contributed by Tal Einat and Saimadhav Heblikar in :issue:`17535`.)"
msgstr ""
"在 IDLE 编辑器窗口中增加了可选的行序号。 窗口打开时默认不带行序号，除非在配置对话框的 General 选项卡中进行设置。 （由 Tal "
"Einat 和 Saimadhav Heblikar 在 :issue:`17535` 中贡献。）"

#: ../../whatsnew/3.8.rst:748
msgid "json.tool"
msgstr "json.tool"

#: ../../whatsnew/3.8.rst:750
msgid ""
"Add option ``--json-lines`` to parse every input line as separate JSON "
"object. (Contributed by Weipeng Hong in :issue:`31553`.)"
msgstr ""
"添加选项 ``--json-lines`` 用于将每个输入行解析为单独的 JSON 对象。 （由 Weipeng Hong 在 "
":issue:`31553` 中贡献。）"

#: ../../whatsnew/3.8.rst:755
msgid "math"
msgstr "math"

#: ../../whatsnew/3.8.rst:757
msgid ""
"Added new function :func:`math.dist` for computing Euclidean distance "
"between two points.  (Contributed by Raymond Hettinger in :issue:`33089`.)"
msgstr ""
"添加了新的函数 :func:`math.dist` 用于计算两点之间的欧几里得距离。 （由 Raymond Hettinger 在 "
":issue:`33089` 中贡献。）"

#: ../../whatsnew/3.8.rst:760
msgid ""
"Expanded the :func:`math.hypot` function to handle multiple dimensions. "
"Formerly, it only supported the 2-D case. (Contributed by Raymond Hettinger "
"in :issue:`33089`.)"
msgstr ""
"扩展了 :func:`math.hypot` 函数以便处理更多的维度。 之前它仅支持 2-D 的情况。 （由 Raymond Hettinger 在 "
":issue:`33089` 中贡献。）"

#: ../../whatsnew/3.8.rst:764
msgid ""
"Added new function, :func:`math.prod`, as analogous function to :func:`sum` "
"that returns the product of a 'start' value (default: 1) times an iterable "
"of numbers::"
msgstr ""
"添加了新的函数 :func:`math.prod` 作为的 :func:`sum` 同类，该函数返回 'start' 值 (默认值: 1) "
"乘以一个数字可迭代对象的积::"

#: ../../whatsnew/3.8.rst:773
msgid "(Contributed by Pablo Galindo in :issue:`35606`)"
msgstr "（由 Pablo Galindo 在 :issue:`35606` 中贡献。）"

#: ../../whatsnew/3.8.rst:775
msgid ""
"Added new function :func:`math.isqrt` for computing integer square roots. "
"(Contributed by Mark Dickinson in :issue:`36887`.)"
msgstr ""
"添加了新的函数 :func:`math.isqrt` 用于计算整数平方根。 （由 Mark Dickinson 在 :issue:`36887` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:778
msgid ""
"The function :func:`math.factorial` no longer accepts arguments that are not"
" int-like. (Contributed by Pablo Galindo in :issue:`33083`.)"
msgstr ""
"函数 :func:`math.factorial` 不再接受非整数类参数。 （由 Pablo Galindo 在 :issue:`33083` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:783
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.8.rst:785
msgid ""
"The :class:`mmap.mmap` class now has an :meth:`~mmap.mmap.madvise` method to"
" access the ``madvise()`` system call. (Contributed by Zackery Spytz in "
":issue:`32941`.)"
msgstr ""
":class:`mmap.mmap` 类现在具有一个 :meth:`~mmap.mmap.madvise` 方法用于访问 ``madvise()`` "
"系统调用。 （由 Zackery Spytz 在 :issue:`32941` 中贡献。）"

#: ../../whatsnew/3.8.rst:791
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.8.rst:793
msgid ""
"Added new :mod:`multiprocessing.shared_memory` module. (Contributed Davin "
"Potts in :issue:`35813`.)"
msgstr ""
"添加了新的 :mod:`multiprocessing.shared_memory` 模块。 （由 Davin Potts 在 "
":issue:`35813` 中贡献。）"

#: ../../whatsnew/3.8.rst:796
msgid ""
"On macOS, the *spawn* start method is now used by default. (Contributed by "
"Victor Stinner in :issue:`33725`.)"
msgstr ""
"在macOS上，现在默认使用的启动方式是*spawn*启动方式。\n"
"（由 Victor Stinner 在 :issue:`33725` 中贡献。）"

#: ../../whatsnew/3.8.rst:801
msgid "os"
msgstr "os"

#: ../../whatsnew/3.8.rst:803
msgid ""
"Added new function :func:`~os.add_dll_directory` on Windows for providing "
"additional search paths for native dependencies when importing extension "
"modules or loading DLLs using :mod:`ctypes`."
msgstr ""
"添加了 Windows 版的新函数 :func:`~os.add_dll_directory` 用于在导入扩展模块或使用 :mod:`ctypes` "
"加载 DLL 时为原生依赖提供额外搜索路径。"

#: ../../whatsnew/3.8.rst:807
msgid ""
"A new :func:`os.memfd_create` function was added to wrap the "
"``memfd_create()`` syscall. (Contributed by Zackery Spytz and Christian "
"Heimes in :issue:`26836`.)"
msgstr ""
"添加了新的 :func:`os.memfd_create` 函数用于包装 ``memfd_create()`` 系统调用。 （由 Zackery "
"Spytz 和 Christian Heimes 在 :issue:`26836` 中贡献。）"

#: ../../whatsnew/3.8.rst:811
msgid ""
"On Windows, much of the manual logic for handling reparse points (including "
"symlinks and directory junctions) has been delegated to the operating "
"system. Specifically, :func:`os.stat` will now traverse anything supported "
"by the operating system, while :func:`os.lstat` will only open reparse "
"points that identify as \"name surrogates\" while others are opened as for "
":func:`os.stat`. In all cases, :attr:`stat_result.st_mode` will only have "
"``S_IFLNK`` set for symbolic links and not other kinds of reparse points. To"
" identify other kinds of reparse point, check the new "
":attr:`stat_result.st_reparse_tag` attribute."
msgstr ""
"在 Windows 上，大部分用于处理重解析点,（包括符号链接和目录连接）的手动逻辑已被委托给操作系统。 特别地，:func:`os.stat` "
"现在将会遍历操作系统所支持的任何内容，而 :func:`os.lstat` 将只打开被标识为“名称代理”的重解析点，而其要由 "
":func:`os.stat` 打开其他的重解析点。 在所有情况下，:attr:`stat_result.st_mode` "
"将只为符号链接而非其他种类的重解析点设置 ``S_IFLNK``。 要标识其他种类的重解析点，请检查新的 "
":attr:`stat_result.st_reparse_tag` 属性。"

#: ../../whatsnew/3.8.rst:820
msgid ""
"On Windows, :func:`os.readlink` is now able to read directory junctions. "
"Note that :func:`~os.path.islink` will return ``False`` for directory "
"junctions, and so code that checks ``islink`` first will continue to treat "
"junctions as directories, while code that handles errors from "
":func:`os.readlink` may now treat junctions as links."
msgstr ""
"在 Windows 上，:func:`os.readlink` 现在能够读取目录连接。 请注意 :func:`~os.path.islink` "
"会对目录连接返回 ``False``，因此首先检查 ``islink`` 的代码将连续把连接视为目录，而会处理 :func:`os.readlink` "
"所引发错误的代码现在会把连接视为链接。"

#: ../../whatsnew/3.8.rst:828
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.8.rst:830
msgid ""
":mod:`os.path` functions that return a boolean result like "
":func:`~os.path.exists`, :func:`~os.path.lexists`, :func:`~os.path.isdir`, "
":func:`~os.path.isfile`, :func:`~os.path.islink`, and "
":func:`~os.path.ismount` now return ``False`` instead of raising "
":exc:`ValueError` or its subclasses :exc:`UnicodeEncodeError` and "
":exc:`UnicodeDecodeError` for paths that contain characters or bytes "
"unrepresentable at the OS level. (Contributed by Serhiy Storchaka in "
":issue:`33721`.)"
msgstr ""
"返回布尔值结果的 :mod:`os.path` 函数例如 :func:`~os.path.exists`, "
":func:`~os.path.lexists`, :func:`~os.path.isdir`, :func:`~os.path.isfile`, "
":func:`~os.path.islink`, 以及 :func:`~os.path.ismount` 现在对于包含在 OS "
"层级无法表示的字符或字节的路径将会返回 ``False`` 而不是引发 :exc:`ValueError` 或其子类 "
":exc:`UnicodeEncodeError` 和 :exc:`UnicodeDecodeError`。 （由 Serhiy Storchaka 在"
" :issue:`33721` 中贡献。）"

#: ../../whatsnew/3.8.rst:838 ../../whatsnew/3.8.rst:1628
msgid ""
":func:`~os.path.expanduser` on Windows now prefers the :envvar:`USERPROFILE`"
" environment variable and does not use :envvar:`HOME`, which is not normally"
" set for regular user accounts."
msgstr ""
":func:`~os.path.expanduser` 在 Windows 上现在改用 :envvar:`USERPROFILE` 环境变量而不再使用 "
":envvar:`HOME`，后者通常不会为一般用户账户设置。"

#: ../../whatsnew/3.8.rst:842
msgid ""
":func:`~os.path.isdir` on Windows no longer returns true for a link to a "
"non-existent directory."
msgstr ":func:`~os.path.isdir` 在 Windows 上不再为不存在的目录的链接返回真值。"

#: ../../whatsnew/3.8.rst:845
msgid ""
":func:`~os.path.realpath` on Windows now resolves reparse points, including "
"symlinks and directory junctions."
msgstr ":func:`~os.path.realpath` 在 Windows 上现在会识别重解析点，包括符号链接和目录连接。"

#: ../../whatsnew/3.8.rst:850
msgid "ncurses"
msgstr "ncurses"

#: ../../whatsnew/3.8.rst:852
msgid ""
"Added a new variable holding structured version information for the "
"underlying ncurses library: :data:`~curses.ncurses_version`. (Contributed by"
" Serhiy Storchaka in :issue:`31680`.)"
msgstr ""
"添加了一个新变量用于保存下层 ncurses 库的结构版信息: :data:`~curses.ncurses_version`。 （由 Serhiy "
"Storchaka 在 :issue:`31680` 中贡献。）"

#: ../../whatsnew/3.8.rst:858
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.8.rst:860
msgid ""
":mod:`pathlib.Path` methods that return a boolean result like "
":meth:`~pathlib.Path.exists()`, :meth:`~pathlib.Path.is_dir()`, "
":meth:`~pathlib.Path.is_file()`, :meth:`~pathlib.Path.is_mount()`, "
":meth:`~pathlib.Path.is_symlink()`, :meth:`~pathlib.Path.is_block_device()`,"
" :meth:`~pathlib.Path.is_char_device()`, :meth:`~pathlib.Path.is_fifo()`, "
":meth:`~pathlib.Path.is_socket()` now return ``False`` instead of raising "
":exc:`ValueError` or its subclass :exc:`UnicodeEncodeError` for paths that "
"contain characters unrepresentable at the OS level. (Contributed by Serhiy "
"Storchaka in :issue:`33721`.)"
msgstr ""
"返回布尔值结果的 :mod:`pathlib.Path` 方法例如 :meth:`~pathlib.Path.exists()`, "
":meth:`~pathlib.Path.is_dir()`, :meth:`~pathlib.Path.is_file()`, "
":meth:`~pathlib.Path.is_mount()`, :meth:`~pathlib.Path.is_symlink()`, "
":meth:`~pathlib.Path.is_block_device()`, "
":meth:`~pathlib.Path.is_char_device()`, :meth:`~pathlib.Path.is_fifo()`, "
":meth:`~pathlib.Path.is_socket()` 现在对于包含在 OS 层级无法表示的字符或字节的路径将会返回 ``False`` "
"而不是引发 :exc:`ValueError` 或其子类 :exc:`UnicodeEncodeError`。 （由 Serhiy Storchaka "
"在 :issue:`33721` 中贡献。）"

#: ../../whatsnew/3.8.rst:870
msgid ""
"Added :meth:`pathlib.Path.link_to()` which creates a hard link pointing to a"
" path. (Contributed by Joannah Nanjekye in :issue:`26978`)"
msgstr ""
"添加了 :meth:`pathlib.Path.link_to()` 用于创建指向某个路径的硬链接。 （由 Joannah Nanjekye 在 "
":issue:`26978` 中贡献。）"

#: ../../whatsnew/3.8.rst:876
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.8.rst:878
msgid ""
"Reduction methods can now include a 6th item in the tuple they return. This "
"item should specify a custom state-setting method that's called instead of "
"the regular ``__setstate__`` method. (Contributed by Pierre Glaser and "
"Olivier Grisel in :issue:`35900`)"
msgstr ""
"缩减型的方法现在可在它们返回的元组中包含第 6 个条目。 此条目应当指定一个自定义的状态设置方法，该方法将替代常规的 ``__setstate__`` "
"方法被调用。 （由 Pierre Glaser 和 Olivier Grisel 在 :issue:`35900` 中贡献。）"

#: ../../whatsnew/3.8.rst:883
msgid ""
":mod:`pickle` extensions subclassing the C-optimized "
":class:`~pickle.Pickler` can now override the pickling logic of functions "
"and classes by defining the special :meth:`~pickle.Pickler.reducer_override`"
" method. (Contributed by Pierre Glaser and Olivier Grisel in :issue:`35900`)"
msgstr ""
":mod:`pickle` 扩展子类化针对 C 优化的 :class:`~pickle.Pickler` 现在可通过定义特殊的 "
":meth:`~pickle.Pickler.reducer_override` 方法来重载函数和类的封存逻辑。 （由 Pierre Glaser 和 "
"Olivier Grisel 在 :issue:`35900` 中贡献。）"

#: ../../whatsnew/3.8.rst:890
msgid "plistlib"
msgstr "plistlib"

#: ../../whatsnew/3.8.rst:892
msgid ""
"Added new :class:`plistlib.UID` and enabled support for reading and writing "
"NSKeyedArchiver-encoded binary plists. (Contributed by Jon Janzen in "
":issue:`26707`.)"
msgstr ""
"添加了新的 :class:`plistlib.UID` 并启动了对读取和写入经过 NSKeyedArchiver 编码的二进制 plists 的支持。 "
"（由 Jon Janzen 在 :issue:`26707` 中贡献。）"

#: ../../whatsnew/3.8.rst:898
msgid "py_compile"
msgstr "py_compile"

#: ../../whatsnew/3.8.rst:900
msgid ""
":func:`py_compile.compile` now supports silent mode. (Contributed by Joannah"
" Nanjekye in :issue:`22640`.)"
msgstr ""
":func:`py_compile.compile` 现在支持静默模式。 （由 Joannah Nanjekye 在 :issue:`22640` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:905
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.8.rst:907
msgid ""
"Added :meth:`~socket.create_server()` and "
":meth:`~socket.has_dualstack_ipv6()` convenience functions to automate the "
"necessary tasks usually involved when creating a server socket, including "
"accepting both IPv4 and IPv6 connections on the same socket.  (Contributed "
"by Giampaolo Rodola in :issue:`17561`.)"
msgstr ""
"添加了便捷的 :meth:`~socket.create_server()` 和 "
":meth:`~socket.has_dualstack_ipv6()` "
"函数以自动化创建服务器套接字时在通常情况下所必须的任务，包括在同一套接字中同时接受 IPv4 和 IPv6 连接。 （由 Giampaolo "
"Rodola 在 :issue:`17561` 中贡献。）"

#: ../../whatsnew/3.8.rst:912
msgid ""
"The :func:`socket.if_nameindex()`, :func:`socket.if_nametoindex()`, and "
":func:`socket.if_indextoname()` functions have been implemented on Windows. "
"(Contributed by Zackery Spytz in :issue:`37007`.)"
msgstr ""
":func:`socket.if_nameindex()`, :func:`socket.if_nametoindex()` 和 "
":func:`socket.if_indextoname()` 函数已经在 Windows 上实现。 （由 Zackery Spytz 在 "
":issue:`37007` 中贡献。）"

#: ../../whatsnew/3.8.rst:917
msgid "shlex"
msgstr "shlex"

#: ../../whatsnew/3.8.rst:919
msgid ""
"The new :func:`shlex.join` function acts as the inverse of "
":func:`shlex.split`. (Contributed by Bo Bayles in :issue:`32102`.)"
msgstr ""
"新增了 :func:`shlex.join` 函数作为 :func:`shlex.split` 的逆操作。 （由 Bo Bayles 在 "
":issue:`32102` 中贡献。）"

#: ../../whatsnew/3.8.rst:923
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.8.rst:925
msgid ""
":func:`shutil.copytree` now accepts a new ``dirs_exist_ok`` keyword "
"argument. (Contributed by Josh Bronson in :issue:`20849`.)"
msgstr ""
":func:`shutil.copytree` 现在接受新的 ``dirs_exist_ok`` 关键字参数。 （由 Josh Bronson 在 "
":issue:`20849` 中贡献。）"

#: ../../whatsnew/3.8.rst:928
msgid ""
":func:`shutil.make_archive` now defaults to the modern pax (POSIX.1-2001) "
"format for new archives to improve portability and standards conformance, "
"inherited from the corresponding change to the :mod:`tarfile` module. "
"(Contributed by C.A.M. Gerlach in :issue:`30661`.)"
msgstr ""
":func:`shutil.make_archive` 现在对新的归档默认使用 modern pax (POSIX.1-2001) "
"格式以提升可移植性和标准一致性，此特性继承自对 :mod:`tarfile` 模块的相应更改。 （由 C.A.M. Gerlach 在 "
":issue:`30661` 中贡献。）"

#: ../../whatsnew/3.8.rst:933
msgid ""
":func:`shutil.rmtree` on Windows now removes directory junctions without "
"recursively removing their contents first."
msgstr ":func:`shutil.rmtree` 在 Windows 上现在会移除目录连接而不会递归地先移除其中的内容。"

#: ../../whatsnew/3.8.rst:938
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.8.rst:940
msgid ""
"Added :attr:`SSLContext.post_handshake_auth` to enable and "
":meth:`ssl.SSLSocket.verify_client_post_handshake` to initiate TLS 1.3 post-"
"handshake authentication. (Contributed by Christian Heimes in "
":issue:`34670`.)"
msgstr ""
"增加了 :attr:`SSLContext.post_handshake_auth` 以及 "
":meth:`ssl.SSLSocket.verify_client_post_handshake` 来启用并初始化 TLS 1.3 握手后验证。 （由"
" Christian Heimes 在 :issue:`34670` 中贡献。）"

#: ../../whatsnew/3.8.rst:947
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.8.rst:949
msgid ""
"Added :func:`statistics.fmean` as a faster, floating point variant of "
":func:`statistics.mean()`.  (Contributed by Raymond Hettinger and Steven "
"D'Aprano in :issue:`35904`.)"
msgstr ""
"添加了 :func:`statistics.fmean` 作为 :func:`statistics.mean()` 的更快速的浮点数版版本。 （由 "
"Raymond Hettinger 和 Steven D'Aprano 在 :issue:`35904` 中贡献。）"

#: ../../whatsnew/3.8.rst:953
msgid ""
"Added :func:`statistics.geometric_mean()` (Contributed by Raymond Hettinger "
"in :issue:`27181`.)"
msgstr ""
"添加了 :func:`statistics.geometric_mean()` （由 Raymond Hettinger 在 "
":issue:`27181` 中贡献。）"

#: ../../whatsnew/3.8.rst:956
msgid ""
"Added :func:`statistics.multimode` that returns a list of the most common "
"values. (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""
"添加了 :func:`statistics.multimode` 用于返回最常见值的列表。 （由 Raymond Hettinger 在 "
":issue:`35892` 中贡献。）"

#: ../../whatsnew/3.8.rst:959
msgid ""
"Added :func:`statistics.quantiles` that divides data or a distribution in to"
" equiprobable intervals (e.g. quartiles, deciles, or percentiles). "
"(Contributed by Raymond Hettinger in :issue:`36546`.)"
msgstr ""
"添加了 :func:`statistics.quantiles` 用于将数据或分布划分为多个等概率区间（例如四分位、十分位或百分位）。 （由 "
"Raymond Hettinger 在 :issue:`36546` 中贡献。）"

#: ../../whatsnew/3.8.rst:963
msgid ""
"Added :class:`statistics.NormalDist`, a tool for creating and manipulating "
"normal distributions of a random variable. (Contributed by Raymond Hettinger"
" in :issue:`36018`.)"
msgstr ""
"添加了 :class:`statistics.NormalDist` 用于创建和操纵随机变量的正态分布。 （由 Raymond Hettinger 在 "
":issue:`36018` 中贡献。）"

#: ../../whatsnew/3.8.rst:993
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.8.rst:995
msgid ""
"Add new :func:`sys.unraisablehook` function which can be overridden to "
"control how \"unraisable exceptions\" are handled. It is called when an "
"exception has occurred but there is no way for Python to handle it. For "
"example, when a destructor raises an exception or during garbage collection "
"(:func:`gc.collect`). (Contributed by Victor Stinner in :issue:`36829`.)"
msgstr ""
"添加了新的 :func:`sys.unraisablehook` 函数，可被重载以便控制如何处理“不可引发的异常”。 它会在发生了一个异常但 "
"Python 没有办法处理时被调用。 例如，当一个析构器在垃圾回收时 (:func:`gc.collect`) 所引发的异常。 （由 Victor "
"Stinner 在 :issue:`36829` 中贡献。）"

#: ../../whatsnew/3.8.rst:1004
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.8.rst:1006
msgid ""
"The :mod:`tarfile` module now defaults to the modern pax (POSIX.1-2001) "
"format for new archives, instead of the previous GNU-specific one. This "
"improves cross-platform portability with a consistent encoding (UTF-8) in a "
"standardized and extensible format, and offers several other benefits. "
"(Contributed by C.A.M. Gerlach in :issue:`36268`.)"
msgstr ""
":mod:`tarfile` 模块现在对新的归档默认使用 modern pax (POSIX.1-2001) 格式而不再是之前的 GNU 专属格式。 "
"这通过标准化和可扩展格式的统一编码 (UTF-8) 提升了跨平台可移植性，还提供了其他一些益处。 （由 C.A.M. Gerlach 在 "
":issue:`36268` 中贡献。）"

#: ../../whatsnew/3.8.rst:1014
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.8.rst:1016
msgid ""
"Add a new :func:`threading.excepthook` function which handles uncaught "
":meth:`threading.Thread.run` exception. It can be overridden to control how "
"uncaught :meth:`threading.Thread.run` exceptions are handled. (Contributed "
"by Victor Stinner in :issue:`1230540`.)"
msgstr ""
"添加了新的 :func:`threading.excepthook` 函数用来处理未捕获的 :meth:`threading.Thread.run` "
"异常。 它可被重载以便控制如何处理未捕获的 :meth:`threading.Thread.run` 异常。 （由 Victor Stinner 在 "
":issue:`1230540` 中贡献。）"

#: ../../whatsnew/3.8.rst:1021
msgid ""
"Add a new :func:`threading.get_native_id` function and a "
":data:`~threading.Thread.native_id` attribute to the "
":class:`threading.Thread` class. These return the native integral Thread ID "
"of the current thread assigned by the kernel. This feature is only available"
" on certain platforms, see :func:`get_native_id <threading.get_native_id>` "
"for more information. (Contributed by Jake Tesler in :issue:`36084`.)"
msgstr ""
"添加了新的 :func:`threading.get_native_id` 函数以及 :class:`threading.Thread` 类的 "
":data:`~threading.Thread.native_id` 属性。 它们会返回内核所分配给当前线程的原生整数线程 ID。 "
"此特性仅在特定平台上可用，参见 :func:`get_native_id <threading.get_native_id>` 了解详情。 （由 "
"Jake Tesler 在 :issue:`36084` 中贡献。）"

#: ../../whatsnew/3.8.rst:1031
msgid "tokenize"
msgstr "tokenize"

#: ../../whatsnew/3.8.rst:1033
msgid ""
"The :mod:`tokenize` module now implicitly emits a ``NEWLINE`` token when "
"provided with input that does not have a trailing new line.  This behavior "
"now matches what the C tokenizer does internally. (Contributed by Ammar "
"Askar in :issue:`33899`.)"
msgstr ""
"当提供不带末尾新行的输入时，:mod:`tokenize` 模块现在会隐式地添加 ``NEWLINE`` 形符。 此行为现在已与 C "
"词法分析器的内部行为相匹配。 （由 Ammar Askar 在 :issue:`33899` 中贡献。）"

#: ../../whatsnew/3.8.rst:1039
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.8.rst:1041
msgid ""
"Added methods :meth:`~tkinter.Spinbox.selection_from`, "
":meth:`~tkinter.Spinbox.selection_present`, "
":meth:`~tkinter.Spinbox.selection_range` and "
":meth:`~tkinter.Spinbox.selection_to` in the :class:`tkinter.Spinbox` class."
" (Contributed by Juliette Monsel in :issue:`34829`.)"
msgstr ""
"在 :class:`tkinter.Spinbox` 中添加了方法 :meth:`~tkinter.Spinbox.selection_from`, "
":meth:`~tkinter.Spinbox.selection_present`, "
":meth:`~tkinter.Spinbox.selection_range` 和 "
":meth:`~tkinter.Spinbox.selection_to`。 （由 Juliette Monsel 在 :issue:`34829` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1048
msgid ""
"Added method :meth:`~tkinter.Canvas.moveto` in the :class:`tkinter.Canvas` "
"class. (Contributed by Juliette Monsel in :issue:`23831`.)"
msgstr ""
"在 :class:`tkinter.Canvas` 类中添加了方法 :meth:`~tkinter.Canvas.moveto`。 （由 "
"Juliette Monsel 在 :issue:`23831` 中贡献。）"

#: ../../whatsnew/3.8.rst:1052
msgid ""
"The :class:`tkinter.PhotoImage` class now has "
":meth:`~tkinter.PhotoImage.transparency_get` and "
":meth:`~tkinter.PhotoImage.transparency_set` methods.  (Contributed by "
"Zackery Spytz in :issue:`25451`.)"
msgstr ""
":class:`tkinter.PhotoImage` 类现在具有 "
":meth:`~tkinter.PhotoImage.transparency_get` 和 "
":meth:`~tkinter.PhotoImage.transparency_set` 方法。 （由 Zackery Spytz 在 "
":issue:`25451` 中贡献。）"

#: ../../whatsnew/3.8.rst:1058
msgid "time"
msgstr "time"

#: ../../whatsnew/3.8.rst:1060
msgid ""
"Added new clock :data:`~time.CLOCK_UPTIME_RAW` for macOS 10.12. (Contributed"
" by Joannah Nanjekye in :issue:`35702`.)"
msgstr ""
"为 macOS 10.12 添加了新的时钟 :data:`~time.CLOCK_UPTIME_RAW`。 （由 Joannah Nanjekye 在 "
":issue:`35702` 中贡献。）"

#: ../../whatsnew/3.8.rst:1065
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.8.rst:1067
msgid "The :mod:`typing` module incorporates several new features:"
msgstr ":mod:`typing` 模块加入了一些新特性："

#: ../../whatsnew/3.8.rst:1069
msgid ""
"Protocol definitions.  See :pep:`544`, :class:`typing.Protocol` and "
":func:`typing.runtime_checkable`.  Simple ABCs like "
":class:`typing.SupportsInt` are now ``Protocol`` subclasses."
msgstr ""
"协议定义。 参见 :pep:`544`, :class:`typing.Protocol` 和 "
":func:`typing.runtime_checkable`。 简单的 ABC 例如 :class:`typing.SupportsInt` 现在是"
" ``Protocol`` 的子类。"

#: ../../whatsnew/3.8.rst:1073
msgid ""
"A dictionary type with per-key types.  See :pep:`589` and "
":class:`typing.TypedDict`."
msgstr "一个具有单键分类型的字典类型。 参见 :pep:`589` 和 :class:`typing.TypedDict`。"

#: ../../whatsnew/3.8.rst:1076
msgid "Literal types.  See :pep:`586` and :class:`typing.Literal`."
msgstr "Literal 类型。 参见 :pep:`586` 和 :class:`typing.Literal`。"

#: ../../whatsnew/3.8.rst:1078
msgid ""
"\"Final\" variables, functions, methods and classes.  See :pep:`591`, "
":class:`typing.Final` and :func:`typing.final`."
msgstr ""
"\"Final\" 变量、函数方法和类。 参见 :pep:`591`, :class:`typing.Final` 和 "
":func:`typing.final`。"

#: ../../whatsnew/3.8.rst:1081
msgid "New protocol class :class:`typing.SupportsIndex`."
msgstr "新的协议类 :class:`typing.SupportsIndex`。"

#: ../../whatsnew/3.8.rst:1083
msgid "New functions :func:`typing.get_origin` and :func:`typing.get_args`."
msgstr "新的函数 :func:`typing.get_origin` 和 :func:`typing.get_args`。"

#: ../../whatsnew/3.8.rst:1087
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.8.rst:1089
msgid ""
"The :mod:`unicodedata` module has been upgraded to use the `Unicode 12.1.0 "
"<http://blog.unicode.org/2019/05/unicode-12-1-en.html>`_ release."
msgstr ""
":mod:`unicodedata` 模块现在已升级为使用 `Unicode 12.1.0 "
"<http://blog.unicode.org/2019/05/unicode-12-1-en.html>`_ 发布版。"

#: ../../whatsnew/3.8.rst:1092
msgid ""
"New function :func:`~unicodedata.is_normalized` can be used to verify a "
"string is in a specific normal form, often much faster than by actually "
"normalizing the string.  (Contributed by Max Belanger, David Euresti, and "
"Greg Price in :issue:`32285` and :issue:`37966`)."
msgstr ""
"新的函数 :func:`~unicodedata.is_normalized` "
"可被用来验证字符串是否为特定正规形式，通常会比实际进行字符串正规化要快得多。 （由 Max Belanger, David Euresti 和 Greg"
" Price 在 :issue:`32285` 和 :issue:`37966` 中贡献。）"

#: ../../whatsnew/3.8.rst:1099
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.8.rst:1101
msgid ""
"Added :class:`AsyncMock` to support an asynchronous version of "
":class:`Mock`. Appropriate new assert functions for testing have been added "
"as well. (Contributed by Lisa Roach in :issue:`26467`)."
msgstr ""
"添加了 :class:`AsyncMock` 以支持异步版本的 :class:`Mock`。 同时也添加了相应的断言函数用于测试。 （由 Lisa "
"Roach 在 :issue:`26467` 中贡献。）"

#: ../../whatsnew/3.8.rst:1105
msgid ""
"Added :func:`~unittest.addModuleCleanup()` and "
":meth:`~unittest.TestCase.addClassCleanup()` to unittest to support cleanups"
" for :func:`~unittest.setUpModule()` and "
":meth:`~unittest.TestCase.setUpClass()`. (Contributed by Lisa Roach in "
":issue:`24412`.)"
msgstr ""
"unittest 添加了 :func:`~unittest.addModuleCleanup()` 和 "
":meth:`~unittest.TestCase.addClassCleanup()` 以支持对 "
":func:`~unittest.setUpModule()` 和 :meth:`~unittest.TestCase.setUpClass()` "
"进行清理。 （由 Lisa Roach 在 :issue:`24412` 中贡献。）"

#: ../../whatsnew/3.8.rst:1111
msgid ""
"Several mock assert functions now also print a list of actual calls upon "
"failure. (Contributed by Petter Strandmark in :issue:`35047`.)"
msgstr ""
"一些模拟断言函数现在也会在失败时打印一个实际调用列表。 （由 Petter Strandmark 在 :issue:`35047` 中贡献。）"

#: ../../whatsnew/3.8.rst:1115
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.8.rst:1117
msgid ""
":mod:`venv` now includes an ``Activate.ps1`` script on all platforms for "
"activating virtual environments under PowerShell Core 6.1. (Contributed by "
"Brett Cannon in :issue:`32718`.)"
msgstr ""
"现在 :mod:`venv` 在所有平台上都会包含 ``Activate.ps1`` 脚本用于在 PowerShell Core 6.1 "
"下激活虚拟环境。 （由 Brett Cannon 在 :issue:`32718` 中贡献。）"

#: ../../whatsnew/3.8.rst:1122
msgid "weakref"
msgstr "weakref"

#: ../../whatsnew/3.8.rst:1124
msgid ""
"The proxy objects returned by :func:`weakref.proxy` now support the matrix "
"multiplication operators ``@`` and ``@=`` in addition to the other numeric "
"operators. (Contributed by Mark Dickinson in :issue:`36669`.)"
msgstr ""
"由 :func:`weakref.proxy` 返回的代理对象现在除其他算术运算符外也支持矩阵乘法运算符 ``@`` 和 ``@=``。 （由 Mark"
" Dickinson 在 :issue:`36669` 中贡献。）"

#: ../../whatsnew/3.8.rst:1129
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.8.rst:1131
msgid ""
"As mitigation against DTD and external entity retrieval, the "
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process external"
" entities by default. (Contributed by Christian Heimes in :issue:`17239`.)"
msgstr ""
"作为对 DTD 和外部实体检索的缓解，在默认情况下 :mod:`xml.dom.minidom` 和 :mod:`xml.sax` "
"模块不再处理外部实体。 （由 Christian Heimes 在 :issue:`17239` 中贡献。）"

#: ../../whatsnew/3.8.rst:1136
msgid ""
"The ``.find*()`` methods in the :mod:`xml.etree.ElementTree` module support "
"wildcard searches like ``{*}tag`` which ignores the namespace and "
"``{namespace}*`` which returns all tags in the given namespace. (Contributed"
" by Stefan Behnel in :issue:`28238`.)"
msgstr ""
":mod:`xml.etree.ElementTree` 模块中的 ``.find*()`` 方法支持通配符搜索例如 "
"``{*}tag``，此搜索会忽略命名空间以及返回给定命名空间中所有标签的 ``{namespace}*``。 （由 Stefan Behnel 在 "
":issue:`28238` 中贡献。）"

#: ../../whatsnew/3.8.rst:1141
msgid ""
"The :mod:`xml.etree.ElementTree` module provides a new function "
":func:`–xml.etree.ElementTree.canonicalize()` that implements C14N 2.0. "
"(Contributed by Stefan Behnel in :issue:`13611`.)"
msgstr ""
":mod:`xml.etree.ElementTree` 模块提供了实现 C14N 2.0 的新函数 "
":func:`–xml.etree.ElementTree.canonicalize()`。 （由 Stefan Behnel 在 "
":issue:`13611` 中贡献。）"

#: ../../whatsnew/3.8.rst:1145
msgid ""
"The target object of :class:`xml.etree.ElementTree.XMLParser` can receive "
"namespace declaration events through the new callback methods ``start_ns()``"
" and ``end_ns()``.  Additionally, the "
":class:`xml.etree.ElementTree.TreeBuilder` target can be configured to "
"process events about comments and processing instructions to include them in"
" the generated tree. (Contributed by Stefan Behnel in :issue:`36676` and "
":issue:`36673`.)"
msgstr ""
":class:`xml.etree.ElementTree.XMLParser` 的目标对象可通过新的回调方法 ``start_ns()`` 和 "
"``end_ns()`` 来接受命名空间声明事件。 此外，:class:`xml.etree.ElementTree.TreeBuilder` "
"目标可被配置为处理有关注释和处理指令事件以将它们包含在所生成的树当中。 （由 Stefan Behnel 在 :issue:`36676` 和 "
":issue:`36673` 中贡献。）"

#: ../../whatsnew/3.8.rst:1154
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.8.rst:1156
msgid ""
"The :mod:`subprocess` module can now use the :func:`os.posix_spawn` function"
" in some cases for better performance. Currently, it is only used on macOS "
"and Linux (using glibc 2.24 or newer) if all these conditions are met:"
msgstr ""
":mod:`subprocess` 模块现在能在某些情况下使用 :func:`os.posix_spawn` 函数以获得更好的性能。 目前，它的使用仅限"
" macOS 和 Linux（使用 glibc 2.24 或更新版本），并要求满足以下条件："

#: ../../whatsnew/3.8.rst:1160
msgid "*close_fds* is false;"
msgstr "*close_fds* 为假值；"

#: ../../whatsnew/3.8.rst:1161
msgid ""
"*preexec_fn*, *pass_fds*, *cwd* and *start_new_session* parameters are not "
"set;"
msgstr "*preexec_fn*, *pass_fds*, *cwd* 和 *start_new_session* 形参未设置；"

#: ../../whatsnew/3.8.rst:1163
msgid "the *executable* path contains a directory."
msgstr "*executable* 路径包含一个目录。"

#: ../../whatsnew/3.8.rst:1165
msgid ""
"(Contributed by Joannah Nanjekye and Victor Stinner in :issue:`35537`.)"
msgstr "（由 Joannah Nanjekye 和 Victor Stinner 在 :issue:`35537` 中贡献。）"

#: ../../whatsnew/3.8.rst:1167
msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` and :func:`shutil.move` use platform-specific "
"\"fast-copy\" syscalls on Linux and macOS in order to copy the file more "
"efficiently. \"fast-copy\" means that the copying operation occurs within "
"the kernel, avoiding the use of userspace buffers in Python as in "
"\"``outfd.write(infd.read())``\". On Windows :func:`shutil.copyfile` uses a "
"bigger default buffer size (1 MiB instead of 16 KiB) and a "
":func:`memoryview`-based variant of :func:`shutil.copyfileobj` is used. The "
"speedup for copying a 512 MiB file within the same partition is about +26% "
"on Linux, +50% on macOS and +40% on Windows. Also, much less CPU cycles are "
"consumed. See :ref:`shutil-platform-dependent-efficient-copy-operations` "
"section. (Contributed by Giampaolo Rodola' in :issue:`33671`.)"
msgstr ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` 和 :func:`shutil.move` 在 Linux 和 macOS 上会使用平台专属的 "
"\"fast-copy\" 系统调用以提高效率。 \"fast-copy\" 意味着拷贝操作发生于内核中，从而避免使用 userspace "
"buffers in Python 中的用户空间缓冲区，例如 \"``outfd.write(infd.read())``\" 操作。 在 "
"Windows 上 :func:`shutil.copyfile` 会使用更大的默认缓冲区大小 (1 MiB 而不是 16 KiB) 并且使用 "
":func:`shutil.copyfileobj` 基于 :func:`memoryview` 的版本。 在同一分区内拷贝一个 512 MiB "
"的文件的速度提升在在 Linux 上约为 +26%，在 macOS 上为 +50%， 在 Windows 上为 +40%。 另外也会消耗更少的 CPU "
"周期。 参见 :ref:`shutil-platform-dependent-efficient-copy-operations` 一节。 （由 "
"Giampaolo Rodola' 在 :issue:`33671` 中贡献。）"

#: ../../whatsnew/3.8.rst:1183
msgid ""
":func:`shutil.copytree` uses :func:`os.scandir` function and all copy "
"functions depending from it use cached :func:`os.stat` values. The speedup "
"for copying a directory with 8000 files is around +9% on Linux, +20% on "
"Windows and +30% on a Windows SMB share. Also the number of :func:`os.stat` "
"syscalls is reduced by 38% making :func:`shutil.copytree` especially faster "
"on network filesystems. (Contributed by Giampaolo Rodola' in "
":issue:`33695`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1190
msgid ""
"The default protocol in the :mod:`pickle` module is now Protocol 4, first "
"introduced in Python 3.4.  It offers better performance and smaller size "
"compared to Protocol 3 available since Python 3.0."
msgstr ""

#: ../../whatsnew/3.8.rst:1194
msgid ""
"Removed one ``Py_ssize_t`` member from ``PyGC_Head``.  All GC tracked "
"objects (e.g. tuple, list, dict) size is reduced 4 or 8 bytes. (Contributed "
"by Inada Naoki in :issue:`33597`)"
msgstr ""

#: ../../whatsnew/3.8.rst:1198
msgid ""
":class:`uuid.UUID` now uses ``__slots__`` to reduce its memory footprint."
msgstr ""

#: ../../whatsnew/3.8.rst:1200
msgid ""
"Improved performance of :func:`operator.itemgetter` by 33%.  Optimized "
"argument handling and added a fast path for the common case of a single non-"
"negative integer index into a tuple (which is the typical use case in the "
"standard library).  (Contributed by Raymond Hettinger in :issue:`35664`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1206
msgid ""
"Sped-up field lookups in :func:`collections.namedtuple`.  They are now more "
"than two times faster, making them the fastest form of instance variable "
"lookup in Python. (Contributed by Raymond Hettinger, Pablo Galindo, and Joe "
"Jevnik, Serhiy Storchaka in :issue:`32492`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1211
msgid ""
"The :class:`list` constructor does not overallocate the internal item buffer"
" if the input iterable has a known length (the input implements "
"``__len__``). This makes the created list 12% smaller on average. "
"(Contributed by Raymond Hettinger and Pablo Galindo in :issue:`33234`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1216
msgid ""
"Doubled the speed of class variable writes.  When a non-dunder attribute was"
" updated, there was an unnecessary call to update slots. (Contributed by "
"Stefan Behnel, Pablo Galindo Salgado, Raymond Hettinger, Neil Schemenauer, "
"and Serhiy Storchaka in :issue:`36012`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1221
msgid ""
"Reduced an overhead of converting arguments passed to many builtin functions"
" and methods.  This sped up calling some simple builtin functions and "
"methods up to 20--50%.  (Contributed by Serhiy Storchaka in :issue:`23867`, "
":issue:`35582` and :issue:`36127`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1226
msgid ""
"``LOAD_GLOBAL`` instruction now uses new \"per opcode cache\" mechanism. It "
"is about 40% faster now.  (Contributed by Yury Selivanov and Inada Naoki in "
":issue:`26219`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1232
msgid "Build and C API Changes"
msgstr ""

#: ../../whatsnew/3.8.rst:1234
msgid ""
"Default :data:`sys.abiflags` became an empty string: the ``m`` flag for "
"pymalloc became useless (builds with and without pymalloc are ABI "
"compatible) and so has been removed. (Contributed by Victor Stinner in "
":issue:`36707`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1238
msgid "Example of changes:"
msgstr ""

#: ../../whatsnew/3.8.rst:1240
msgid ""
"Only ``python3.8`` program is installed, ``python3.8m`` program is gone."
msgstr ""

#: ../../whatsnew/3.8.rst:1241
msgid ""
"Only ``python3.8-config`` script is installed, ``python3.8m-config`` script "
"is gone."
msgstr ""

#: ../../whatsnew/3.8.rst:1243
msgid ""
"The ``m`` flag has been removed from the suffix of dynamic library "
"filenames: extension modules in the standard library as well as those "
"produced and installed by third-party packages, like those downloaded from "
"PyPI. On Linux, for example, the Python 3.7 suffix ``.cpython-37m-x86_64"
"-linux-gnu.so`` became ``.cpython-38-x86_64-linux-gnu.so`` in Python 3.8."
msgstr ""

#: ../../whatsnew/3.8.rst:1250
msgid ""
"The header files have been reorganized to better separate the different "
"kinds of APIs:"
msgstr ""

#: ../../whatsnew/3.8.rst:1253
msgid "``Include/*.h`` should be the portable public stable C API."
msgstr ""

#: ../../whatsnew/3.8.rst:1254
msgid ""
"``Include/cpython/*.h`` should be the unstable C API specific to CPython; "
"public API, with some private API prefixed by ``_Py`` or ``_PY``."
msgstr ""

#: ../../whatsnew/3.8.rst:1256
msgid ""
"``Include/internal/*.h`` is the private internal C API very specific to "
"CPython. This API comes with no backward compatibility warranty and should "
"not be used outside CPython. It is only exposed for very specific needs like"
" debuggers and profiles which has to access to CPython internals without "
"calling functions. This API is now installed by ``make install``."
msgstr ""

#: ../../whatsnew/3.8.rst:1262
msgid ""
"(Contributed by Victor Stinner in :issue:`35134` and :issue:`35081`, work "
"initiated by Eric Snow in Python 3.7)"
msgstr ""

#: ../../whatsnew/3.8.rst:1265
msgid ""
"Some macros have been converted to static inline functions: parameter types "
"and return type are well defined, they don't have issues specific to macros,"
" variables have a local scopes. Examples:"
msgstr ""

#: ../../whatsnew/3.8.rst:1269
msgid ":c:func:`Py_INCREF`, :c:func:`Py_DECREF`"
msgstr ""

#: ../../whatsnew/3.8.rst:1270
msgid ":c:func:`Py_XINCREF`, :c:func:`Py_XDECREF`"
msgstr ""

#: ../../whatsnew/3.8.rst:1271
msgid ":c:func:`PyObject_INIT`, :c:func:`PyObject_INIT_VAR`"
msgstr ""

#: ../../whatsnew/3.8.rst:1272
msgid ""
"Private functions: :c:func:`_PyObject_GC_TRACK`, "
":c:func:`_PyObject_GC_UNTRACK`, :c:func:`_Py_Dealloc`"
msgstr ""

#: ../../whatsnew/3.8.rst:1275
msgid "(Contributed by Victor Stinner in :issue:`35059`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1277
msgid ""
"The :c:func:`PyByteArray_Init` and :c:func:`PyByteArray_Fini` functions have"
" been removed. They did nothing since Python 2.7.4 and Python 3.2.0, were "
"excluded from the limited API (stable ABI), and were not documented. "
"(Contributed by Victor Stinner in :issue:`35713`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1282
msgid ""
"The result of :c:func:`PyExceptionClass_Name` is now of type ``const char "
"*`` rather of ``char *``. (Contributed by Serhiy Storchaka in "
":issue:`33818`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1286
msgid ""
"The duality of ``Modules/Setup.dist`` and ``Modules/Setup`` has been "
"removed.  Previously, when updating the CPython source tree, one had to "
"manually copy ``Modules/Setup.dist`` (inside the source tree) to "
"``Modules/Setup`` (inside the build tree) in order to reflect any changes "
"upstream.  This was of a small benefit to packagers at the expense of a "
"frequent annoyance to developers following CPython development, as "
"forgetting to copy the file could produce build failures."
msgstr ""

#: ../../whatsnew/3.8.rst:1294
msgid ""
"Now the build system always reads from ``Modules/Setup`` inside the source "
"tree.  People who want to customize that file are encouraged to maintain "
"their changes in a git fork of CPython or as patch files, as they would do "
"for any other change to the source tree."
msgstr ""

#: ../../whatsnew/3.8.rst:1299
msgid "(Contributed by Antoine Pitrou in :issue:`32430`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1301
msgid ""
"Functions that convert Python number to C integer like "
":c:func:`PyLong_AsLong` and argument parsing functions like "
":c:func:`PyArg_ParseTuple` with integer converting format units like ``'i'``"
" will now use the :meth:`~object.__index__` special method instead of "
":meth:`~object.__int__`, if available.  The deprecation warning will be "
"emitted for objects with the ``__int__()`` method but without the "
"``__index__()`` method (like :class:`~decimal.Decimal` and "
":class:`~fractions.Fraction`).  :c:func:`PyNumber_Check` will now return "
"``1`` for objects implementing ``__index__()``. :c:func:`PyNumber_Long`, "
":c:func:`PyNumber_Float` and :c:func:`PyFloat_AsDouble` also now use the "
"``__index__()`` method if available. (Contributed by Serhiy Storchaka in "
":issue:`36048` and :issue:`20092`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1315
msgid ""
"Heap-allocated type objects will now increase their reference count in "
":c:func:`PyObject_Init` (and its parallel macro ``PyObject_INIT``) instead "
"of in :c:func:`PyType_GenericAlloc`. Types that modify instance allocation "
"or deallocation may need to be adjusted. (Contributed by Eddie Elizondo in "
":issue:`35810`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1321
msgid ""
"The new function :c:func:`PyCode_NewWithPosOnlyArgs` allows to create code "
"objects like :c:func:`PyCode_New`, but with an extra *posonlyargcount* "
"parameter for indicating the number of positional-only arguments. "
"(Contributed by Pablo Galindo in :issue:`37221`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1328
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.8.rst:1330
msgid ""
"The distutils ``bdist_wininst`` command is now deprecated, use "
"``bdist_wheel`` (wheel packages) instead. (Contributed by Victor Stinner in "
":issue:`37481`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1334
msgid ""
"Deprecated methods ``getchildren()`` and ``getiterator()`` in the "
":mod:`~xml.etree.ElementTree` module emit now a :exc:`DeprecationWarning` "
"instead of :exc:`PendingDeprecationWarning`. They will be removed in Python "
"3.9. (Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1340
msgid ""
"Passing an object that is not an instance of "
":class:`concurrent.futures.ThreadPoolExecutor` to "
":meth:`asyncio.loop.set_default_executor()` is deprecated and will be "
"prohibited in Python 3.9. (Contributed by Elvis Pranskevichus in "
":issue:`34075`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1346
msgid ""
"The :meth:`__getitem__` methods of :class:`xml.dom.pulldom.DOMEventStream`, "
":class:`wsgiref.util.FileWrapper` and :class:`fileinput.FileInput` have been"
" deprecated."
msgstr ""

#: ../../whatsnew/3.8.rst:1350
msgid ""
"Implementations of these methods have been ignoring their *index* parameter,"
" and returning the next item instead."
msgstr ""

#: ../../whatsnew/3.8.rst:1353
msgid "(Contributed by Berker Peksag in :issue:`9372`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1355
msgid ""
"The :class:`typing.NamedTuple` class has deprecated the ``_field_types`` "
"attribute in favor of the ``__annotations__`` attribute which has the same "
"information.  (Contributed by Raymond Hettinger in :issue:`36320`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1359
msgid ""
":mod:`ast` classes ``Num``, ``Str``, ``Bytes``, ``NameConstant`` and "
"``Ellipsis`` are considered deprecated and will be removed in future Python "
"versions. :class:`~ast.Constant` should be used instead. (Contributed by "
"Serhiy Storchaka in :issue:`32892`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1364
msgid ""
":class:`ast.NodeVisitor` methods ``visit_Num()``, ``visit_Str()``, "
"``visit_Bytes()``, ``visit_NameConstant()`` and ``visit_Ellipsis()`` are "
"deprecated now and will not be called in future Python versions. Add the "
":meth:`~ast.NodeVisitor.visit_Constant` method to handle all constant nodes."
" (Contributed by Serhiy Storchaka in :issue:`36917`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1371
msgid ""
"The following functions and methods are deprecated in the :mod:`gettext` "
"module: :func:`~gettext.lgettext`, :func:`~gettext.ldgettext`, "
":func:`~gettext.lngettext` and :func:`~gettext.ldngettext`. They return "
"encoded bytes, and it's possible that you will get unexpected Unicode-"
"related exceptions if there are encoding problems with the translated "
"strings. It's much better to use alternatives which return Unicode strings "
"in Python 3. These functions have been broken for a long time."
msgstr ""

#: ../../whatsnew/3.8.rst:1379
msgid ""
"Function :func:`~gettext.bind_textdomain_codeset`, methods "
":meth:`~gettext.NullTranslations.output_charset` and "
":meth:`~gettext.NullTranslations.set_output_charset`, and the *codeset* "
"parameter of functions :func:`~gettext.translation` and "
":func:`~gettext.install` are also deprecated, since they are only used for "
"for the ``l*gettext()`` functions."
msgstr ""

#: ../../whatsnew/3.8.rst:1386
msgid "(Contributed by Serhiy Storchaka in :issue:`33710`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1388
msgid ""
"The :meth:`~threading.Thread.isAlive()` method of :class:`threading.Thread` "
"has been deprecated. (Contributed by Dong-hee Na in :issue:`35283`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1391
msgid ""
"Many builtin and extension functions that take integer arguments will now "
"emit a deprecation warning for :class:`~decimal.Decimal`\\ s, "
":class:`~fractions.Fraction`\\ s and any other objects that can be converted"
" to integers only with a loss (e.g. that have the :meth:`~object.__int__` "
"method but do not have the :meth:`~object.__index__` method).  In future "
"version they will be errors. (Contributed by Serhiy Storchaka in "
":issue:`36048`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1399
msgid "Deprecated passing the following arguments as keyword arguments:"
msgstr ""

#: ../../whatsnew/3.8.rst:1401
msgid ""
"*func* in :func:`functools.partialmethod`, :func:`weakref.finalize`, "
":meth:`profile.Profile.runcall`, :meth:`cProfile.Profile.runcall`, "
":meth:`bdb.Bdb.runcall`, :meth:`trace.Trace.runfunc` and "
":func:`curses.wrapper`."
msgstr ""

#: ../../whatsnew/3.8.rst:1405
msgid "*function* in :meth:`unittest.TestCase.addCleanup`."
msgstr ""

#: ../../whatsnew/3.8.rst:1406
msgid ""
"*fn* in the :meth:`~concurrent.futures.Executor.submit` method of "
":class:`concurrent.futures.ThreadPoolExecutor` and "
":class:`concurrent.futures.ProcessPoolExecutor`."
msgstr ""

#: ../../whatsnew/3.8.rst:1409
msgid ""
"*callback* in :meth:`contextlib.ExitStack.callback`, "
":meth:`contextlib.AsyncExitStack.callback` and "
":meth:`contextlib.AsyncExitStack.push_async_callback`."
msgstr ""

#: ../../whatsnew/3.8.rst:1412
msgid ""
"*c* and *typeid* in the :meth:`~multiprocessing.managers.Server.create` "
"method of :class:`multiprocessing.managers.Server` and "
":class:`multiprocessing.managers.SharedMemoryServer`."
msgstr ""

#: ../../whatsnew/3.8.rst:1415
msgid "*obj* in :func:`weakref.finalize`."
msgstr ""

#: ../../whatsnew/3.8.rst:1417
msgid ""
"In future releases of Python they will be :ref:`positional-only <positional-"
"only_parameter>`. (Contributed by Serhiy Storchaka in :issue:`36492`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1423
msgid "API and Feature Removals"
msgstr "API 与特性的移除"

#: ../../whatsnew/3.8.rst:1425
msgid "The following features and APIs have been removed from Python 3.8:"
msgstr ""

#: ../../whatsnew/3.8.rst:1427
msgid ""
"The :mod:`macpath` module, deprecated in Python 3.7, has been removed. "
"(Contributed by Victor Stinner in :issue:`35471`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1430 ../../whatsnew/3.8.rst:1544
msgid ""
"The function :func:`platform.popen` has been removed, it was deprecated "
"since Python 3.3: use :func:`os.popen` instead. (Contributed by Victor "
"Stinner in :issue:`35345`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1434
msgid ""
"The function :func:`time.clock` has been removed, it was deprecated since "
"Python 3.3: use :func:`time.perf_counter` or :func:`time.process_time` "
"instead, depending on your requirements, to have a well defined behavior. "
"(Contributed by Matthias Bussonnier in :issue:`36895`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1439
msgid ""
"The ``pyvenv`` script has been removed in favor of ``python3.8 -m venv`` to "
"help eliminate confusion as to what Python interpreter the ``pyvenv`` script"
" is tied to. (Contributed by Brett Cannon in :issue:`25427`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1443
msgid ""
"``parse_qs``, ``parse_qsl``, and ``escape`` are removed from :mod:`cgi` "
"module.  They are deprecated from Python 3.2 or older."
msgstr ""

#: ../../whatsnew/3.8.rst:1446
msgid ""
"``filemode`` function is removed from :mod:`tarfile` module. It is not "
"documented and deprecated since Python 3.3."
msgstr ""

#: ../../whatsnew/3.8.rst:1449
msgid ""
"The :class:`~xml.etree.ElementTree.XMLParser` constructor no longer accepts "
"the *html* argument.  It never had effect and was deprecated in Python 3.4. "
"All other parameters are now :ref:`keyword-only <keyword-only_parameter>`. "
"(Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1454
msgid ""
"Removed the ``doctype()`` method of "
":class:`~xml.etree.ElementTree.XMLParser`. (Contributed by Serhiy Storchaka "
"in :issue:`29209`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1457
msgid ""
"\"unicode_internal\" codec is removed. (Contributed by Inada Naoki in "
":issue:`36297`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1460
msgid ""
"The ``Cache`` and ``Statement`` objects of the :mod:`sqlite3` module are not"
" exposed to the user. (Contributed by Aviv Palivoda in :issue:`30262`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1464
msgid ""
"The ``bufsize`` keyword argument of :func:`fileinput.input` and "
":func:`fileinput.FileInput` which was ignored and deprecated since Python "
"3.6 has been removed. :issue:`36952` (Contributed by Matthias Bussonnier)"
msgstr ""

#: ../../whatsnew/3.8.rst:1468
msgid ""
"The functions :func:`sys.set_coroutine_wrapper` and "
":func:`sys.get_coroutine_wrapper` deprecated in Python 3.7 have been "
"removed; :issue:`36933` (Contributed by Matthias Bussonnier)"
msgstr ""

#: ../../whatsnew/3.8.rst:1474
msgid "Porting to Python 3.8"
msgstr ""

#: ../../whatsnew/3.8.rst:1476
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.8.rst:1481
msgid "Changes in Python behavior"
msgstr ""

#: ../../whatsnew/3.8.rst:1483
msgid ""
"Yield expressions (both ``yield`` and ``yield from`` clauses) are now "
"disallowed in comprehensions and generator expressions (aside from the "
"iterable expression in the leftmost :keyword:`!for` clause). (Contributed by"
" Serhiy Storchaka in :issue:`10544`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1488
msgid ""
"The compiler now produces a :exc:`SyntaxWarning` when identity checks "
"(``is`` and ``is not``) are used with certain types of literals (e.g. "
"strings, ints).  These can often work by accident in CPython, but are not "
"guaranteed by the language spec.  The warning advises users to use equality "
"tests (``==`` and ``!=``) instead. (Contributed by Serhiy Storchaka in "
":issue:`34850`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1495
msgid ""
"The CPython interpreter can swallow exceptions in some circumstances. In "
"Python 3.8 this happens in less cases.  In particular, exceptions raised "
"when getting the attribute from the type dictionary are no longer ignored.  "
"(Contributed by Serhiy Storchaka in :issue:`35459`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1500
msgid ""
"Removed ``__str__`` implementations from builtin types :class:`bool`, "
":class:`int`, :class:`float`, :class:`complex` and few classes from the "
"standard library.  They now inherit ``__str__()`` from :class:`object`. As "
"result, defining the ``__repr__()`` method in the subclass of these classes "
"will affect they string representation. (Contributed by Serhiy Storchaka in "
":issue:`36793`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1507
msgid ""
"On AIX, :attr:`sys.platform` doesn't contain the major version anymore. It "
"is always ``'aix'``, instead of ``'aix3'`` .. ``'aix7'``.  Since older "
"Python versions include the version number, it is recommended to always use "
"the ``sys.platform.startswith('aix')``. (Contributed by M. Felt in "
":issue:`36588`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1513
msgid ""
":c:func:`PyEval_AcquireLock` and :c:func:`PyEval_AcquireThread` now "
"terminate the current thread if called while the interpreter is finalizing, "
"making them consistent with :c:func:`PyEval_RestoreThread`, "
":c:func:`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`. If this "
"behaviour is not desired, guard the call by checking "
":c:func:`_Py_IsFinalizing` or :c:func:`sys.is_finalizing`."
msgstr ""

#: ../../whatsnew/3.8.rst:1521
msgid "Changes in the Python API"
msgstr "更改的Python API"

#: ../../whatsnew/3.8.rst:1523
msgid ""
"The :func:`os.getcwdb` function now uses the UTF-8 encoding on Windows, "
"rather than the ANSI code page: see :pep:`529` for the rationale. The "
"function is no longer deprecated on Windows. (Contributed by Victor Stinner "
"in :issue:`37412`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1528
msgid ""
":class:`subprocess.Popen` can now use :func:`os.posix_spawn` in some cases "
"for better performance. On Windows Subsystem for Linux and QEMU User "
"Emulation, Popen constructor using :func:`os.posix_spawn` no longer raise an"
" exception on errors like missing program, but the child process fails with "
"a non-zero :attr:`~Popen.returncode`. (Contributed by Joannah Nanjekye and "
"Victor Stinner in :issue:`35537`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1535
msgid ""
"The *preexec_fn* argument of * :class:`subprocess.Popen` is no longer "
"compatible with subinterpreters. The use of the parameter in a "
"subinterpreter now raises :exc:`RuntimeError`. (Contributed by Eric Snow in "
":issue:`34651`, modified by Christian Heimes in :issue:`37951`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1541
msgid ""
"The :meth:`imap.IMAP4.logout` method no longer ignores silently arbitrary "
"exceptions."
msgstr ""

#: ../../whatsnew/3.8.rst:1548
msgid ""
"The :func:`statistics.mode` function no longer raises an exception when "
"given multimodal data.  Instead, it returns the first mode encountered in "
"the input data.  (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1553
msgid ""
"The :meth:`~tkinter.ttk.Treeview.selection` method of the "
":class:`tkinter.ttk.Treeview` class no longer takes arguments.  Using it "
"with arguments for changing the selection was deprecated in Python 3.6.  Use"
" specialized methods like :meth:`~tkinter.ttk.Treeview.selection_set` for "
"changing the selection.  (Contributed by Serhiy Storchaka in "
":issue:`31508`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1559
msgid ""
"The :meth:`writexml`, :meth:`toxml` and :meth:`toprettyxml` methods of the "
":mod:`xml.dom.minidom` module, and :mod:`xml.etree` now preserve the "
"attribute order specified by the user. (Contributed by Diego Rojas and "
"Raymond Hettinger in :issue:`34160`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1564
msgid ""
"A :mod:`dbm.dumb` database opened with flags ``'r'`` is now read-only. "
":func:`dbm.dumb.open` with flags ``'r'`` and ``'w'`` no longer creates a "
"database if it does not exist. (Contributed by Serhiy Storchaka in "
":issue:`32749`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1569
msgid ""
"The ``doctype()`` method defined in a subclass of "
":class:`~xml.etree.ElementTree.XMLParser` will no longer be called and will "
"cause emitting a :exc:`RuntimeWarning` instead of a "
":exc:`DeprecationWarning`. Define the :meth:`doctype() "
"<xml.etree.ElementTree.TreeBuilder.doctype>` method on a target for handling"
" an XML doctype declaration. (Contributed by Serhiy Storchaka in "
":issue:`29209`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1576
msgid ""
"A :exc:`RuntimeError` is now raised when the custom metaclass doesn't "
"provide the ``__classcell__`` entry in the namespace passed to "
"``type.__new__``.  A :exc:`DeprecationWarning` was emitted in Python 3.6--"
"3.7.  (Contributed by Serhiy Storchaka in :issue:`23722`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1581
msgid ""
"The :class:`cProfile.Profile` class can now be used as a context manager. "
"(Contributed by Scott Sanderson in :issue:`29235`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1584
msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` and :func:`shutil.move` use platform-specific "
"\"fast-copy\" syscalls (see :ref:`shutil-platform-dependent-efficient-copy-"
"operations` section)."
msgstr ""

#: ../../whatsnew/3.8.rst:1589
msgid ""
":func:`shutil.copyfile` default buffer size on Windows was changed from 16 "
"KiB to 1 MiB."
msgstr ""

#: ../../whatsnew/3.8.rst:1592
msgid ""
"The ``PyGC_Head`` struct has changed completely.  All code that touched the "
"struct member should be rewritten.  (See :issue:`33597`)"
msgstr ""

#: ../../whatsnew/3.8.rst:1595
msgid ""
"The ``PyInterpreterState`` struct has been moved into the \"internal\" "
"header files (specifically Include/internal/pycore_pystate.h).  An opaque "
"``PyInterpreterState`` is still available as part of the public API (and "
"stable ABI).  The docs indicate that none of the struct's fields are public,"
" so we hope no one has been using them.  However, if you do rely on one or "
"more of those private fields and have no alternative then please open a BPO "
"issue.  We'll work on helping you adjust (possibly including adding accessor"
" functions to the public API).  (See :issue:`35886`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1605
msgid ""
"Asyncio tasks can now be named, either by passing the ``name`` keyword "
"argument to :func:`asyncio.create_task` or the "
":meth:`~asyncio.loop.create_task` event loop method, or by calling the "
":meth:`~asyncio.Task.set_name` method on the task object. The task name is "
"visible in the ``repr()`` output of :class:`asyncio.Task` and can also be "
"retrieved using the :meth:`~asyncio.Task.get_name` method."
msgstr ""

#: ../../whatsnew/3.8.rst:1612
msgid ""
"The :meth:`mmap.flush() <mmap.mmap.flush>` method now returns ``None`` on "
"success and raises an exception on error under all platforms.  Previously, "
"its behavior was platform-depended: a nonzero value was returned on success;"
" zero was returned on error under Windows.  A zero value was returned on "
"success; an exception was raised on error under Unix. (Contributed by Berker"
" Peksag in :issue:`2122`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1619
msgid ""
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process external"
" entities by default. (Contributed by Christian Heimes in :issue:`17239`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1623
msgid ""
"Deleting a key from a read-only :mod:`dbm` database (:mod:`dbm.dumb`, "
":mod:`dbm.gnu` or :mod:`dbm.ndbm`) raises :attr:`error` "
"(:exc:`dbm.dumb.error`, :exc:`dbm.gnu.error` or :exc:`dbm.ndbm.error`) "
"instead of :exc:`KeyError`. (Contributed by Xiang Zhang in :issue:`33106`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1634
msgid ""
"DLL dependencies for extension modules and DLLs loaded with :mod:`ctypes` on"
" Windows are now resolved more securely. Only the system paths, the "
"directory containing the DLL or PYD file, and directories added with "
":func:`~os.add_dll_directory` are searched for load-time dependencies. "
"Specifically, :envvar:`PATH` and the current working directory are no longer"
" used, and modifications to these will no longer have any effect on normal "
"DLL resolution. If your application relies on these mechanisms, you should "
"check for :func:`~os.add_dll_directory` and if it exists, use it to add your"
" DLLs directory while loading your library. Note that Windows 7 users will "
"need to ensure that Windows Update KB2533625 has been installed (this is "
"also verified by the installer). (See :issue:`36085`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1647
msgid ""
"The header files and functions related to pgen have been removed after its "
"replacement by a pure Python implementation. (Contributed by Pablo Galindo "
"in :issue:`36623`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1651
msgid ""
":class:`types.CodeType` has a new parameter in the second position of the "
"constructor (*posonlyargcount*) to support positional-only arguments defined"
" in :pep:`570`. The first argument (*argcount*) now represents the total "
"number of positional arguments (including positional-only arguments). A new "
"``replace()`` method of :class:`types.CodeType` can be used to make the code"
" future-proof."
msgstr ""

#: ../../whatsnew/3.8.rst:1660
msgid "Changes in the C API"
msgstr "C API 中的改变"

#: ../../whatsnew/3.8.rst:1662
msgid ""
"The :c:type:`PyCompilerFlags` structure gets a new *cf_feature_version* "
"field. It should be initialized to ``PY_MINOR_VERSION``. The field is "
"ignored by default, it is used if and only if ``PyCF_ONLY_AST`` flag is set "
"in *cf_flags*."
msgstr ""

#: ../../whatsnew/3.8.rst:1667
msgid ""
"The :c:func:`PyEval_ReInitThreads` function has been removed from the C API."
" It should not be called explicitly: use :c:func:`PyOS_AfterFork_Child` "
"instead. (Contributed by Victor Stinner in :issue:`36728`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1672
msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android "
"and Cygwin. When Python is embedded, ``libpython`` must not be loaded with "
"``RTLD_LOCAL``, but ``RTLD_GLOBAL`` instead. Previously, using "
"``RTLD_LOCAL``, it was already not possible to load C extensions which were "
"not linked to ``libpython``, like C extensions of the standard library built"
" by the ``*shared*`` section of ``Modules/Setup``. (Contributed by Victor "
"Stinner in :issue:`21536`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1680
msgid ""
"Use of ``#`` variants of formats in parsing or building value (e.g. "
":c:func:`PyArg_ParseTuple`, :c:func:`Py_BuildValue`, "
":c:func:`PyObject_CallFunction`, etc.) without ``PY_SSIZE_T_CLEAN`` defined "
"raises ``DeprecationWarning`` now. It will be removed in 3.10 or 4.0.  Read "
":ref:`arg-parsing` for detail. (Contributed by Inada Naoki in "
":issue:`36381`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1686
msgid ""
"Instances of heap-allocated types (such as those created with "
":c:func:`PyType_FromSpec`) hold a reference to their type object. Increasing"
" the reference count of these type objects has been moved from "
":c:func:`PyType_GenericAlloc` to the more low-level functions, "
":c:func:`PyObject_Init` and :c:func:`PyObject_INIT`. This makes types "
"created through :c:func:`PyType_FromSpec` behave like other classes in "
"managed code."
msgstr ""

#: ../../whatsnew/3.8.rst:1694
msgid "Statically allocated types are not affected."
msgstr ""

#: ../../whatsnew/3.8.rst:1696
msgid ""
"For the vast majority of cases, there should be no side effect. However, "
"types that manually increase the reference count after allocating an "
"instance (perhaps to work around the bug) may now become immortal. To avoid "
"this, these classes need to call Py_DECREF on the type object during "
"instance deallocation."
msgstr ""

#: ../../whatsnew/3.8.rst:1702
msgid ""
"To correctly port these types into 3.8, please apply the following changes:"
msgstr ""

#: ../../whatsnew/3.8.rst:1705
msgid ""
"Remove :c:macro:`Py_INCREF` on the type object after allocating an instance "
"- if any. This may happen after calling :c:func:`PyObject_New`, "
":c:func:`PyObject_NewVar`, :c:func:`PyObject_GC_New`, "
":c:func:`PyObject_GC_NewVar`, or any other custom allocator that uses "
":c:func:`PyObject_Init` or :c:func:`PyObject_INIT`."
msgstr ""

#: ../../whatsnew/3.8.rst:1712 ../../whatsnew/3.8.rst:1729
#: ../../whatsnew/3.8.rst:1746
msgid "Example::"
msgstr "示例::"

#: ../../whatsnew/3.8.rst:1726
msgid ""
"Ensure that all custom ``tp_dealloc`` functions of heap-allocated types "
"decrease the type's reference count."
msgstr ""

#: ../../whatsnew/3.8.rst:1741
msgid "(Contributed by Eddie Elizondo in :issue:`35810`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1743
msgid ""
"The :c:macro:`Py_DEPRECATED()` macro has been implemented for MSVC. The "
"macro now must be placed before the symbol name."
msgstr ""

#: ../../whatsnew/3.8.rst:1750
msgid "(Contributed by Zackery Spytz in :issue:`33407`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1752
msgid ""
"The interpreter does not pretend to support binary compatibility of "
"extension types across feature releases, anymore.  A :c:type:`PyTypeObject` "
"exported by a third-party extension module is supposed to have all the slots"
" expected in the current Python version, including "
":c:member:`~PyTypeObject.tp_finalize` (:const:`Py_TPFLAGS_HAVE_FINALIZE` is "
"not checked anymore before reading :c:member:`~PyTypeObject.tp_finalize`)."
msgstr ""

#: ../../whatsnew/3.8.rst:1759
msgid "(Contributed by Antoine Pitrou in :issue:`32388`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1761
msgid ""
"The :c:func:`PyCode_New` has a new parameter in the second position "
"(*posonlyargcount*) to support :pep:`570`, indicating the number of "
"positional-only arguments."
msgstr ""

#: ../../whatsnew/3.8.rst:1764
msgid ""
"The functions :c:func:`PyNode_AddChild` and :c:func:`PyParser_AddToken` now "
"accept two additional ``int`` arguments *end_lineno* and *end_col_offset*."
msgstr ""

#: ../../whatsnew/3.8.rst:1769
msgid ""
"The :file:`libpython38.a` file to allow MinGW tools to link directly against"
" :file:`python38.dll` is no longer included in the regular Windows "
"distribution. If you require this file, it may be generated with the "
"``gendef`` and ``dlltool`` tools, which are part of the MinGW binutils "
"package::"
msgstr ""

#: ../../whatsnew/3.8.rst:1777
msgid ""
"The location of an installed :file:`pythonXY.dll` will depend on the "
"installation options and the version and language of Windows. See :ref"
":`using-on-windows` for more information. The resulting library should be "
"placed in the same directory as :file:`pythonXY.lib`, which is generally the"
" :file:`libs` directory under your Python installation."
msgstr ""

#: ../../whatsnew/3.8.rst:1787
msgid "CPython bytecode changes"
msgstr "CPython 字节码的改变"

#: ../../whatsnew/3.8.rst:1789
msgid ""
"The interpreter loop  has been simplified by moving the logic of unrolling "
"the stack of blocks into the compiler.  The compiler emits now explicit "
"instructions for adjusting the stack of values and calling the cleaning-up "
"code for :keyword:`break`, :keyword:`continue` and :keyword:`return`."
msgstr ""

#: ../../whatsnew/3.8.rst:1795
msgid ""
"Removed opcodes :opcode:`BREAK_LOOP`, :opcode:`CONTINUE_LOOP`, "
":opcode:`SETUP_LOOP` and :opcode:`SETUP_EXCEPT`.  Added new opcodes "
":opcode:`ROT_FOUR`, :opcode:`BEGIN_FINALLY`, :opcode:`CALL_FINALLY` and "
":opcode:`POP_FINALLY`.  Changed the behavior of :opcode:`END_FINALLY` and "
":opcode:`WITH_CLEANUP_START`."
msgstr ""

#: ../../whatsnew/3.8.rst:1801
msgid ""
"(Contributed by Mark Shannon, Antoine Pitrou and Serhiy Storchaka in "
":issue:`17611`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1804
msgid ""
"Added new opcode :opcode:`END_ASYNC_FOR` for handling exceptions raised when"
" awaiting a next item in an :keyword:`async for` loop. (Contributed by "
"Serhiy Storchaka in :issue:`33041`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1808
msgid ""
"The :opcode:`MAP_ADD` now expects the value as the first element in the "
"stack and the key as the second element. This change was made so the key is "
"always evaluated before the value in dictionary comprehensions, as proposed "
"by :pep:`572`. (Contributed by Jörn Heissler in :issue:`35224`.)"
msgstr ""

#: ../../whatsnew/3.8.rst:1815
msgid "Demos and Tools"
msgstr ""

#: ../../whatsnew/3.8.rst:1817
msgid ""
"Added a benchmark script for timing various ways to access variables: "
"``Tools/scripts/var_access_benchmark.py``. (Contributed by Raymond Hettinger"
" in :issue:`35884`.)"
msgstr ""
