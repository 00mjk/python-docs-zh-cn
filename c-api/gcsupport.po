# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# makdon <makdon@makdon.me>, 2019
# Freesand Leo <yuqinju@163.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-01 10:14+0900\n"
"PO-Revision-Date: 2017-02-16 17:35+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/gcsupport.rst:6
msgid "Supporting Cyclic Garbage Collection"
msgstr "使对象类型支持循环垃圾回收"

#: ../../c-api/gcsupport.rst:8
msgid ""
"Python's support for detecting and collecting garbage which involves "
"circular references requires support from object types which are "
"\"containers\" for other objects which may also be containers.  Types which "
"do not store references to other objects, or which only store references to "
"atomic types (such as numbers or strings), do not need to provide any "
"explicit support for garbage collection."
msgstr ""

#: ../../c-api/gcsupport.rst:15
msgid ""
"To create a container type, the :c:member:`~PyTypeObject.tp_flags` field of "
"the type object must include the :const:`Py_TPFLAGS_HAVE_GC` and provide an "
"implementation of the :c:member:`~PyTypeObject.tp_traverse` handler.  If "
"instances of the type are mutable, a :c:member:`~PyTypeObject.tp_clear` "
"implementation must also be provided."
msgstr ""

#: ../../c-api/gcsupport.rst:24
msgid ""
"Objects with a type with this flag set must conform with the rules "
"documented here.  For convenience these objects will be referred to as "
"container objects."
msgstr "设置了此标志位的类型的对象必须符合此处记录的规则。为方便起见，下文把这些对象称为容器对象。"

#: ../../c-api/gcsupport.rst:28
msgid "Constructors for container types must conform to two rules:"
msgstr "容器类型的构造函数必须符合两个规则："

#: ../../c-api/gcsupport.rst:30
msgid ""
"The memory for the object must be allocated using :c:func:`PyObject_GC_New` "
"or :c:func:`PyObject_GC_NewVar`."
msgstr ""
"必须使用 :c:func:`PyObject_GC_New` 或 :c:func:`PyObject_GC_NewVar` 为这些对象分配内存。"

#: ../../c-api/gcsupport.rst:33
msgid ""
"Once all the fields which may contain references to other containers are "
"initialized, it must call :c:func:`PyObject_GC_Track`."
msgstr "初始化了所有可能包含其他容器的引用的字段后，它必须调用 :c:func:`PyObject_GC_Track` 。"

#: ../../c-api/gcsupport.rst:39
msgid ""
"Analogous to :c:func:`PyObject_New` but for container objects with the "
":const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""
"类似于 :c:func:`PyObject_New` ，适用于设置了 :const:`Py_TPFLAGS_HAVE_GC` 标签的容器对象。"

#: ../../c-api/gcsupport.rst:45
msgid ""
"Analogous to :c:func:`PyObject_NewVar` but for container objects with the "
":const:`Py_TPFLAGS_HAVE_GC` flag set."
msgstr ""
"类似于 :c:func:`PyObject_NewVar` ，适用于设置了 :const:`Py_TPFLAGS_HAVE_GC` 标签的容器对象。"

#: ../../c-api/gcsupport.rst:51
msgid ""
"Resize an object allocated by :c:func:`PyObject_NewVar`.  Returns the "
"resized object or *NULL* on failure.  *op* must not be tracked by the "
"collector yet."
msgstr ""
"为 :c:func:`PyObject_NewVar` 分配的对象重新设置大小，并返回调整大小后的对象。当重分配失败时返回 *NULL* 。*op* "
"必须没有被垃圾回收器监控。"

#: ../../c-api/gcsupport.rst:57
msgid ""
"Adds the object *op* to the set of container objects tracked by the "
"collector.  The collector can run at unexpected times so objects must be "
"valid while being tracked.  This should be called once all the fields "
"followed by the :c:member:`~PyTypeObject.tp_traverse` handler become valid, "
"usually near the end of the constructor."
msgstr ""
"把对象 *op* 加入到垃圾回收器跟踪的容器对象中。对象在被回收器跟踪时必须保持有效的，因为回收器可能在任何时候开始运行。在 "
":c:member:`~PyTypeObject.tp_traverse` 处理前的所有字段变为有效后，必须调用此函数，通常在靠近构造函数末尾的位置。"

#: ../../c-api/gcsupport.rst:66
msgid ""
"A macro version of :c:func:`PyObject_GC_Track`.  It should not be used for "
"extension modules."
msgstr ":c:func:`PyObject_GC_Track` 的宏实现版本。它不能被用于扩展模块。"

#: ../../c-api/gcsupport.rst:69 ../../c-api/gcsupport.rst:101
msgid "This macro is removed from Python 3.8."
msgstr "这个宏在 Python 3.8 中被移除。"

#: ../../c-api/gcsupport.rst:72
msgid ""
"Similarly, the deallocator for the object must conform to a similar pair of "
"rules:"
msgstr "同样的，对象的释放器必须符合两个类似的规则："

#: ../../c-api/gcsupport.rst:75
msgid ""
"Before fields which refer to other containers are invalidated, "
":c:func:`PyObject_GC_UnTrack` must be called."
msgstr "在引用其它容器的字段失效前，必须调用 :c:func:`PyObject_GC_UnTrack` 。"

#: ../../c-api/gcsupport.rst:78
msgid ""
"The object's memory must be deallocated using :c:func:`PyObject_GC_Del`."
msgstr "必须使用 :c:func:`PyObject_GC_Del` 释放对象的内存。"

#: ../../c-api/gcsupport.rst:83
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_GC_New` or "
":c:func:`PyObject_GC_NewVar`."
msgstr ""
"释放对象的内存，该对象初始化时由 :c:func:`PyObject_GC_New` 或 :c:func:`PyObject_GC_NewVar` "
"分配内存。"

#: ../../c-api/gcsupport.rst:89
msgid ""
"Remove the object *op* from the set of container objects tracked by the "
"collector.  Note that :c:func:`PyObject_GC_Track` can be called again on "
"this object to add it back to the set of tracked objects.  The deallocator "
"(:c:member:`~PyTypeObject.tp_dealloc` handler) should call this for the "
"object before any of the fields used by the "
":c:member:`~PyTypeObject.tp_traverse` handler become invalid."
msgstr ""
"从回收器跟踪的容器对象集合中移除 *op* 对象。 请注意可以在此对象上再次调用 :c:func:`PyObject_GC_Track` "
"以将其加回到被跟踪对象集合。 释放器 (:c:member:`~PyTypeObject.tp_dealloc` 句柄) 应当在 "
":c:member:`~PyTypeObject.tp_traverse` 句柄所使用的任何字段失效之前为对象调用此函数。"

#: ../../c-api/gcsupport.rst:98
msgid ""
"A macro version of :c:func:`PyObject_GC_UnTrack`.  It should not be used for"
" extension modules."
msgstr ""

#: ../../c-api/gcsupport.rst:104
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` handler accepts a function "
"parameter of this type:"
msgstr ""

#: ../../c-api/gcsupport.rst:109
msgid ""
"Type of the visitor function passed to the "
":c:member:`~PyTypeObject.tp_traverse` handler. The function should be called"
" with an object to traverse as *object* and the third parameter to the "
":c:member:`~PyTypeObject.tp_traverse` handler as *arg*.  The Python core "
"uses several visitor functions to implement cyclic garbage detection; it's "
"not expected that users will need to write their own visitor functions."
msgstr ""

#: ../../c-api/gcsupport.rst:116
msgid ""
"The :c:member:`~PyTypeObject.tp_traverse` handler must have the following "
"type:"
msgstr ""

#: ../../c-api/gcsupport.rst:121
msgid ""
"Traversal function for a container object.  Implementations must call the "
"*visit* function for each object directly contained by *self*, with the "
"parameters to *visit* being the contained object and the *arg* value passed "
"to the handler.  The *visit* function must not be called with a *NULL* "
"object argument.  If *visit* returns a non-zero value that value should be "
"returned immediately."
msgstr ""

#: ../../c-api/gcsupport.rst:128
msgid ""
"To simplify writing :c:member:`~PyTypeObject.tp_traverse` handlers, a "
":c:func:`Py_VISIT` macro is provided.  In order to use this macro, the "
":c:member:`~PyTypeObject.tp_traverse` implementation must name its arguments"
" exactly *visit* and *arg*:"
msgstr ""

#: ../../c-api/gcsupport.rst:135
msgid ""
"If *o* is not *NULL*, call the *visit* callback, with arguments *o* and "
"*arg*.  If *visit* returns a non-zero value, then return it. Using this "
"macro, :c:member:`~PyTypeObject.tp_traverse` handlers look like::"
msgstr ""

#: ../../c-api/gcsupport.rst:148
msgid ""
"The :c:member:`~PyTypeObject.tp_clear` handler must be of the "
":c:type:`inquiry` type, or *NULL* if the object is immutable."
msgstr ""

#: ../../c-api/gcsupport.rst:154
msgid ""
"Drop references that may have created reference cycles.  Immutable objects "
"do not have to define this method since they can never directly create "
"reference cycles.  Note that the object must still be valid after calling "
"this method (don't just call :c:func:`Py_DECREF` on a reference).  The "
"collector will call this method if it detects that this object is involved "
"in a reference cycle."
msgstr ""
