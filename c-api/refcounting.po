# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Freesand Leo <yuqinju@163.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-31 03:57+0000\n"
"PO-Revision-Date: 2019-09-01 03:42+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr "引用计数"

#: ../../c-api/refcounting.rst:10
msgid ""
"The macros in this section are used for managing reference counts of Python "
"objects."
msgstr "本节介绍的宏被用于管理 Python 对象的引用计数。"

#: ../../c-api/refcounting.rst:16
msgid ""
"Increment the reference count for object *o*.  The object must not be "
"``NULL``; if you aren't sure that it isn't ``NULL``, use "
":c:func:`Py_XINCREF`."
msgstr ""

#: ../../c-api/refcounting.rst:22
msgid ""
"Increment the reference count for object *o*.  The object may be ``NULL``, "
"in which case the macro has no effect."
msgstr ""

#: ../../c-api/refcounting.rst:28
msgid ""
"Decrement the reference count for object *o*.  The object must not be "
"``NULL``; if you aren't sure that it isn't ``NULL``, use "
":c:func:`Py_XDECREF`.  If the reference count reaches zero, the object's "
"type's deallocation function (which must not be ``NULL``) is invoked."
msgstr ""

#: ../../c-api/refcounting.rst:35
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked "
"(e.g. when a class instance with a :meth:`__del__` method is deallocated).  "
"While exceptions in such code are not propagated, the executed code has free"
" access to all Python global variables.  This means that any object that is "
"reachable from a global variable should be in a consistent state before "
":c:func:`Py_DECREF` is invoked.  For example, code to delete an object from "
"a list should copy a reference to the deleted object in a temporary "
"variable, update the list data structure, and then call :c:func:`Py_DECREF` "
"for the temporary variable."
msgstr ""
"释放函数可导致任意 Python 代码被发起调用（例如当一个带有 :meth:`__del__` 方法的类实例被释放时就是如此）。 "
"虽然此类代码中的异常不会被传播，但被执行的代码能够自由访问所有 Python 全局变量。 这意味着任何可通过全局变量获取的对象在  "
":c:func:`Py_DECREF` 被发起调用之前都应当处于完好状态。 "
"例如，从一个列表中删除对象的代码应当将被删除对象的引用拷贝到一个临时变量中，更新列表数据结构，然后再为临时变量调用 "
":c:func:`Py_DECREF`。"

#: ../../c-api/refcounting.rst:47
msgid ""
"Decrement the reference count for object *o*.  The object may be ``NULL``, "
"in which case the macro has no effect; otherwise the effect is the same as "
"for :c:func:`Py_DECREF`, and the same warning applies."
msgstr ""

#: ../../c-api/refcounting.rst:54
msgid ""
"Decrement the reference count for object *o*.  The object may be ``NULL``, "
"in which case the macro has no effect; otherwise the effect is the same as "
"for :c:func:`Py_DECREF`, except that the argument is also set to ``NULL``.  "
"The warning for :c:func:`Py_DECREF` does not apply with respect to the "
"object passed because the macro carefully uses a temporary variable and sets"
" the argument to ``NULL`` before decrementing its reference count."
msgstr ""

#: ../../c-api/refcounting.rst:61
msgid ""
"It is a good idea to use this macro whenever decrementing the value of a "
"variable that might be traversed during garbage collection."
msgstr "当要减少在垃圾回收期间可能会被遍历的变量的值时，使用该宏是一个好主意。"

#: ../../c-api/refcounting.rst:65
msgid ""
"The following functions are for runtime dynamic embedding of Python: "
"``Py_IncRef(PyObject *o)``, ``Py_DecRef(PyObject *o)``. They are simply "
"exported function versions of :c:func:`Py_XINCREF` and :c:func:`Py_XDECREF`,"
" respectively."
msgstr ""
"以下函数适用于 Python 的运行时动态嵌入: ``Py_IncRef(PyObject *o)``, ``Py_DecRef(PyObject "
"*o)``。 它们分别只是 :c:func:`Py_XINCREF` 和 :c:func:`Py_XDECREF` 的简单导出函数版本。"

#: ../../c-api/refcounting.rst:70
msgid ""
"The following functions or macros are only for use within the interpreter "
"core: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, "
":c:func:`_Py_NewReference`, as well as the global variable "
":c:data:`_Py_RefTotal`."
msgstr ""
"以下函数或宏仅可在解释器核心内部使用: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, "
":c:func:`_Py_NewReference` 以及全局变量 :c:data:`_Py_RefTotal`。"
