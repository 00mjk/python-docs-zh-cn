# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# hanfeng <appweb.cn@gmail.com>, 2018
# Freesand Leo <yuqinju@163.com>, 2018
# Meng Du <alphanow@gmail.com>, 2019
# tom smith <ppcfish@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-01 10:14+0900\n"
"PO-Revision-Date: 2017-02-16 23:42+0000\n"
"Last-Translator: tom smith <ppcfish@gmail.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/windows.rst:7
msgid "Using Python on Windows"
msgstr "在Windows上使用 Python"

#: ../../using/windows.rst:12
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr "本文档旨在概述在 Microsoft Windows 上使用 Python 时应了解的特定于 Windows 的行为。"

#: ../../using/windows.rst:15
msgid ""
"Unlike most Unix systems and services, Windows does not include a system "
"supported installation of Python. To make Python available, the CPython team"
" has compiled Windows installers (MSI packages) with every `release "
"<https://www.python.org/download/releases/>`_ for many years. These "
"installers are primarily intended to add a per-user installation of Python, "
"with the core interpreter and library being used by a single user. The "
"installer is also able to install for all users of a single machine, and a "
"separate ZIP file is available for application-local distributions."
msgstr ""
"与大多数UNIX系统和服务不同，Windows系统没有预安装Python。为了使python可用，很多年来CPython 团队已经编译了每一个 "
"`release <https://www.python.org/download/releases/>`_ 版本的Windows安装程序（MSI "
"包）。这些安装程序主要用于每个用户单独安装Python时，添加核心解释器和库。安装程序还可以为一台机器的所有用户安装，并且可以为应用程序本地分发提供单独的zip文件。"

#: ../../using/windows.rst:24
msgid ""
"As specified in :pep:`11`, a Python release only supports a Windows platform"
" while Microsoft considers the platform under extended support. This means "
"that Python |version| supports Windows Vista and newer. If you require "
"Windows XP support then please install Python 3.4."
msgstr ""
"如 :pep:`11` 中所述，Python 仅支持微软产品支持生命周期内的Windows 版本。这意味着 Python |version| "
"支持Windows Vista和更新版本。如果需要Windows XP支持，请安装Python 3.4。"

#: ../../using/windows.rst:29
msgid ""
"There are a number of different installers available for Windows, each with "
"certain benefits and downsides."
msgstr "Windows提供了许多不同的安装程序，每个安装程序都有一定的好处和缺点。"

#: ../../using/windows.rst:32
msgid ""
":ref:`windows-full` contains all components and is the best option for "
"developers using Python for any kind of project."
msgstr " :ref:`windows-full` 包含所有组件，对于使用Python 进行任何类型项目的开发人员而言，它是最佳选择。"

#: ../../using/windows.rst:35
msgid ""
":ref:`windows-store` is a simple installation of Python that is suitable for"
" running scripts and packages, and using IDLE or other development "
"environments. It requires Windows 10, but can be safely installed without "
"corrupting other programs. It also provides many convenient commands for "
"launching Python and its tools."
msgstr ""
" :ref:`windows-store` 包是一个简单的Python 安装，适用于运行脚本和包，以及使用IDLE或其他开发环境。 它需要Windows"
" 10，但可以安全地安装而不会破坏其他程序。 它还提供了许多方便的命令来启动Python及其工具。"

#: ../../using/windows.rst:41
msgid ""
":ref:`windows-nuget` are lightweight installations intended for continuous "
"integration systems. It can be used to build Python packages or run scripts,"
" but is not updateable and has no user interface tools."
msgstr ""
":ref:`windows-nuget` 包是用于持续集成系统的轻量级安装。它可用于构建Python包或运行脚本，但不可更新且没有用户界面工具。"

#: ../../using/windows.rst:45
msgid ""
":ref:`windows-embeddable` is a minimal package of Python suitable for "
"embedding into a larger application."
msgstr " :ref:`windows-embeddable` 包是Python的最小安装包，适合嵌入到更大的应用程序中。"

#: ../../using/windows.rst:52
msgid "The full installer"
msgstr "完整安装程序"

#: ../../using/windows.rst:55
msgid "Installation steps"
msgstr "安装步骤"

#: ../../using/windows.rst:57
msgid ""
"Four Python |version| installers are available for download - two each for "
"the 32-bit and 64-bit versions of the interpreter. The *web installer* is a "
"small initial download, and it will automatically download the required "
"components as necessary. The *offline installer* includes the components "
"necessary for a default installation and only requires an internet "
"connection for optional features. See :ref:`install-layout-option` for other"
" ways to avoid downloading during installation."
msgstr ""
"四个 Python |version| 安装程序可供下载 - 32位和64位版本的各有两个。 *web installer* "
"（网络安装版）是一个小的初始化工具，它将在安装过程中，根据需要自动下载所需的组件。 *offline installer* "
"（离线安装版）包含默认安装所需的组件，可选择功能需要Internet连接下载。请参阅 :ref:`install-layout-option` "
"以了解在安装过程中避免下载的其他方法。"

#: ../../using/windows.rst:65
msgid "After starting the installer, one of two options may be selected:"
msgstr "启动安装程序后，可以选择以下两个选项之一："

#: ../../using/windows.rst:69
msgid "If you select \"Install Now\":"
msgstr "如果选择“立即安装”："

#: ../../using/windows.rst:71
msgid ""
"You will *not* need to be an administrator (unless a system update for the C"
" Runtime Library is required or you install the :ref:`launcher` for all "
"users)"
msgstr "您 *不* 需要成为管理员（除非需要对C运行库进行系统更新，或者为所有用户安装 :ref:`launcher` ）"

#: ../../using/windows.rst:74
msgid "Python will be installed into your user directory"
msgstr "Python将安装到您的用户目录中"

#: ../../using/windows.rst:75
msgid ""
"The :ref:`launcher` will be installed according to the option at the bottom "
"of the first page"
msgstr " :ref:`launcher` 将根据第一页底部的选项安装"

#: ../../using/windows.rst:77
msgid "The standard library, test suite, launcher and pip will be installed"
msgstr "将安装标准库，测试套件，启动器和pip"

#: ../../using/windows.rst:78
msgid ""
"If selected, the install directory will be added to your :envvar:`PATH`"
msgstr "如果选择将安装目录将添加到 :envvar:`PATH` "

#: ../../using/windows.rst:79
msgid "Shortcuts will only be visible for the current user"
msgstr "快捷方式仅对当前用户可见"

#: ../../using/windows.rst:81
msgid ""
"Selecting \"Customize installation\" will allow you to select the features "
"to install, the installation location and other options or post-install "
"actions. To install debugging symbols or binaries, you will need to use this"
" option."
msgstr "选择“自定义安装”将允许您选择要安装的功能，安装位置和其他选项或安装后的操作。如果要安装调试符号或二进制文件，您需要使用此选项。"

#: ../../using/windows.rst:85
msgid ""
"To perform an all-users installation, you should select \"Customize "
"installation\". In this case:"
msgstr "如要为全部用户安装，应选择“自定义安装”。在这种情况下:"

#: ../../using/windows.rst:88
msgid "You may be required to provide administrative credentials or approval"
msgstr "您可能需要提供管理凭据或批准"

#: ../../using/windows.rst:89
msgid "Python will be installed into the Program Files directory"
msgstr "Python 将安装到Program Files目录中"

#: ../../using/windows.rst:90
msgid "The :ref:`launcher` will be installed into the Windows directory"
msgstr " :ref:`launcher` 将安装到Windows目录中"

#: ../../using/windows.rst:91
msgid "Optional features may be selected during installation"
msgstr "安装期间可以选择可选功能"

#: ../../using/windows.rst:92
msgid "The standard library can be pre-compiled to bytecode"
msgstr "标准库可以预编译为字节码"

#: ../../using/windows.rst:93
msgid ""
"If selected, the install directory will be added to the system "
":envvar:`PATH`"
msgstr "如果选中，安装目录将添加到系统 :envvar:`PATH` "

#: ../../using/windows.rst:94
msgid "Shortcuts are available for all users"
msgstr "快捷方式所有用户可用"

#: ../../using/windows.rst:99
msgid "Removing the MAX_PATH Limitation"
msgstr "删除 MAX_PATH 限制"

#: ../../using/windows.rst:101
msgid ""
"Windows historically has limited path lengths to 260 characters. This meant "
"that paths longer than this would not resolve and errors would result."
msgstr "Windows历史上的路径长度限制为260个字符。这意味着长于此的路径将无法解决并导致错误。"

#: ../../using/windows.rst:104
msgid ""
"In the latest versions of Windows, this limitation can be expanded to "
"approximately 32,000 characters. Your administrator will need to activate "
"the \"Enable Win32 long paths\" group policy, or set the registry value "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem@LongPathsEnabled``"
" to ``1``."
msgstr ""
"在最新版本的Windows中，此限制可以扩展到大约32,000个字符。需要管理员权限激活“启用Win32长路径”组策略，或将注册表值 "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem@LongPathsEnabled``"
" 设置为 ``1``。"

#: ../../using/windows.rst:110
msgid ""
"This allows the :func:`open` function, the :mod:`os` module and most other "
"path functionality to accept and return paths longer than 260 characters "
"when using strings. (Use of bytes as paths is deprecated on Windows, and "
"this feature is not available when using bytes.)"
msgstr ""
"这允许 :func:`open` 函数 :mod:`os` 模块和大多数其他路径功能，在使用字符串时接受并返回长度超过260个字符的路径。 "
"（在Windows上不推荐使用字节作为路径，并且在使用字节时此功能不可用。）"

#: ../../using/windows.rst:115
msgid "After changing the above option, no further configuration is required."
msgstr "更改上述选项后，无需进一步配置。"

#: ../../using/windows.rst:119
msgid "Support for long paths was enabled in Python."
msgstr "Python中启用了对长路径的支持。"

#: ../../using/windows.rst:124
msgid "Installing Without UI"
msgstr "无UI 安装"

#: ../../using/windows.rst:126
msgid ""
"All of the options available in the installer UI can also be specified from "
"the command line, allowing scripted installers to replicate an installation "
"on many machines without user interaction.  These options may also be set "
"without suppressing the UI in order to change some of the defaults."
msgstr ""
"安装程序UI中的所有选项也可以从命令行指定，允许脚本安装程序在许多机器上复制安装，而无需用户交互。还可以在不禁用UI的情况下设置这些选项，以更改一些默认值。"

#: ../../using/windows.rst:131
msgid ""
"To completely hide the installer UI and install Python silently, pass the "
"``/quiet`` option. To skip past the user interaction but still display "
"progress and errors, pass the ``/passive`` option. The ``/uninstall`` option"
" may be passed to immediately begin removing Python - no prompt will be "
"displayed."
msgstr ""
"要完全隐藏安装程序UI并静默安装Python，请使用 ``/quiet`` 选项。要跳过用户交互但仍然显示进度和错误，请使用 ``/passive`` "
"选项。可以通过 ``/uninstall`` 选项立即开始删除Python  - -   不会显示任何提示。"

#: ../../using/windows.rst:137
msgid ""
"All other options are passed as ``name=value``, where the value is usually "
"``0`` to disable a feature, ``1`` to enable a feature, or a path. The full "
"list of available options is shown below."
msgstr ""
"所有其他选项都传递为 ``name=value`` ，其中值通常是 ``0`` 来禁用某个特性， ``1`` "
"来启用某个特性或路径。可用选项的完整列表如下所示。"

#: ../../using/windows.rst:142
msgid "Name"
msgstr "名称"

#: ../../using/windows.rst:142
msgid "Description"
msgstr "描述"

#: ../../using/windows.rst:142
msgid "Default"
msgstr "默认值"

#: ../../using/windows.rst:144
msgid "InstallAllUsers"
msgstr "InstallAllUsers"

#: ../../using/windows.rst:144
msgid "Perform a system-wide installation."
msgstr "执行系统范围的安装。"

#: ../../using/windows.rst:144 ../../using/windows.rst:165
#: ../../using/windows.rst:168 ../../using/windows.rst:177
#: ../../using/windows.rst:195 ../../using/windows.rst:203
#: ../../using/windows.rst:206
msgid "0"
msgstr "0"

#: ../../using/windows.rst:146
msgid "TargetDir"
msgstr "TargetDir"

#: ../../using/windows.rst:146
msgid "The installation directory"
msgstr "安装目录"

#: ../../using/windows.rst:146
msgid "Selected based on InstallAllUsers"
msgstr "基于InstallAllUsers选择"

#: ../../using/windows.rst:149
msgid "DefaultAllUsersTargetDir"
msgstr "DefaultAllUsersTargetDir"

#: ../../using/windows.rst:149
msgid "The default installation directory for all-user installs"
msgstr "所有用户安装的默认安装目录"

#: ../../using/windows.rst:149
msgid ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` or :file:`\\ "
"%ProgramFiles(x86)%\\\\\\ Python X.Y`"
msgstr ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` 或 :file:`\\ "
"%ProgramFiles(x86)%\\\\\\ Python X.Y`"

#: ../../using/windows.rst:154
msgid "DefaultJustForMeTargetDir"
msgstr "DefaultJustForMeTargetDir"

#: ../../using/windows.rst:154
msgid "The default install directory for just-for-me installs"
msgstr "仅为我安装的默认安装目录"

#: ../../using/windows.rst:154
msgid ""
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY` or "
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY-32`"
msgstr ""
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY` 或 "
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY-32`"

#: ../../using/windows.rst:159
msgid "DefaultCustomTargetDir"
msgstr "DefaultCustomTargetDir"

#: ../../using/windows.rst:159
msgid "The default custom install directory displayed in the UI"
msgstr "UI中显示的默认自定义安装目录"

#: ../../using/windows.rst:159 ../../using/windows.rst:208
msgid "(empty)"
msgstr "（空）"

#: ../../using/windows.rst:162
msgid "AssociateFiles"
msgstr "AssociateFiles"

#: ../../using/windows.rst:162
msgid "Create file associations if the launcher is also installed."
msgstr "如果还安装了启动器，则创建文件关联。"

#: ../../using/windows.rst:162 ../../using/windows.rst:172
#: ../../using/windows.rst:175 ../../using/windows.rst:179
#: ../../using/windows.rst:182 ../../using/windows.rst:185
#: ../../using/windows.rst:187 ../../using/windows.rst:190
#: ../../using/windows.rst:193 ../../using/windows.rst:197
#: ../../using/windows.rst:199 ../../using/windows.rst:201
msgid "1"
msgstr "1"

#: ../../using/windows.rst:165
msgid "CompileAll"
msgstr "CompileAll"

#: ../../using/windows.rst:165
msgid "Compile all ``.py`` files to ``.pyc``."
msgstr "将所有 ``.py`` 文件编译为 ``.pyc`` 。"

#: ../../using/windows.rst:168
msgid "PrependPath"
msgstr "PrependPath"

#: ../../using/windows.rst:168
msgid ""
"Add install and Scripts directories to :envvar:`PATH` and ``.PY`` to "
":envvar:`PATHEXT`"
msgstr "将install和Scripts目录添加到 :envvar:`PATH` 和 ``.PY`` to :envvar:`PATHEXT` "

#: ../../using/windows.rst:172
msgid "Shortcuts"
msgstr "Shortcuts"

#: ../../using/windows.rst:172
msgid ""
"Create shortcuts for the interpreter, documentation and IDLE if installed."
msgstr "如果已安装，为解释器，文档和IDLE创建快捷方式"

#: ../../using/windows.rst:175
msgid "Include_doc"
msgstr "Include_doc"

#: ../../using/windows.rst:175
msgid "Install Python manual"
msgstr "安装Python手册"

#: ../../using/windows.rst:177
msgid "Include_debug"
msgstr "Include_debug"

#: ../../using/windows.rst:177
msgid "Install debug binaries"
msgstr "安装调试二进制文件"

#: ../../using/windows.rst:179
msgid "Include_dev"
msgstr "Include_dev"

#: ../../using/windows.rst:179
msgid "Install developer headers and libraries"
msgstr "安装开发人员头文件和库"

#: ../../using/windows.rst:182
msgid "Include_exe"
msgstr "Include_exe"

#: ../../using/windows.rst:182
msgid "Install :file:`python.exe` and related files"
msgstr "安装 :file:`python.exe` 及相关文件"

#: ../../using/windows.rst:185
msgid "Include_launcher"
msgstr "Include_launcher"

#: ../../using/windows.rst:185
msgid "Install :ref:`launcher`."
msgstr "安装 :ref:`launcher` ."

#: ../../using/windows.rst:187
msgid "InstallLauncherAllUsers"
msgstr "InstallLauncherAllUsers"

#: ../../using/windows.rst:187
msgid "Installs :ref:`launcher` for all users."
msgstr "为所有用户安装 :ref:`launcher` 。"

#: ../../using/windows.rst:190
msgid "Include_lib"
msgstr "Include_lib"

#: ../../using/windows.rst:190
msgid "Install standard library and extension modules"
msgstr "安装标准库和扩展模块"

#: ../../using/windows.rst:193
msgid "Include_pip"
msgstr "Include_pip"

#: ../../using/windows.rst:193
msgid "Install bundled pip and setuptools"
msgstr "安装捆绑的pip和setuptools"

#: ../../using/windows.rst:195
msgid "Include_symbols"
msgstr "Include_symbols"

#: ../../using/windows.rst:195
msgid "Install debugging symbols (`*`.pdb)"
msgstr "安装调试符号( `*` .pdb)"

#: ../../using/windows.rst:197
msgid "Include_tcltk"
msgstr "Include_tcltk"

#: ../../using/windows.rst:197
msgid "Install Tcl/Tk support and IDLE"
msgstr "安装Tcl/Tk 支持和IDLE"

#: ../../using/windows.rst:199
msgid "Include_test"
msgstr "Include_test"

#: ../../using/windows.rst:199
msgid "Install standard library test suite"
msgstr "安装标准库测试套件"

#: ../../using/windows.rst:201
msgid "Include_tools"
msgstr "Include_tools"

#: ../../using/windows.rst:201
msgid "Install utility scripts"
msgstr "安装实用程序脚本"

#: ../../using/windows.rst:203
msgid "LauncherOnly"
msgstr "LauncherOnly"

#: ../../using/windows.rst:203
msgid "Only installs the launcher. This will override most other options."
msgstr "仅安装启动器。这将覆盖大多数其他选项。"

#: ../../using/windows.rst:206
msgid "SimpleInstall"
msgstr "SimpleInstall"

#: ../../using/windows.rst:206
msgid "Disable most install UI"
msgstr "禁用大多数安装UI"

#: ../../using/windows.rst:208
msgid "SimpleInstallDescription"
msgstr "SimpleInstallDescription"

#: ../../using/windows.rst:208
msgid "A custom message to display when the simplified install UI is used."
msgstr "使用简化安装UI时显示的自定义消息。"

#: ../../using/windows.rst:212
msgid ""
"For example, to silently install a default, system-wide Python installation,"
" you could use the following command (from an elevated command prompt)::"
msgstr "例如，要以静默方式安装默认系统范围的Python，您可以使用以下命令（从命令提示符>）::"

#: ../../using/windows.rst:217
msgid ""
"To allow users to easily install a personal copy of Python without the test "
"suite, you could provide a shortcut with the following command. This will "
"display a simplified initial page and disallow customization::"
msgstr "要允许用户在没有测试套件的情况下轻松安装Python的个人副本，可以使用以下命令提供快捷方式。这将显示一个简化的初始页面，不允许自定义::"

#: ../../using/windows.rst:224
msgid ""
"(Note that omitting the launcher also omits file associations, and is only "
"recommended for per-user installs when there is also a system-wide "
"installation that included the launcher.)"
msgstr "（请注意，省略启动器也会省略文件关联，并且仅在系统安装范围包含启动器时才建议用于每用户安装。）"

#: ../../using/windows.rst:228
msgid ""
"The options listed above can also be provided in a file named "
"``unattend.xml`` alongside the executable. This file specifies a list of "
"options and values. When a value is provided as an attribute, it will be "
"converted to a number if possible. Values provided as element text are "
"always left as strings. This example file sets the same options as the "
"previous example:"
msgstr ""
"上面列出的选项也可以在一个名为 ``unattend.xml`` "
"的文件中与可执行文件一起提供。此文件指定选项和值的列表。当值作为属性提供时，如果可能，它将转换为数字。作为元素文本提供的值始终保留为字符串。此示例文件设置与上一示例采用相同的选项："

#: ../../using/windows.rst:247
msgid "Installing Without Downloading"
msgstr "免下载安装"

#: ../../using/windows.rst:249
msgid ""
"As some features of Python are not included in the initial installer "
"download, selecting those features may require an internet connection.  To "
"avoid this need, all possible components may be downloaded on-demand to "
"create a complete *layout* that will no longer require an internet "
"connection regardless of the selected features. Note that this download may "
"be bigger than required, but where a large number of installations are going"
" to be performed it is very useful to have a locally cached copy."
msgstr ""
"由于初始安装程序下载中未包含Python的某些功能，因此选择这些功能可能需要Internet连接。为了避免这种需要，可以按需下载所有可能的组件以创建不再需要互联网连接的完整布局，而不管所选择的特征如何。请注意，此下载可能比要求的要大，但是如果要执行大量安装，则拥有本地缓存​​的副本非常有用。"

#: ../../using/windows.rst:257
msgid ""
"Execute the following command from Command Prompt to download all possible "
"required files.  Remember to substitute ``python-3.7.0.exe`` for the actual "
"name of your installer, and to create layouts in their own directories to "
"avoid collisions between files with the same name."
msgstr ""
"从命令提示符执行以下命令以下载所有可能的必需文件。请记住用 ``python-3.7.0.exe`` "
"替换安装程序的实际名称，并在自己的目录中创建布局以避免具有相同名称的文件之间发生冲突。"

#: ../../using/windows.rst:266
msgid ""
"You may also specify the ``/quiet`` option to hide the progress display."
msgstr "您也可以指定 ``/quiet`` 选项来隐藏进度显示。"

#: ../../using/windows.rst:269
msgid "Modifying an install"
msgstr "修改安装"

#: ../../using/windows.rst:271
msgid ""
"Once Python has been installed, you can add or remove features through the "
"Programs and Features tool that is part of Windows. Select the Python entry "
"and choose \"Uninstall/Change\" to open the installer in maintenance mode."
msgstr ""
"安装Python后，您可以通过Windows中的“程序和功能”工具添加或删除功能。选择Python条目并选择“卸载/更改”以在维护模式下打开安装程序。"

#: ../../using/windows.rst:275
msgid ""
"\"Modify\" allows you to add or remove features by modifying the checkboxes "
"- unchanged checkboxes will not install or remove anything. Some options "
"cannot be changed in this mode, such as the install directory; to modify "
"these, you will need to remove and then reinstall Python completely."
msgstr ""
"“修改” 允许您通过修改复选框来添加或删除功能 - "
"未更改的复选框将不会安装或删除任何内容。在此模式下无法更改某些选项，例如安装目录;要修改这些，您需要完全删除然后重新安装Python。"

#: ../../using/windows.rst:280
msgid ""
"\"Repair\" will verify all the files that should be installed using the "
"current settings and replace any that have been removed or modified."
msgstr "“修复” 将验证应使用当前设置安装的所有文件，并替换已删除或修改的任何文件"

#: ../../using/windows.rst:283
msgid ""
"\"Uninstall\" will remove Python entirely, with the exception of the "
":ref:`launcher`, which has its own entry in Programs and Features."
msgstr "“卸载” 将完全删除Python，但 :ref:`launcher` 除外，它在程序和功能中有自己的条目。"

#: ../../using/windows.rst:290
msgid "The Microsoft Store package"
msgstr "Microsoft Store包"

#: ../../using/windows.rst:295
msgid ""
"The Microsoft Store package is currently considered unstable while its "
"interactions with other tools and other copies of Python are evaluated. "
"While Python itself is stable, this installation method may change its "
"behavior and capabilities during Python 3.7 releases."
msgstr ""
"Microsoft "
"Store包当前被认为是不稳定的，同时评估了它与其他工具和其他Python副本的交互。虽然Python本身是稳定的，但这种安装方法可能会在Python "
"3.7版本中改变其行为和功能。"

#: ../../using/windows.rst:300
msgid ""
"The Microsoft Store package is an easily installable Python interpreter that"
" is intended mainly for interactive use, for example, by students."
msgstr "Microsoft Store包是一个易于安装的Python解释器，主要用于交互式使用，例如，学生。"

#: ../../using/windows.rst:303
msgid ""
"To install the package, ensure you have the latest Windows 10 updates and "
"search the Microsoft Store app for \"Python |version|\". Ensure that the app"
" you select is published by the Python Software Foundation, and install it."
msgstr ""
"要安装软件包，请确保您拥有最新的Windows 10更新，并在Microsoft Store应用程序中搜索 \"Python |version|\" "
"。确保您选择的应用程序由Python Software Foundation发布并安装。"

#: ../../using/windows.rst:308
msgid ""
"Python will always be available for free on the Microsoft Store. If you are "
"asked to pay for it, you have not selected the correct package."
msgstr "Python将始终在Microsoft Store上免费提供。如果要求您付款，则表示您没有选择正确的包。"

#: ../../using/windows.rst:311
msgid ""
"After installation, Python may be launched by finding it in Start. "
"Alternatively, it will be available from any Command Prompt or PowerShell "
"session by typing ``python``. Further, pip and IDLE may be used by typing "
"``pip`` or ``idle``. IDLE can also be found in Start."
msgstr ""
"安装完成后，可以通过在开始菜单中找到它来启动Python。或者，可以通过键入 ``python`` "
"从任何命令提示符或PowerShell会话中获取它。此外，可以通过键入 ``pip`` 或 ``idle``来使用pip和IDLE。 "
"IDLE也可以在开始菜单中找到"

#: ../../using/windows.rst:316
msgid ""
"All three commands are also available with version number suffixes, for "
"example, as ``python3.exe`` and ``python3.x.exe`` as well as ``python.exe`` "
"(where ``3.x`` is the specific version you want to launch, such as "
"|version|)."
msgstr ""
"所有这三个命令也可以使用版本号后缀，例如， ``python3.exe`` 和 ``python3.x.exe`` 以及 ``python.exe`` "
"（其中 ``3.x`` 是您要启动的特定版本，例如 |version| ）"

#: ../../using/windows.rst:321
msgid ""
"Virtual environments can be created with ``python -m venv`` and activated "
"and used as normal."
msgstr "可以使用 ``python -m venv`` 创建虚拟环境并激活并正常使用。"

#: ../../using/windows.rst:324
msgid ""
"If you have installed another version of Python and added it to your "
"``PATH`` variable, it will be available as ``python.exe`` rather than the "
"one from the Microsoft Store. To access the new installation, use "
"``python3.exe`` or ``python3.x.exe``."
msgstr ""
"如果你已经安装了另一个版本的Python并将它添加到你的 ``PATH`` 变量中，那么它将作为 ``python.exe`` "
"而不是来自Microsoft Store的那个。要访问新安装，请使用 ``python3.exe`` 或 ``python3.x.exe`` 。"

#: ../../using/windows.rst:329
msgid ""
"To remove Python, open Settings and use Apps and Features, or else find "
"Python in Start and right-click to select Uninstall. Uninstalling will "
"remove all packages you installed directly into this Python installation, "
"but will not remove any virtual environments"
msgstr ""
"要删除Python，请打开“设置”并使用“应用程序和功能”，或者在“开始”中找到Python，然后右键单击以选择“卸载”。卸载将删除您直接安装到此Python安装中的所有软件包，但不会删除任何虚拟环境"

#: ../../using/windows.rst:335
msgid "Known Issues"
msgstr "已知的问题"

#: ../../using/windows.rst:337
msgid ""
"Currently, the ``py.exe`` launcher cannot be used to start Python when it "
"has been installed from the Microsoft Store."
msgstr "目前， ``py.exe`` 启动程序在从Microsoft Store安装时不能用于启动Python。"

#: ../../using/windows.rst:340
msgid ""
"Because of restrictions on Microsoft Store apps, Python scripts may not have"
" full write access to shared locations such as ``TEMP`` and the registry. "
"Instead, it will write to a private copy. If your scripts must modify the "
"shared locations, you will need to install the full installer."
msgstr ""
"由于Microsoft Store应用程序的限制，Python脚本可能无法对共享位置（如 ``TEMP`` "
"）和注册表进行完全写入访问。相反，它将写入私人副本。如果脚本必须修改共享位置，则需要安装完整安装程序。"

#: ../../using/windows.rst:349
msgid "The nuget.org packages"
msgstr "nuget.org 安装包"

#: ../../using/windows.rst:353
msgid ""
"The nuget.org package is a reduced size Python environment intended for use "
"on continuous integration and build systems that do not have a system-wide "
"install of Python. While nuget is \"the package manager for .NET\", it also "
"works perfectly fine for packages containing build-time tools."
msgstr ""
"nuget.org是一个精简的Python环境，用于在没有系统范围内安装Python的系统的持续集成和构建。虽然Nuget是“.NET的包管理器”，但是对于包含构建时工具的包来说，它也可以很好地工作。"

#: ../../using/windows.rst:358
msgid ""
"Visit `nuget.org <https://www.nuget.org/>`_ for the most up-to-date "
"information on using nuget. What follows is a summary that is sufficient for"
" Python developers."
msgstr ""
"访问 `nuget.org <https://www.nuget.org/>`_  "
"获取有关使用nuget的最新信息。下面的摘要对Python开发人员来说已经足够了。"

#: ../../using/windows.rst:362
msgid ""
"The ``nuget.exe`` command line tool may be downloaded directly from "
"``https://aka.ms/nugetclidl``, for example, using curl or PowerShell. With "
"the tool, the latest version of Python for 64-bit or 32-bit machines is "
"installed using::"
msgstr ""
" ``nuget.exe`` 命令行工具可以直接从 ``https://aka.ms/nugetclidl`` "
"下载，例如，使用curl或PowerShell。使用该工具，安装64位或32位最新版本的Python::"

#: ../../using/windows.rst:370
msgid ""
"To select a particular version, add a ``-Version 3.x.y``. The output "
"directory may be changed from ``.``, and the package will be installed into "
"a subdirectory. By default, the subdirectory is named the same as the "
"package, and without the ``-ExcludeVersion`` option this name will include "
"the specific version installed. Inside the subdirectory is a ``tools`` "
"directory that contains the Python installation::"
msgstr ""
"要选择特定版本，请添加 ``-Version 3.x.y`` 。输出目录可以从 ``.`` "
"更改，包将安装到子目录中。默认情况下，子目录的名称与包的名称相同，如果没有 ``-ExcludeVersion`` "
"选项，则此名称将包含已安装的特定版本。子目录里面是一个包含Python安装的 ``tools`` 目录::"

#: ../../using/windows.rst:385
msgid ""
"In general, nuget packages are not upgradeable, and newer versions should be"
" installed side-by-side and referenced using the full path. Alternatively, "
"delete the package directory manually and install it again. Many CI systems "
"will do this automatically if they do not preserve files between builds."
msgstr ""
"通常，nuget包不可升级，应该平行安装较新版本并使用完整路径引用。或者，手动删除程序包目录并再次安装。如果许多CI系统不在构建之间保留文件，它们将自动执行此操作。"

#: ../../using/windows.rst:390
msgid ""
"Alongside the ``tools`` directory is a ``build\\native`` directory. This "
"contains a MSBuild properties file ``python.props`` that can be used in a "
"C++ project to reference the Python install. Including the settings will "
"automatically use the headers and import libraries in your build."
msgstr ""
"除了 ``tools`` 目录外，还有一个 ``build\\native`` 目录。它包含一个MSBuild属性文件 ``python.props``"
" ，可以在C+项目中使用该文件来引用Python安装。包含这些设置将自动在生成中使用标头和导入库。"

#: ../../using/windows.rst:395
msgid ""
"The package information pages on nuget.org are "
"`www.nuget.org/packages/python <https://www.nuget.org/packages/python>`_ for"
" the 64-bit version and `www.nuget.org/packages/pythonx86 "
"<https://www.nuget.org/packages/pythonx86>`_ for the 32-bit version."
msgstr ""
"nuget.org上的包信息页是 `www.nuget.org/packages/python "
"<https://www.nuget.org/packages/python>`_        对于64位版本和 "
"`www.nuget.org/packages/pythonx86 "
"<https://www.nuget.org/packages/pythonx86>`_ 表示32位版本。"

#: ../../using/windows.rst:404
msgid "The embeddable package"
msgstr "可嵌入的包"

#: ../../using/windows.rst:408
msgid ""
"The embedded distribution is a ZIP file containing a minimal Python "
"environment. It is intended for acting as part of another application, "
"rather than being directly accessed by end-users."
msgstr "嵌入式发行版是一个包含最小Python环境的ZIP文件。它旨在作为另一个应用程序的一部分，而不是由最终用户直接访问。"

#: ../../using/windows.rst:412
msgid ""
"When extracted, the embedded distribution is (almost) fully isolated from "
"the user's system, including environment variables, system registry "
"settings, and installed packages. The standard library is included as pre-"
"compiled and optimized ``.pyc`` files in a ZIP, and ``python3.dll``, "
"``python37.dll``, ``python.exe`` and ``pythonw.exe`` are all provided. "
"Tcl/tk (including all dependants, such as Idle), pip and the Python "
"documentation are not included."
msgstr ""
"解压缩后，嵌入式发行版（几乎）与用户系统完全隔离，包括环境变量，系统注册表设置和已安装的软件包。标准库作为预先编译和优化的 ``.pyc`` "
"文件包含在ZIP中，并提供了 ``python3.dll`` ， ``python37.dll`` ， ``python.exe`` 和 "
"``pythonw.exe`` 文件。不包括Tcl/tk（包括所有依赖项，如Idle），pip和Python文档。"

#: ../../using/windows.rst:421
msgid ""
"The embedded distribution does not include the `Microsoft C Runtime "
"<https://www.microsoft.com/en-us/download/details.aspx?id=48145>`_ and it is"
" the responsibility of the application installer to provide this. The "
"runtime may have already been installed on a user's system previously or "
"automatically via Windows Update, and can be detected by finding "
"``ucrtbase.dll`` in the system directory."
msgstr ""
"嵌入式发行版不包括 `Microsoft C Runtime <https://www.microsoft.com/en-"
"us/download/details.aspx?id=48145>`_ "
"，应用程序安装程序负责提供此功能。运行时可能已经预先安装在用户的系统上或通过Windows Update自动安装，并且可以通过在系统目录中找到 "
"``ucrtbase.dll`` 来检测"

#: ../../using/windows.rst:428
msgid ""
"Third-party packages should be installed by the application installer "
"alongside the embedded distribution. Using pip to manage dependencies as for"
" a regular Python installation is not supported with this distribution, "
"though with some care it may be possible to include and use pip for "
"automatic updates. In general, third-party packages should be treated as "
"part of the application (\"vendoring\") so that the developer can ensure "
"compatibility with newer versions before providing updates to users."
msgstr ""
"第三方软件包应该由应用程序安装程序与嵌入式发行版一起安装。这个发行版不支持像常规Python安装那样使用pip来管理依赖关系，不过可以小心地将pip包含进来并使用它进行自动更新。通常，第三方包应该作为应用程序的一部分(“打包”)处理，以便开发人员在向用户提供更新之前能够确保与新版本兼容。"

#: ../../using/windows.rst:436
msgid ""
"The two recommended use cases for this distribution are described below."
msgstr "下面描述了这个发行版的两个推荐用例。"

#: ../../using/windows.rst:439
msgid "Python Application"
msgstr "Python应用程序"

#: ../../using/windows.rst:441
msgid ""
"An application written in Python does not necessarily require users to be "
"aware of that fact. The embedded distribution may be used in this case to "
"include a private version of Python in an install package. Depending on how "
"transparent it should be (or conversely, how professional it should appear),"
" there are two options."
msgstr ""
"用Python编写的应用程序并不一定要求用户了解这一事实。在这种情况下，可以使用嵌入式发行版在安装包中包含Python的私有版本。根据它应该有多透明(或者相反，它应该看起来有多专业)，有两个选项。"

#: ../../using/windows.rst:447
msgid ""
"Using a specialized executable as a launcher requires some coding, but "
"provides the most transparent experience for users. With a customized "
"launcher, there are no obvious indications that the program is running on "
"Python: icons can be customized, company and version information can be "
"specified, and file associations behave properly. In most cases, a custom "
"launcher should simply be able to call ``Py_Main`` with a hard-coded command"
" line."
msgstr ""
"使用专门的可执行文件作为启动程序需要一些编码，但为用户提供了最透明的体验。使用定制的启动器，没有明显的迹象表明程序是在Python上运行的：图标可以定制，公司和版本信息可以指定，文件关联可以正常运行。在大多数情况下，自定义启动程序应该只需使用硬编码的命令行就能调用"
" ``Py_Main``  "

#: ../../using/windows.rst:454
msgid ""
"The simpler approach is to provide a batch file or generated shortcut that "
"directly calls the ``python.exe`` or ``pythonw.exe`` with the required "
"command-line arguments. In this case, the application will appear to be "
"Python and not its actual name, and users may have trouble distinguishing it"
" from other running Python processes or file associations."
msgstr ""
"更简单的方法是提供批处理文件或生成的快捷方式，使用所需的命令行参数直接调用 ``python.exe`` 或 ``pythonw.exe`` "
"。在这种情况下，应用程序将显示为Python而不是其实际名称，并且用户可能无法将其与其他正在运行的Python进程或文件关联区分开来。"

#: ../../using/windows.rst:460
msgid ""
"With the latter approach, packages should be installed as directories "
"alongside the Python executable to ensure they are available on the path. "
"With the specialized launcher, packages can be located in other locations as"
" there is an opportunity to specify the search path before launching the "
"application."
msgstr ""
"对于后一种方法，包应该作为目录与Python可执行文件一起安装，以确保它们在路径上可用。使用专用的启动器，包可以位于其他位置，因为在启动应用程序之前有机会指定搜索路径。"

#: ../../using/windows.rst:466
msgid "Embedding Python"
msgstr "嵌入Python"

#: ../../using/windows.rst:468
msgid ""
"Applications written in native code often require some form of scripting "
"language, and the embedded Python distribution can be used for this purpose."
" In general, the majority of the application is in native code, and some "
"part will either invoke ``python.exe`` or directly use ``python3.dll``. For "
"either case, extracting the embedded distribution to a subdirectory of the "
"application installation is sufficient to provide a loadable Python "
"interpreter."
msgstr ""
"用本地代码编写的应用程序通常需要某种形式的脚本语言，嵌入式Python发行版可以用于此目的。通常，应用程序的大部分都是本机代码，某些部分将调用 "
"``python.exe`` 或直接使用 ``python3.dll`` "
"。无论是哪种情况，将嵌入的发行版解压缩到应用程序安装的子目录中就足以提供可加载的Python解释器。"

#: ../../using/windows.rst:475
msgid ""
"As with the application use, packages can be installed to any location as "
"there is an opportunity to specify search paths before initializing the "
"interpreter. Otherwise, there is no fundamental differences between using "
"the embedded distribution and a regular installation."
msgstr "与应用程序使用一样，包可以安装到任何位置，因为在初始化解释器之前有机会指定搜索路径。否则，使用嵌入式发行版和常规安装之间没有根本区别。"

#: ../../using/windows.rst:482
msgid "Alternative bundles"
msgstr "替代捆绑包"

#: ../../using/windows.rst:484
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr ""

#: ../../using/windows.rst:489
msgid "`ActivePython <https://www.activestate.com/activepython/>`_"
msgstr ""

#: ../../using/windows.rst:489
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr ""

#: ../../using/windows.rst:493
msgid "`Anaconda <https://www.anaconda.com/download/>`_"
msgstr ""

#: ../../using/windows.rst:492
msgid ""
"Popular scientific modules (such as numpy, scipy and pandas) and the "
"``conda`` package manager."
msgstr ""

#: ../../using/windows.rst:497
msgid "`Canopy <https://www.enthought.com/product/canopy/>`_"
msgstr ""

#: ../../using/windows.rst:496
msgid ""
"A \"comprehensive Python analysis environment\" with editors and other "
"development tools."
msgstr ""

#: ../../using/windows.rst:501
msgid "`WinPython <https://winpython.github.io/>`_"
msgstr ""

#: ../../using/windows.rst:500
msgid ""
"Windows-specific distribution with prebuilt scientific packages and tools "
"for building packages."
msgstr ""

#: ../../using/windows.rst:503
msgid ""
"Note that these packages may not include the latest versions of Python or "
"other libraries, and are not maintained or supported by the core Python "
"team."
msgstr ""

#: ../../using/windows.rst:509
msgid "Configuring Python"
msgstr "配置Python"

#: ../../using/windows.rst:511
msgid ""
"To run Python conveniently from a command prompt, you might consider "
"changing some default environment variables in Windows.  While the installer"
" provides an option to configure the PATH and PATHEXT variables for you, "
"this is only reliable for a single, system-wide installation.  If you "
"regularly use multiple versions of Python, consider using the "
":ref:`launcher`."
msgstr ""

#: ../../using/windows.rst:521
msgid "Excursus: Setting environment variables"
msgstr "附录：设置环境变量"

#: ../../using/windows.rst:523
msgid ""
"Windows allows environment variables to be configured permanently at both "
"the User level and the System level, or temporarily in a command prompt."
msgstr ""

#: ../../using/windows.rst:526
msgid ""
"To temporarily set environment variables, open Command Prompt and use the "
":command:`set` command:"
msgstr ""

#: ../../using/windows.rst:535
msgid ""
"These changes will apply to any further commands executed in that console, "
"and will be inherited by any applications started from the console."
msgstr ""

#: ../../using/windows.rst:538
msgid ""
"Including the variable name within percent signs will expand to the existing"
" value, allowing you to add your new value at either the start or the end. "
"Modifying :envvar:`PATH` by adding the directory containing "
":program:`python.exe` to the start is a common way to ensure the correct "
"version of Python is launched."
msgstr ""

#: ../../using/windows.rst:544
msgid ""
"To permanently modify the default environment variables, click Start and "
"search for 'edit environment variables', or open System properties, "
":guilabel:`Advanced system settings` and click the :guilabel:`Environment "
"Variables` button. In this dialog, you can add or modify User and System "
"variables. To change System variables, you need non-restricted access to "
"your machine (i.e. Administrator rights)."
msgstr ""

#: ../../using/windows.rst:553
msgid ""
"Windows will concatenate User variables *after* System variables, which may "
"cause unexpected results when modifying :envvar:`PATH`."
msgstr ""

#: ../../using/windows.rst:556
msgid ""
"The :envvar:`PYTHONPATH` variable is used by all versions of Python 2 and "
"Python 3, so you should not permanently configure this variable unless it "
"only includes code that is compatible with all of your installed Python "
"versions."
msgstr ""

#: ../../using/windows.rst:564
msgid "https://www.microsoft.com/en-us/wdsi/help/folder-variables"
msgstr ""

#: ../../using/windows.rst:564
msgid "Environment variables in Windows NT"
msgstr ""

#: ../../using/windows.rst:567
msgid "https://technet.microsoft.com/en-us/library/cc754250.aspx"
msgstr ""

#: ../../using/windows.rst:567
msgid "The SET command, for temporarily modifying environment variables"
msgstr ""

#: ../../using/windows.rst:570
msgid "https://technet.microsoft.com/en-us/library/cc755104.aspx"
msgstr ""

#: ../../using/windows.rst:570
msgid "The SETX command, for permanently modifying environment variables"
msgstr ""

#: ../../using/windows.rst:573
msgid ""
"https://support.microsoft.com/en-us/help/310519/how-to-manage-environment-"
"variables-in-windows-xp"
msgstr ""

#: ../../using/windows.rst:573
msgid "How To Manage Environment Variables in Windows XP"
msgstr ""

#: ../../using/windows.rst:575
msgid "https://www.chem.gla.ac.uk/~louis/software/faq/q1.html"
msgstr ""

#: ../../using/windows.rst:576
msgid "Setting Environment variables, Louis J. Farrugia"
msgstr ""

#: ../../using/windows.rst:581
msgid "Finding the Python executable"
msgstr "查找Python可执行文件"

#: ../../using/windows.rst:585
msgid ""
"Besides using the automatically created start menu entry for the Python "
"interpreter, you might want to start Python in the command prompt. The "
"installer has an option to set that up for you."
msgstr ""

#: ../../using/windows.rst:589
msgid ""
"On the first page of the installer, an option labelled \"Add Python to "
"PATH\" may be selected to have the installer add the install location into "
"the :envvar:`PATH`.  The location of the :file:`Scripts\\\\` folder is also "
"added. This allows you to type :command:`python` to run the interpreter, and"
" :command:`pip` for the package installer. Thus, you can also execute your "
"scripts with command line options, see :ref:`using-on-cmdline` "
"documentation."
msgstr ""

#: ../../using/windows.rst:596
msgid ""
"If you don't enable this option at install time, you can always re-run the "
"installer, select Modify, and enable it.  Alternatively, you can manually "
"modify the :envvar:`PATH` using the directions in :ref:`setting-envvars`.  "
"You need to set your :envvar:`PATH` environment variable to include the "
"directory of your Python installation, delimited by a semicolon from other "
"entries.  An example variable could look like this (assuming the first two "
"entries already existed)::"
msgstr ""

#: ../../using/windows.rst:609
msgid "Python Launcher for Windows"
msgstr "适用于Windows的Python启动器"

#: ../../using/windows.rst:613
msgid ""
"The Python launcher for Windows is a utility which aids in locating and "
"executing of different Python versions.  It allows scripts (or the command-"
"line) to indicate a preference for a specific Python version, and will "
"locate and execute that version."
msgstr ""

#: ../../using/windows.rst:618
msgid ""
"Unlike the :envvar:`PATH` variable, the launcher will correctly select the "
"most appropriate version of Python. It will prefer per-user installations "
"over system-wide ones, and orders by language version rather than using the "
"most recently installed version."
msgstr ""

#: ../../using/windows.rst:623
msgid "The launcher was originally specified in :pep:`397`."
msgstr ""

#: ../../using/windows.rst:626
msgid "Getting started"
msgstr "入门"

#: ../../using/windows.rst:629
msgid "From the command-line"
msgstr "从命令行"

#: ../../using/windows.rst:633
msgid ""
"System-wide installations of Python 3.3 and later will put the launcher on "
"your :envvar:`PATH`. The launcher is compatible with all available versions "
"of Python, so it does not matter which version is installed. To check that "
"the launcher is available, execute the following command in Command Prompt:"
msgstr ""

#: ../../using/windows.rst:642
msgid ""
"You should find that the latest version of Python you have installed is "
"started - it can be exited as normal, and any additional command-line "
"arguments specified will be sent directly to Python."
msgstr ""

#: ../../using/windows.rst:646
msgid ""
"If you have multiple versions of Python installed (e.g., 2.7 and |version|) "
"you will have noticed that Python |version| was started - to launch Python "
"2.7, try the command:"
msgstr ""

#: ../../using/windows.rst:654
msgid ""
"If you want the latest version of Python 2.x you have installed, try the "
"command:"
msgstr ""

#: ../../using/windows.rst:661
msgid "You should find the latest version of Python 2.x starts."
msgstr ""

#: ../../using/windows.rst:663
msgid ""
"If you see the following error, you do not have the launcher installed:"
msgstr ""

#: ../../using/windows.rst:670
msgid ""
"Per-user installations of Python do not add the launcher to :envvar:`PATH` "
"unless the option was selected on installation."
msgstr ""

#: ../../using/windows.rst:674
msgid "Virtual environments"
msgstr "虚拟环境"

#: ../../using/windows.rst:678
msgid ""
"If the launcher is run with no explicit Python version specification, and a "
"virtual environment (created with the standard library :mod:`venv` module or"
" the external ``virtualenv`` tool) active, the launcher will run the virtual"
" environment's interpreter rather than the global one.  To run the global "
"interpreter, either deactivate the virtual environment, or explicitly "
"specify the global Python version."
msgstr ""

#: ../../using/windows.rst:686
msgid "From a script"
msgstr "从脚本"

#: ../../using/windows.rst:688
msgid ""
"Let's create a test Python script - create a file called ``hello.py`` with "
"the following contents"
msgstr ""

#: ../../using/windows.rst:697
msgid "From the directory in which hello.py lives, execute the command:"
msgstr ""

#: ../../using/windows.rst:703
msgid ""
"You should notice the version number of your latest Python 2.x installation "
"is printed.  Now try changing the first line to be:"
msgstr ""

#: ../../using/windows.rst:710
msgid ""
"Re-executing the command should now print the latest Python 3.x information."
" As with the above command-line examples, you can specify a more explicit "
"version qualifier.  Assuming you have Python 2.6 installed, try changing the"
" first line to ``#! python2.6`` and you should find the 2.6 version "
"information printed."
msgstr ""

#: ../../using/windows.rst:716
msgid ""
"Note that unlike interactive use, a bare \"python\" will use the latest "
"version of Python 2.x that you have installed.  This is for backward "
"compatibility and for compatibility with Unix, where the command ``python`` "
"typically refers to Python 2."
msgstr ""

#: ../../using/windows.rst:722
msgid "From file associations"
msgstr ""

#: ../../using/windows.rst:724
msgid ""
"The launcher should have been associated with Python files (i.e. ``.py``, "
"``.pyw``, ``.pyc`` files) when it was installed.  This means that when you "
"double-click on one of these files from Windows explorer the launcher will "
"be used, and therefore you can use the same facilities described above to "
"have the script specify the version which should be used."
msgstr ""

#: ../../using/windows.rst:730
msgid ""
"The key benefit of this is that a single launcher can support multiple "
"Python versions at the same time depending on the contents of the first "
"line."
msgstr ""

#: ../../using/windows.rst:734
msgid "Shebang Lines"
msgstr "工作线"

#: ../../using/windows.rst:736
msgid ""
"If the first line of a script file starts with ``#!``, it is known as a "
"\"shebang\" line.  Linux and other Unix like operating systems have native "
"support for such lines and they are commonly used on such systems to "
"indicate how a script should be executed.  This launcher allows the same "
"facilities to be used with Python scripts on Windows and the examples above "
"demonstrate their use."
msgstr ""

#: ../../using/windows.rst:743
msgid ""
"To allow shebang lines in Python scripts to be portable between Unix and "
"Windows, this launcher supports a number of 'virtual' commands to specify "
"which interpreter to use.  The supported virtual commands are:"
msgstr ""

#: ../../using/windows.rst:747
msgid "``/usr/bin/env python``"
msgstr ""

#: ../../using/windows.rst:748
msgid "``/usr/bin/python``"
msgstr ""

#: ../../using/windows.rst:749
msgid "``/usr/local/bin/python``"
msgstr ""

#: ../../using/windows.rst:750
msgid "``python``"
msgstr ""

#: ../../using/windows.rst:752
msgid "For example, if the first line of your script starts with"
msgstr ""

#: ../../using/windows.rst:758
msgid ""
"The default Python will be located and used.  As many Python scripts written"
" to work on Unix will already have this line, you should find these scripts "
"can be used by the launcher without modification.  If you are writing a new "
"script on Windows which you hope will be useful on Unix, you should use one "
"of the shebang lines starting with ``/usr``."
msgstr ""

#: ../../using/windows.rst:764
msgid ""
"Any of the above virtual commands can be suffixed with an explicit version "
"(either just the major version, or the major and minor version) - for "
"example ``/usr/bin/python2.7`` - which will cause that specific version to "
"be located and used."
msgstr ""

#: ../../using/windows.rst:769
msgid ""
"The ``/usr/bin/env`` form of shebang line has one further special property. "
"Before looking for installed Python interpreters, this form will search the "
"executable :envvar:`PATH` for a Python executable. This corresponds to the "
"behaviour of the Unix ``env`` program, which performs a :envvar:`PATH` "
"search."
msgstr ""

#: ../../using/windows.rst:775
msgid "Arguments in shebang lines"
msgstr "shebang的参数"

#: ../../using/windows.rst:777
msgid ""
"The shebang lines can also specify additional options to be passed to the "
"Python interpreter.  For example, if you have a shebang line:"
msgstr ""

#: ../../using/windows.rst:784
msgid "Then Python will be started with the ``-v`` option"
msgstr ""

#: ../../using/windows.rst:787
msgid "Customization"
msgstr "定制"

#: ../../using/windows.rst:790
msgid "Customization via INI files"
msgstr "通过INI文件自定义"

#: ../../using/windows.rst:792
msgid ""
"Two .ini files will be searched by the launcher - ``py.ini`` in the current "
"user's \"application data\" directory (i.e. the directory returned by "
"calling the Windows function ``SHGetFolderPath`` with "
"``CSIDL_LOCAL_APPDATA``) and ``py.ini`` in the same directory as the "
"launcher. The same .ini files are used for both the 'console' version of the"
" launcher (i.e. py.exe) and for the 'windows' version (i.e. pyw.exe)."
msgstr ""

#: ../../using/windows.rst:799
msgid ""
"Customization specified in the \"application directory\" will have "
"precedence over the one next to the executable, so a user, who may not have "
"write access to the .ini file next to the launcher, can override commands in"
" that global .ini file."
msgstr ""

#: ../../using/windows.rst:804
msgid "Customizing default Python versions"
msgstr "自定义默认的Python版本"

#: ../../using/windows.rst:806
msgid ""
"In some cases, a version qualifier can be included in a command to dictate "
"which version of Python will be used by the command. A version qualifier "
"starts with a major version number and can optionally be followed by a "
"period ('.') and a minor version specifier. If the minor qualifier is "
"specified, it may optionally be followed by \"-32\" to indicate the 32-bit "
"implementation of that version be used."
msgstr ""

#: ../../using/windows.rst:813
msgid ""
"For example, a shebang line of ``#!python`` has no version qualifier, while "
"``#!python3`` has a version qualifier which specifies only a major version."
msgstr ""

#: ../../using/windows.rst:816
msgid ""
"If no version qualifiers are found in a command, the environment variable "
"``PY_PYTHON`` can be set to specify the default version qualifier - the "
"default value is \"2\". Note this value could specify just a major version "
"(e.g. \"2\") or a major.minor qualifier (e.g. \"2.6\"), or even "
"major.minor-32."
msgstr ""

#: ../../using/windows.rst:821
msgid ""
"If no minor version qualifiers are found, the environment variable "
"``PY_PYTHON{major}`` (where ``{major}`` is the current major version "
"qualifier as determined above) can be set to specify the full version. If no"
" such option is found, the launcher will enumerate the installed Python "
"versions and use the latest minor release found for the major version, which"
" is likely, although not guaranteed, to be the most recently installed "
"version in that family."
msgstr ""

#: ../../using/windows.rst:829
msgid ""
"On 64-bit Windows with both 32-bit and 64-bit implementations of the same "
"(major.minor) Python version installed, the 64-bit version will always be "
"preferred. This will be true for both 32-bit and 64-bit implementations of "
"the launcher - a 32-bit launcher will prefer to execute a 64-bit Python "
"installation of the specified version if available. This is so the behavior "
"of the launcher can be predicted knowing only what versions are installed on"
" the PC and without regard to the order in which they were installed (i.e., "
"without knowing whether a 32 or 64-bit version of Python and corresponding "
"launcher was installed last). As noted above, an optional \"-32\" suffix can"
" be used on a version specifier to change this behaviour."
msgstr ""

#: ../../using/windows.rst:840
msgid "Examples:"
msgstr "示例："

#: ../../using/windows.rst:842
msgid ""
"If no relevant options are set, the commands ``python`` and ``python2`` will"
" use the latest Python 2.x version installed and the command ``python3`` "
"will use the latest Python 3.x installed."
msgstr ""

#: ../../using/windows.rst:846
msgid ""
"The commands ``python3.1`` and ``python2.7`` will not consult any options at"
" all as the versions are fully specified."
msgstr ""

#: ../../using/windows.rst:849
msgid ""
"If ``PY_PYTHON=3``, the commands ``python`` and ``python3`` will both use "
"the latest installed Python 3 version."
msgstr ""

#: ../../using/windows.rst:852
msgid ""
"If ``PY_PYTHON=3.1-32``, the command ``python`` will use the 32-bit "
"implementation of 3.1 whereas the command ``python3`` will use the latest "
"installed Python (PY_PYTHON was not considered at all as a major version was"
" specified.)"
msgstr ""

#: ../../using/windows.rst:857
msgid ""
"If ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1``, the commands ``python`` and "
"``python3`` will both use specifically 3.1"
msgstr ""

#: ../../using/windows.rst:860
msgid ""
"In addition to environment variables, the same settings can be configured in"
" the .INI file used by the launcher.  The section in the INI file is called "
"``[defaults]`` and the key name will be the same as the environment "
"variables without the leading ``PY_`` prefix (and note that the key names in"
" the INI file are case insensitive.)  The contents of an environment "
"variable will override things specified in the INI file."
msgstr ""

#: ../../using/windows.rst:867
msgid "For example:"
msgstr "例如:"

#: ../../using/windows.rst:869
msgid "Setting ``PY_PYTHON=3.1`` is equivalent to the INI file containing:"
msgstr ""

#: ../../using/windows.rst:876
msgid ""
"Setting ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1`` is equivalent to the INI file"
" containing:"
msgstr ""

#: ../../using/windows.rst:886
msgid "Diagnostics"
msgstr "诊断"

#: ../../using/windows.rst:888
msgid ""
"If an environment variable ``PYLAUNCH_DEBUG`` is set (to any value), the "
"launcher will print diagnostic information to stderr (i.e. to the console). "
"While this information manages to be simultaneously verbose *and* terse, it "
"should allow you to see what versions of Python were located, why a "
"particular version was chosen and the exact command-line used to execute the"
" target Python."
msgstr ""

#: ../../using/windows.rst:900
msgid "Finding modules"
msgstr "寻找模块"

#: ../../using/windows.rst:902
msgid ""
"Python usually stores its library (and thereby your site-packages folder) in"
" the installation directory.  So, if you had installed Python to "
":file:`C:\\\\Python\\\\`, the default library would reside in "
":file:`C:\\\\Python\\\\Lib\\\\` and third-party modules should be stored in "
":file:`C:\\\\Python\\\\Lib\\\\site-packages\\\\`."
msgstr ""

#: ../../using/windows.rst:908
msgid ""
"To completely override :data:`sys.path`, create a ``._pth`` file with the "
"same name as the DLL (``python37._pth``) or the executable (``python._pth``)"
" and specify one line for each path to add to :data:`sys.path`. The file "
"based on the DLL name overrides the one based on the executable, which "
"allows paths to be restricted for any program loading the runtime if "
"desired."
msgstr ""

#: ../../using/windows.rst:914
msgid ""
"When the file exists, all registry and environment variables are ignored, "
"isolated mode is enabled, and :mod:`site` is not imported unless one line in"
" the file specifies ``import site``. Blank paths and lines starting with "
"``#`` are ignored. Each path may be absolute or relative to the location of "
"the file. Import statements other than to ``site`` are not permitted, and "
"arbitrary code cannot be specified."
msgstr ""

#: ../../using/windows.rst:921
msgid ""
"Note that ``.pth`` files (without leading underscore) will be processed "
"normally by the :mod:`site` module when ``import site`` has been specified."
msgstr ""

#: ../../using/windows.rst:924
msgid ""
"When no ``._pth`` file is found, this is how :data:`sys.path` is populated "
"on Windows:"
msgstr ""

#: ../../using/windows.rst:927
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr ""

#: ../../using/windows.rst:930
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in "
":ref:`using-on-envvars`, its entries are added next.  Note that on Windows, "
"paths in this variable must be separated by semicolons, to distinguish them "
"from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""

#: ../../using/windows.rst:935
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys of "
":samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` "
"under both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  "
"Subkeys which have semicolon-delimited path strings as their default value "
"will cause each path to be added to :data:`sys.path`.  (Note that all known "
"installers only use HKLM, so HKCU is typically empty.)"
msgstr ""

#: ../../using/windows.rst:942
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as "
"\"Python Home\".  Otherwise, the path of the main Python executable is used "
"to locate a \"landmark file\" (either ``Lib\\os.py`` or ``pythonXY.zip``) to"
" deduce the \"Python Home\".  If a Python home is found, the relevant sub-"
"directories added to :data:`sys.path` (``Lib``, ``plat-win``, etc) are based"
" on that folder.  Otherwise, the core Python path is constructed from the "
"PythonPath stored in the registry."
msgstr ""

#: ../../using/windows.rst:950
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified "
"in the environment, and no registry entries can be found, a default path "
"with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""

#: ../../using/windows.rst:954
msgid ""
"If a ``pyvenv.cfg`` file is found alongside the main executable or in the "
"directory one level above the executable, the following variations apply:"
msgstr ""

#: ../../using/windows.rst:957
msgid ""
"If ``home`` is an absolute path and :envvar:`PYTHONHOME` is not set, this "
"path is used instead of the path to the main executable when deducing the "
"home location."
msgstr ""

#: ../../using/windows.rst:961
msgid "The end result of all this is:"
msgstr ""

#: ../../using/windows.rst:963
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry are"
" ignored.  Other \"application paths\" in the registry are always read."
msgstr ""

#: ../../using/windows.rst:968
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from "
"the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""

#: ../../using/windows.rst:972
msgid ""
"If Python can't find its home and there are no registry value (frozen .exe, "
"some very strange installation setup) you get a path with some default, but "
"relative, paths."
msgstr ""

#: ../../using/windows.rst:976
msgid ""
"For those who want to bundle Python into their application or distribution, "
"the following advice will prevent conflicts with other installations:"
msgstr ""

#: ../../using/windows.rst:979
msgid ""
"Include a ``._pth`` file alongside your executable containing the "
"directories to include. This will ignore paths listed in the registry and "
"environment variables, and also ignore :mod:`site` unless ``import site`` is"
" listed."
msgstr ""

#: ../../using/windows.rst:984
msgid ""
"If you are loading :file:`python3.dll` or :file:`python37.dll` in your own "
"executable, explicitly call :c:func:`Py_SetPath` or (at least) "
":c:func:`Py_SetProgramName` before :c:func:`Py_Initialize`."
msgstr ""

#: ../../using/windows.rst:988
msgid ""
"Clear and/or overwrite :envvar:`PYTHONPATH` and set :envvar:`PYTHONHOME` "
"before launching :file:`python.exe` from your application."
msgstr ""

#: ../../using/windows.rst:991
msgid ""
"If you cannot use the previous suggestions (for example, you are a "
"distribution that allows people to run :file:`python.exe` directly), ensure "
"that the landmark file (:file:`Lib\\\\os.py`) exists in your install "
"directory. (Note that it will not be detected inside a ZIP file, but a "
"correctly named ZIP file will be detected instead.)"
msgstr ""

#: ../../using/windows.rst:997
msgid ""
"These will ensure that the files in a system-wide installation will not take"
" precedence over the copy of the standard library bundled with your "
"application. Otherwise, your users may experience problems using your "
"application. Note that the first suggestion is the best, as the others may "
"still be susceptible to non-standard paths in the registry and user site-"
"packages."
msgstr ""

#: ../../using/windows.rst:1006
msgid ""
"Adds ``._pth`` file support and removes ``applocal`` option from "
"``pyvenv.cfg``."
msgstr ""

#: ../../using/windows.rst:1008
msgid ""
"Adds ``pythonXX.zip`` as a potential landmark when directly adjacent to the "
"executable."
msgstr ""

#: ../../using/windows.rst:1014
msgid ""
"Modules specified in the registry under ``Modules`` (not ``PythonPath``) may"
" be imported by :class:`importlib.machinery.WindowsRegistryFinder`. This "
"finder is enabled on Windows in 3.6.0 and earlier, but may need to be "
"explicitly added to :attr:`sys.meta_path` in the future."
msgstr ""

#: ../../using/windows.rst:1020
msgid "Additional modules"
msgstr "附加模块"

#: ../../using/windows.rst:1022
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr ""

#: ../../using/windows.rst:1026
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-"
"specific-services`."
msgstr ""

#: ../../using/windows.rst:1030
msgid "PyWin32"
msgstr ""

#: ../../using/windows.rst:1032
msgid ""
"The `PyWin32 <https://pypi.org/project/pywin32>`_ module by Mark Hammond is "
"a collection of modules for advanced Windows-specific support.  This "
"includes utilities for:"
msgstr ""

#: ../../using/windows.rst:1036
msgid "`Component Object Model <https://www.microsoft.com/com/>`_ (COM)"
msgstr ""

#: ../../using/windows.rst:1037
msgid "Win32 API calls"
msgstr ""

#: ../../using/windows.rst:1038
msgid "Registry"
msgstr ""

#: ../../using/windows.rst:1039
msgid "Event log"
msgstr ""

#: ../../using/windows.rst:1040
msgid ""
"`Microsoft Foundation Classes <https://msdn.microsoft.com/en-"
"us/library/fe1cf721%28VS.80%29.aspx>`_ (MFC) user interfaces"
msgstr ""

#: ../../using/windows.rst:1043
msgid ""
"`PythonWin <https://web.archive.org/web/20060524042422/ "
"https://www.python.org/windows/pythonwin/>`_ is a sample MFC application "
"shipped with PyWin32.  It is an embeddable IDE with a built-in debugger."
msgstr ""

#: ../../using/windows.rst:1050
msgid ""
"`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""

#: ../../using/windows.rst:1050
msgid "by Tim Golden"
msgstr ""

#: ../../using/windows.rst:1052
msgid "`Python and COM <http://www.boddie.org.uk/python/COM.html>`_"
msgstr ""

#: ../../using/windows.rst:1053
msgid "by David and Paul Boddie"
msgstr ""

#: ../../using/windows.rst:1057
msgid "cx_Freeze"
msgstr ""

#: ../../using/windows.rst:1059
msgid ""
"`cx_Freeze <https://anthony-tuininga.github.io/cx_Freeze/>`_ is a "
":mod:`distutils` extension (see :ref:`extending-distutils`) which wraps "
"Python scripts into executable Windows programs (:file:`{*}.exe` files).  "
"When you have done this, you can distribute your application without "
"requiring your users to install Python."
msgstr ""

#: ../../using/windows.rst:1067
msgid "WConio"
msgstr ""

#: ../../using/windows.rst:1069
msgid ""
"Since Python's advanced terminal handling layer, :mod:`curses`, is "
"restricted to Unix-like systems, there is a library exclusive to Windows as "
"well: Windows Console I/O for Python."
msgstr ""

#: ../../using/windows.rst:1073
msgid ""
"`WConio <http://newcenturycomputers.net/projects/wconio.html>`_ is a wrapper"
" for Turbo-C's :file:`CONIO.H`, used to create text user interfaces."
msgstr ""

#: ../../using/windows.rst:1079
msgid "Compiling Python on Windows"
msgstr "在Windows上编译Python"

#: ../../using/windows.rst:1081
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `checkout "
"<https://devguide.python.org/setup/#getting-the-source-code>`_."
msgstr ""

#: ../../using/windows.rst:1086
msgid ""
"The source tree contains a build solution and project files for Microsoft "
"Visual Studio 2015, which is the compiler used to build the official Python "
"releases. These files are in the :file:`PCbuild` directory."
msgstr ""

#: ../../using/windows.rst:1090
msgid ""
"Check :file:`PCbuild/readme.txt` for general information on the build "
"process."
msgstr ""

#: ../../using/windows.rst:1093
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr ""

#: ../../using/windows.rst:1100
msgid ""
"`Python + Windows + distutils + SWIG + gcc MinGW "
"<http://sebsauvage.net/python/mingw.html>`_"
msgstr ""

#: ../../using/windows.rst:1098
msgid ""
"or \"Creating Python extensions in C/C++ with SWIG and compiling them with "
"MinGW gcc under Windows\" or \"Installing Python extension with distutils "
"and without Microsoft Visual C++\" by Sébastien Sauvage, 2003"
msgstr ""

#: ../../using/windows.rst:1102
msgid ""
"`MingW -- Python extensions "
"<http://oldwiki.mingw.org/index.php/Python%20extensions>`_"
msgstr ""

#: ../../using/windows.rst:1103
msgid "by Trent Apted et al, 2007"
msgstr ""

#: ../../using/windows.rst:1107
msgid "Other Platforms"
msgstr "其他平台"

#: ../../using/windows.rst:1109
msgid ""
"With ongoing development of Python, some platforms that used to be supported"
" earlier are no longer supported (due to the lack of users or developers). "
"Check :pep:`11` for details on all unsupported platforms."
msgstr ""

#: ../../using/windows.rst:1113
msgid "`Windows CE <http://pythonce.sourceforge.net/>`_ is still supported."
msgstr ""

#: ../../using/windows.rst:1114
msgid ""
"The `Cygwin <https://cygwin.com/>`_ installer offers to install the Python "
"interpreter as well (cf. `Cygwin package source <ftp://ftp.uni-"
"erlangen.de/pub/pc/gnuwin32/cygwin/mirrors/cygnus/ release/python>`_, "
"`Maintainer releases <http://www.tishler.net/jason/software/python/>`_)"
msgstr ""

#: ../../using/windows.rst:1120
msgid ""
"See `Python for Windows <https://www.python.org/downloads/windows/>`_ for "
"detailed information about platforms with pre-compiled installers."
msgstr ""
