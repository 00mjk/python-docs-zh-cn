# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-30 05:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2018\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/lexical_analysis.rst:6
msgid "Lexical analysis"
msgstr "词法分析"

#: ../../reference/lexical_analysis.rst:10
msgid ""
"A Python program is read by a *parser*.  Input to the parser is a stream of "
"*tokens*, generated by the *lexical analyzer*.  This chapter describes how "
"the lexical analyzer breaks a file into tokens."
msgstr ""
"Python 程序由一个 *解析器* 读取。输入到解析器的是一个由 *词法分析器* 所生成的 *形符* "
"流，本章将描述词法分析器是如何将一个文件拆分为一个个形符的。"

#: ../../reference/lexical_analysis.rst:14
msgid ""
"Python reads program text as Unicode code points; the encoding of a source "
"file can be given by an encoding declaration and defaults to UTF-8, see "
":pep:`3120` for details.  If the source file cannot be decoded, a "
":exc:`SyntaxError` is raised."
msgstr ""
"Python 会将读取的程序文本转为 Unicode 码点；源文件的文本编码可由编码声明指定，默认为 UTF-8，详情见 "
":pep:`3120`。如果源文件无法被解码，将会引发 :exc:`SyntaxError`。"

#: ../../reference/lexical_analysis.rst:23
msgid "Line structure"
msgstr "行结构"

#: ../../reference/lexical_analysis.rst:27
msgid "A Python program is divided into a number of *logical lines*."
msgstr "一个 Python 程序可分为许多 *逻辑行*。"

#: ../../reference/lexical_analysis.rst:33
msgid "Logical lines"
msgstr "逻辑行"

#: ../../reference/lexical_analysis.rst:37
msgid ""
"The end of a logical line is represented by the token NEWLINE.  Statements "
"cannot cross logical line boundaries except where NEWLINE is allowed by the "
"syntax (e.g., between statements in compound statements). A logical line is "
"constructed from one or more *physical lines* by following the explicit or "
"implicit *line joining* rules."
msgstr ""
"逻辑行的结束是以 NEWLINE 形符表示的。语句不能跨越逻辑行的边界，除非其语法允许包含 NEWLINE "
"(例如复合语句可由多行子语句组成)。一个逻辑行可由一个或多个 *物理行* 按照明确或隐含的 *行拼接* 规则构成。"

#: ../../reference/lexical_analysis.rst:47
msgid "Physical lines"
msgstr "物理行"

#: ../../reference/lexical_analysis.rst:49
msgid ""
"A physical line is a sequence of characters terminated by an end-of-line "
"sequence.  In source files and strings, any of the standard platform line "
"termination sequences can be used - the Unix form using ASCII LF (linefeed),"
" the Windows form using the ASCII sequence CR LF (return followed by "
"linefeed), or the old Macintosh form using the ASCII CR (return) character."
"  All of these forms can be used equally, regardless of platform. The end of"
" input also serves as an implicit terminator for the final physical line."
msgstr ""
"物理行是以一个行终止序列结束的字符序列。在源文件和字符串中，可以使用任何标准平台上的行终止序列 - Unix 所用的 ASCII 字符 LF (换行),"
" Windows 所用的 ASCII 字符序列 CR LF (回车加换行), 或者旧 Macintosh 所用的 ASCII 字符 CR "
"(回车)。所有这些形式均可使用，无论具体平台。输入的结束也会被作为最后一个物理行的隐含终止标志。"

#: ../../reference/lexical_analysis.rst:57
msgid ""
"When embedding Python, source code strings should be passed to Python APIs "
"using the standard C conventions for newline characters (the ``\\n`` "
"character, representing ASCII LF, is the line terminator)."
msgstr ""
"当嵌入 Python 时，源码字符串传入 Python API 应使用标准 C 的传统换行符 (即 ``\\n``，表示 ASCII 字符 LF "
"作为行终止标志)。"

#: ../../reference/lexical_analysis.rst:65
msgid "Comments"
msgstr "注释"

#: ../../reference/lexical_analysis.rst:69
msgid ""
"A comment starts with a hash character (``#``) that is not part of a string "
"literal, and ends at the end of the physical line.  A comment signifies the "
"end of the logical line unless the implicit line joining rules are invoked. "
"Comments are ignored by the syntax; they are not tokens."
msgstr ""
"一条注释以不包含在字符串内的井号 (``#``) "
"开头，并在物理行的末尾结束。一条注释标志着逻辑行的结束，除非存在隐含的行拼接规则。注释在语法分析中会被忽略；它们不属于形符。"

#: ../../reference/lexical_analysis.rst:78
msgid "Encoding declarations"
msgstr "编码声明"

#: ../../reference/lexical_analysis.rst:82
msgid ""
"If a comment in the first or second line of the Python script matches the "
"regular expression ``coding[=:]\\s*([-\\w.]+)``, this comment is processed "
"as an encoding declaration; the first group of this expression names the "
"encoding of the source code file. The encoding declaration must appear on a "
"line of its own. If it is the second line, the first line must also be a "
"comment-only line. The recommended forms of an encoding expression are ::"
msgstr ""
"如果一条注释位于 Python 脚本的第一或第二行，并且匹配正则表达式 "
"``coding[=:]\\s*([-\\w.]+)``，这条注释会被作为编码声明来处理；上述表达式的第一组指定了源码文件的编码。编码声明必须独占一行。如果它是在第二行，则第一行也必须是注释。推荐的编码声明形式如下"
" ::"

#: ../../reference/lexical_analysis.rst:91
msgid "which is recognized also by GNU Emacs, and ::"
msgstr "这也是 GNU Emacs 认可的形式，以及 ::"

#: ../../reference/lexical_analysis.rst:95
msgid "which is recognized by Bram Moolenaar's VIM."
msgstr "这是 Bram Moolenaar 的 VIM 认可的形式。"

#: ../../reference/lexical_analysis.rst:97
msgid ""
"If no encoding declaration is found, the default encoding is UTF-8.  In "
"addition, if the first bytes of the file are the UTF-8 byte-order mark "
"(``b'\\xef\\xbb\\xbf'``), the declared file encoding is UTF-8 (this is "
"supported, among others, by Microsoft's :program:`notepad`)."
msgstr ""
"如果没有编码声明，则默认编码为 UTF-8。此外，如果文件的首字节为 UTF-8 字节顺序标志 "
"(``b'\\xef\\xbb\\xbf'``)，文件编码也声明为 UTF-8 (这是 Microsoft 的 :program:`notepad` "
"等软件支持的形式)。"

#: ../../reference/lexical_analysis.rst:102
msgid ""
"If an encoding is declared, the encoding name must be recognized by Python. "
"The encoding is used for all lexical analysis, including string literals, "
"comments and identifiers."
msgstr "编码声明指定的编码名称必须是 Python 所认可的编码。所有词法分析将使用此编码，包括语义字符串、注释和标识符。"

#: ../../reference/lexical_analysis.rst:112
msgid "Explicit line joining"
msgstr "显式的行拼接"

#: ../../reference/lexical_analysis.rst:116
msgid ""
"Two or more physical lines may be joined into logical lines using backslash "
"characters (``\\``), as follows: when a physical line ends in a backslash "
"that is not part of a string literal or comment, it is joined with the "
"following forming a single logical line, deleting the backslash and the "
"following end-of-line character.  For example::"
msgstr ""
"两个或更多个物理行可使用反斜杠字符 (``\\``) 拼接为一个逻辑行，规则如下: "
"当一个物理行以一个不在字符串或注释内的反斜杠结尾时，它将与下一行拼接构成一个单独的逻辑行，反斜框及其后的换行符会被删除。例如::"

#: ../../reference/lexical_analysis.rst:127
msgid ""
"A line ending in a backslash cannot carry a comment.  A backslash does not "
"continue a comment.  A backslash does not continue a token except for string"
" literals (i.e., tokens other than string literals cannot be split across "
"physical lines using a backslash).  A backslash is illegal elsewhere on a "
"line outside a string literal."
msgstr ""
"以反斜杠结束的行不能带有注释。反斜杠不能用来拼接注释。反斜杠不能用来拼接形符，字符串除外 "
"(即原文字符串以外的形符不能用反斜杠分隔到两个物理行)。不允许有原文字符串以外的反斜杠存在于物理行的其他位置。"

#: ../../reference/lexical_analysis.rst:137
msgid "Implicit line joining"
msgstr "隐式的行拼接"

#: ../../reference/lexical_analysis.rst:139
msgid ""
"Expressions in parentheses, square brackets or curly braces can be split "
"over more than one physical line without using backslashes. For example::"
msgstr "圆括号、方括号或花括号以内的表达式允许分成多个物理行，无需使用反斜杠。例如::"

#: ../../reference/lexical_analysis.rst:147
msgid ""
"Implicitly continued lines can carry comments.  The indentation of the "
"continuation lines is not important.  Blank continuation lines are allowed. "
"There is no NEWLINE token between implicit continuation lines.  Implicitly "
"continued lines can also occur within triple-quoted strings (see below); in "
"that case they cannot carry comments."
msgstr ""
"隐式的行拼接可以带有注释。后续行的缩进不影响程序结构。后续行也允许为空白行。隐式拼接的行之间不会有 NEWLINE "
"形符。隐式拼接的行也可以出现于三引号字符串中 (见下)；此情况下这些行不允许带有注释。"

#: ../../reference/lexical_analysis.rst:157
msgid "Blank lines"
msgstr "空白行"

#: ../../reference/lexical_analysis.rst:161
msgid ""
"A logical line that contains only spaces, tabs, formfeeds and possibly a "
"comment, is ignored (i.e., no NEWLINE token is generated).  During "
"interactive input of statements, handling of a blank line may differ "
"depending on the implementation of the read-eval-print loop.  In the "
"standard interactive interpreter, an entirely blank logical line (i.e. one "
"containing not even whitespace or a comment) terminates a multi-line "
"statement."
msgstr ""
"一个只包含空格符，制表符，进纸符或者注释的逻辑行会被忽略 (即不生成 NEWLINE 形符)。在交互模式输入语句时，对空白行的处理可能会因读取-求值-"
"打印循环的具体实现方式而存在差异。在标准交互模式解释器中，一个完全空白的逻辑行 (即连空格或注释都没有) 将会结束一条多行复合语句。"

#: ../../reference/lexical_analysis.rst:172
msgid "Indentation"
msgstr "缩进"

#: ../../reference/lexical_analysis.rst:176
msgid ""
"Leading whitespace (spaces and tabs) at the beginning of a logical line is "
"used to compute the indentation level of the line, which in turn is used to "
"determine the grouping of statements."
msgstr "一个逻辑行开头处的空白 (空格符和制表符) 被用来计算该行的缩进等级，以决定语句段落的组织结构。"

#: ../../reference/lexical_analysis.rst:180
msgid ""
"Tabs are replaced (from left to right) by one to eight spaces such that the "
"total number of characters up to and including the replacement is a multiple"
" of eight (this is intended to be the same rule as used by Unix).  The total"
" number of spaces preceding the first non-blank character then determines "
"the line's indentation.  Indentation cannot be split over multiple physical "
"lines using backslashes; the whitespace up to the first backslash determines"
" the indentation."
msgstr ""
"制表符会被 (从左至右) 替换为一至八个空格，这样缩进的空格总数为八的倍数 (这是为了与 Unix "
"所用的规则一致)。首个非空白字符之前的空格总数将确定该行的缩进层次。一个缩进不可使用反斜杠进行多行拼接；首个反斜杠之前的空格将确定缩进层次。"

#: ../../reference/lexical_analysis.rst:188
msgid ""
"Indentation is rejected as inconsistent if a source file mixes tabs and "
"spaces in a way that makes the meaning dependent on the worth of a tab in "
"spaces; a :exc:`TabError` is raised in that case."
msgstr ""
"在一个源文件中如果混合使用制表符和空格符缩进，并使得确定缩进层次需要依赖于制表符对应的空格数量设置，则被视为不合规则；此情况将会引发 "
":exc:`TabError`。"

#: ../../reference/lexical_analysis.rst:192
msgid ""
"**Cross-platform compatibility note:** because of the nature of text editors"
" on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for"
" the indentation in a single source file.  It should also be noted that "
"different platforms may explicitly limit the maximum indentation level."
msgstr ""
"**跨平台兼容性注释:** 由于非 UNIX "
"平台上文本编辑器本身的特性，在一个源文件中混合使用制表符和空格符是不明智的。另外也要注意不同平台还可能会显式地限制最大缩进层级。"

#: ../../reference/lexical_analysis.rst:197
msgid ""
"A formfeed character may be present at the start of the line; it will be "
"ignored for the indentation calculations above.  Formfeed characters "
"occurring elsewhere in the leading whitespace have an undefined effect (for "
"instance, they may reset the space count to zero)."
msgstr ""
"行首有时可能会有一个进纸符；它在上述缩进层级计算中会被忽略。处于行首空格内其他位置的进纸符的效果未定义 (例如它可能导致空格计数重置为零)。"

#: ../../reference/lexical_analysis.rst:204
msgid ""
"The indentation levels of consecutive lines are used to generate INDENT and "
"DEDENT tokens, using a stack, as follows."
msgstr "多个连续行各自的缩进层级将会被放入一个堆栈用来生成 INDENT 和 DEDENT 形符，具体说明如下。"

#: ../../reference/lexical_analysis.rst:207
msgid ""
"Before the first line of the file is read, a single zero is pushed on the "
"stack; this will never be popped off again.  The numbers pushed on the stack"
" will always be strictly increasing from bottom to top.  At the beginning of"
" each logical line, the line's indentation level is compared to the top of "
"the stack. If it is equal, nothing happens. If it is larger, it is pushed on"
" the stack, and one INDENT token is generated.  If it is smaller, it *must* "
"be one of the numbers occurring on the stack; all numbers on the stack that "
"are larger are popped off, and for each number popped off a DEDENT token is "
"generated.  At the end of the file, a DEDENT token is generated for each "
"number remaining on the stack that is larger than zero."
msgstr ""
"在读取文件的第一行之前，先向堆栈推入一个零值；它将不再被弹出。被推入栈的层级数值从底至顶持续增加。每个逻辑行开头的行缩进层级将与栈顶行比较。如果相同，则不做处理。如果新行层级较高，则会被推入栈顶，并生成一个"
" INDENT 形符。如果新行层级较低，则 *应当* 是栈中的层级数值之一；栈中高于该层级的所有数值都将被弹出，每弹出一级数值生成一个 DEDENT "
"形符。在文件末尾，栈中剩余的每个大于零的数值生成一个 DEDENT 形符。"

#: ../../reference/lexical_analysis.rst:218
msgid ""
"Here is an example of a correctly (though confusingly) indented piece of "
"Python code::"
msgstr "这是一个正确 (但令人迷惑) 的Python 代码缩进示例::"

#: ../../reference/lexical_analysis.rst:233
msgid "The following example shows various indentation errors::"
msgstr "以下示例显示了各种缩进错误::"

#: ../../reference/lexical_analysis.rst:243
msgid ""
"(Actually, the first three errors are detected by the parser; only the last "
"error is found by the lexical analyzer --- the indentation of ``return r`` "
"does not match a level popped off the stack.)"
msgstr ""
"(实际上，前三个错误会被解析器发现；只有最后一个错误是由词法分析器发现的 --- ``return r`` 的缩进无法匹配弹出栈的缩进层级。)"

#: ../../reference/lexical_analysis.rst:251
msgid "Whitespace between tokens"
msgstr "形符之间的空白"

#: ../../reference/lexical_analysis.rst:253
msgid ""
"Except at the beginning of a logical line or in string literals, the "
"whitespace characters space, tab and formfeed can be used interchangeably to"
" separate tokens.  Whitespace is needed between two tokens only if their "
"concatenation could otherwise be interpreted as a different token (e.g., ab "
"is one token, but a b is two tokens)."
msgstr ""
"除非是在逻辑行的开头或字符串内，空格符、制表符和进纸符等空白符都同样可以用来分隔形符。如果两个形符彼此相连会被解析为一个不同的形符，则需要使用空白来分隔"
" (例如 ab 是一个形符，而 a b 是两个形符)。"

#: ../../reference/lexical_analysis.rst:263
msgid "Other tokens"
msgstr "其他形符"

#: ../../reference/lexical_analysis.rst:265
msgid ""
"Besides NEWLINE, INDENT and DEDENT, the following categories of tokens "
"exist: *identifiers*, *keywords*, *literals*, *operators*, and *delimiters*."
" Whitespace characters (other than line terminators, discussed earlier) are "
"not tokens, but serve to delimit tokens. Where ambiguity exists, a token "
"comprises the longest possible string that forms a legal token, when read "
"from left to right."
msgstr ""
"除了 NEWLINE, INDENT 和 DEDENT，还存在以下类别的形符: *标识符*, *关键字*, *字面值*, *运算符* 以及 *分隔符*。"
" 空白字符 (之前讨论过的行终止符除外) 不属于形符，而是用来分隔表符。如果存在二义性，将从左至右读取尽可能长的合法字符串组成一个形符。"

#: ../../reference/lexical_analysis.rst:275
msgid "Identifiers and keywords"
msgstr "标识符和关键字"

#: ../../reference/lexical_analysis.rst:279
msgid ""
"Identifiers (also referred to as *names*) are described by the following "
"lexical definitions."
msgstr "标识符 (或者叫做 *名称*) 由以下词法定义进行描述。"

#: ../../reference/lexical_analysis.rst:282
msgid ""
"The syntax of identifiers in Python is based on the Unicode standard annex "
"UAX-31, with elaboration and changes as defined below; see also :pep:`3131` "
"for further details."
msgstr ""
"Python 中的标识符语法是基于 Unicode 标准附件 UAX-31，并加入了下文所定义的细化与修改；更多细节还可参见 :pep:`3131` 。"

#: ../../reference/lexical_analysis.rst:286
msgid ""
"Within the ASCII range (U+0001..U+007F), the valid characters for "
"identifiers are the same as in Python 2.x: the uppercase and lowercase "
"letters ``A`` through ``Z``, the underscore ``_`` and, except for the first "
"character, the digits ``0`` through ``9``."
msgstr ""
"在 ASCII 范围内 (U+0001..U+007F)，可用于标识符的字符与 Python 2.x 一致: 大写和小写字母 ``A`` 至 "
"``Z``，下划线 ``_`` 以及数字 ``0`` 至 ``9``，但不可以数字打头。"

#: ../../reference/lexical_analysis.rst:291
msgid ""
"Python 3.0 introduces additional characters from outside the ASCII range "
"(see :pep:`3131`).  For these characters, the classification uses the "
"version of the Unicode Character Database as included in the "
":mod:`unicodedata` module."
msgstr ""
"Python 3.0 引入了 ASCII 范围以外的额外字符 (见 :pep:`3131`)。这些字符的分类使用包含于 "
":mod:`unicodedata` 模块中的 Unicode 字符数据库版本。"

#: ../../reference/lexical_analysis.rst:295
msgid "Identifiers are unlimited in length.  Case is significant."
msgstr "标识符的长度没有限制。对大小写敏感。"

#: ../../reference/lexical_analysis.rst:304
msgid "The Unicode category codes mentioned above stand for:"
msgstr "上文所用 Unicode 类别码的含义:"

#: ../../reference/lexical_analysis.rst:306
msgid "*Lu* - uppercase letters"
msgstr "*Lu* - 大写字母"

#: ../../reference/lexical_analysis.rst:307
msgid "*Ll* - lowercase letters"
msgstr "*Ll* - 小写字母"

#: ../../reference/lexical_analysis.rst:308
msgid "*Lt* - titlecase letters"
msgstr "*Lt* - 词首大写字母"

#: ../../reference/lexical_analysis.rst:309
msgid "*Lm* - modifier letters"
msgstr "*Lm* - 修饰字母"

#: ../../reference/lexical_analysis.rst:310
msgid "*Lo* - other letters"
msgstr "*Lo* - 其他字母"

#: ../../reference/lexical_analysis.rst:311
msgid "*Nl* - letter numbers"
msgstr "*Nl* - 字母数字"

#: ../../reference/lexical_analysis.rst:312
msgid "*Mn* - nonspacing marks"
msgstr "*Mn* - 非空白标识"

#: ../../reference/lexical_analysis.rst:313
msgid "*Mc* - spacing combining marks"
msgstr "*Mc* - 含空白标识"

#: ../../reference/lexical_analysis.rst:314
msgid "*Nd* - decimal numbers"
msgstr "*Nd* - 十进制数字"

#: ../../reference/lexical_analysis.rst:315
msgid "*Pc* - connector punctuations"
msgstr "*Pc* - 连接标点"

#: ../../reference/lexical_analysis.rst:316
msgid ""
"*Other_ID_Start* - explicit list of characters in `PropList.txt "
"<http://www.unicode.org/Public/11.0.0/ucd/PropList.txt>`_ to support "
"backwards compatibility"
msgstr ""
"*Other_ID_Start* - 由 `PropList.txt "
"<http://www.unicode.org/Public/11.0.0/ucd/PropList.txt>`_ 定义的显式字符列表，用来支持向后兼容"

#: ../../reference/lexical_analysis.rst:319
msgid "*Other_ID_Continue* - likewise"
msgstr "*Other_ID_Continue* - 同上"

#: ../../reference/lexical_analysis.rst:321
msgid ""
"All identifiers are converted into the normal form NFKC while parsing; "
"comparison of identifiers is based on NFKC."
msgstr "所有标识符在解析时会被转换为规范形式 NFKC；标识符的比较都是基于。"

#: ../../reference/lexical_analysis.rst:324
msgid ""
"A non-normative HTML file listing all valid identifier characters for "
"Unicode 4.1 can be found at https://www.dcl.hpi.uni-"
"potsdam.de/home/loewis/table-3131.html."
msgstr ""
"Unicode 4.1 中的所有可用标识符字符列表参见以下非规范 HTML 文件链接 https://www.dcl.hpi.uni-"
"potsdam.de/home/loewis/table-3131.html"

#: ../../reference/lexical_analysis.rst:332
msgid "Keywords"
msgstr "关键字"

#: ../../reference/lexical_analysis.rst:338
msgid ""
"The following identifiers are used as reserved words, or *keywords* of the "
"language, and cannot be used as ordinary identifiers.  They must be spelled "
"exactly as written here:"
msgstr "以下标识符被作为语言的保留字或称 *关键字*，不可被用作普通标识符。关键字的拼写必须与这里列出的完全一致。"

#: ../../reference/lexical_analysis.rst:355
msgid "Reserved classes of identifiers"
msgstr ""

#: ../../reference/lexical_analysis.rst:357
msgid ""
"Certain classes of identifiers (besides keywords) have special meanings.  "
"These classes are identified by the patterns of leading and trailing "
"underscore characters:"
msgstr ""

#: ../../reference/lexical_analysis.rst:371
msgid "``_*``"
msgstr ""

#: ../../reference/lexical_analysis.rst:362
msgid ""
"Not imported by ``from module import *``.  The special identifier ``_`` is "
"used in the interactive interpreter to store the result of the last "
"evaluation; it is stored in the :mod:`builtins` module.  When not in "
"interactive mode, ``_`` has no special meaning and is not defined. See "
"section :ref:`import`."
msgstr ""

#: ../../reference/lexical_analysis.rst:369
msgid ""
"The name ``_`` is often used in conjunction with internationalization; refer"
" to the documentation for the :mod:`gettext` module for more information on "
"this convention."
msgstr ""

#: ../../reference/lexical_analysis.rst:379
msgid "``__*__``"
msgstr ""

#: ../../reference/lexical_analysis.rst:374
msgid ""
"System-defined names. These names are defined by the interpreter and its "
"implementation (including the standard library).  Current system names are "
"discussed in the :ref:`specialnames` section and elsewhere.  More will "
"likely be defined in future versions of Python.  *Any* use of ``__*__`` "
"names, in any context, that does not follow explicitly documented use, is "
"subject to breakage without warning."
msgstr ""

#: ../../reference/lexical_analysis.rst:386
msgid "``__*``"
msgstr ""

#: ../../reference/lexical_analysis.rst:382
msgid ""
"Class-private names.  Names in this category, when used within the context "
"of a class definition, are re-written to use a mangled form to help avoid "
"name clashes between \"private\" attributes of base and derived classes. See"
" section :ref:`atom-identifiers`."
msgstr ""

#: ../../reference/lexical_analysis.rst:391
msgid "Literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:395
msgid "Literals are notations for constant values of some built-in types."
msgstr ""

#: ../../reference/lexical_analysis.rst:401
msgid "String and Bytes literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:405
msgid "String literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:430
msgid ""
"One syntactic restriction not indicated by these productions is that "
"whitespace is not allowed between the :token:`stringprefix` or "
":token:`bytesprefix` and the rest of the literal. The source character set "
"is defined by the encoding declaration; it is UTF-8 if no encoding "
"declaration is given in the source file; see section :ref:`encodings`."
msgstr ""

#: ../../reference/lexical_analysis.rst:438
msgid ""
"In plain English: Both types of literals can be enclosed in matching single "
"quotes (``'``) or double quotes (``\"``).  They can also be enclosed in "
"matching groups of three single or double quotes (these are generally "
"referred to as *triple-quoted strings*).  The backslash (``\\``) character "
"is used to escape characters that otherwise have a special meaning, such as "
"newline, backslash itself, or the quote character."
msgstr ""

#: ../../reference/lexical_analysis.rst:445
msgid ""
"Bytes literals are always prefixed with ``'b'`` or ``'B'``; they produce an "
"instance of the :class:`bytes` type instead of the :class:`str` type.  They "
"may only contain ASCII characters; bytes with a numeric value of 128 or "
"greater must be expressed with escapes."
msgstr ""

#: ../../reference/lexical_analysis.rst:450
msgid ""
"Both string and bytes literals may optionally be prefixed with a letter "
"``'r'`` or ``'R'``; such strings are called :dfn:`raw strings` and treat "
"backslashes as literal characters.  As a result, in string literals, "
"``'\\U'`` and ``'\\u'`` escapes in raw strings are not treated specially. "
"Given that Python 2.x's raw unicode literals behave differently than Python "
"3.x's the ``'ur'`` syntax is not supported."
msgstr ""

#: ../../reference/lexical_analysis.rst:457
msgid ""
"The ``'rb'`` prefix of raw bytes literals has been added as a synonym of "
"``'br'``."
msgstr ""

#: ../../reference/lexical_analysis.rst:461
msgid ""
"Support for the unicode legacy literal (``u'value'``) was reintroduced to "
"simplify the maintenance of dual Python 2.x and 3.x codebases. See "
":pep:`414` for more information."
msgstr ""

#: ../../reference/lexical_analysis.rst:466
msgid ""
"A string literal with ``'f'`` or ``'F'`` in its prefix is a :dfn:`formatted "
"string literal`; see :ref:`f-strings`.  The ``'f'`` may be combined with "
"``'r'``, but not with ``'b'`` or ``'u'``, therefore raw formatted strings "
"are possible, but formatted bytes literals are not."
msgstr ""

#: ../../reference/lexical_analysis.rst:471
msgid ""
"In triple-quoted literals, unescaped newlines and quotes are allowed (and "
"are retained), except that three unescaped quotes in a row terminate the "
"literal.  (A \"quote\" is the character used to open the literal, i.e. "
"either ``'`` or ``\"``.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:477
msgid ""
"Unless an ``'r'`` or ``'R'`` prefix is present, escape sequences in string "
"and bytes literals are interpreted according to rules similar to those used "
"by Standard C.  The recognized escape sequences are:"
msgstr ""

#: ../../reference/lexical_analysis.rst:482
#: ../../reference/lexical_analysis.rst:515
msgid "Escape Sequence"
msgstr ""

#: ../../reference/lexical_analysis.rst:482
#: ../../reference/lexical_analysis.rst:515
msgid "Meaning"
msgstr "意义"

#: ../../reference/lexical_analysis.rst:482
#: ../../reference/lexical_analysis.rst:515
msgid "Notes"
msgstr ""

#: ../../reference/lexical_analysis.rst:484
msgid "``\\newline``"
msgstr ""

#: ../../reference/lexical_analysis.rst:484
msgid "Backslash and newline ignored"
msgstr ""

#: ../../reference/lexical_analysis.rst:486
msgid "``\\\\``"
msgstr ""

#: ../../reference/lexical_analysis.rst:486
msgid "Backslash (``\\``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:488
msgid "``\\'``"
msgstr ""

#: ../../reference/lexical_analysis.rst:488
msgid "Single quote (``'``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:490
msgid "``\\\"``"
msgstr ""

#: ../../reference/lexical_analysis.rst:490
msgid "Double quote (``\"``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:492
msgid "``\\a``"
msgstr ""

#: ../../reference/lexical_analysis.rst:492
msgid "ASCII Bell (BEL)"
msgstr ""

#: ../../reference/lexical_analysis.rst:494
msgid "``\\b``"
msgstr ""

#: ../../reference/lexical_analysis.rst:494
msgid "ASCII Backspace (BS)"
msgstr ""

#: ../../reference/lexical_analysis.rst:496
msgid "``\\f``"
msgstr ""

#: ../../reference/lexical_analysis.rst:496
msgid "ASCII Formfeed (FF)"
msgstr ""

#: ../../reference/lexical_analysis.rst:498
msgid "``\\n``"
msgstr ""

#: ../../reference/lexical_analysis.rst:498
msgid "ASCII Linefeed (LF)"
msgstr ""

#: ../../reference/lexical_analysis.rst:500
msgid "``\\r``"
msgstr ""

#: ../../reference/lexical_analysis.rst:500
msgid "ASCII Carriage Return (CR)"
msgstr ""

#: ../../reference/lexical_analysis.rst:502
msgid "``\\t``"
msgstr ""

#: ../../reference/lexical_analysis.rst:502
msgid "ASCII Horizontal Tab (TAB)"
msgstr ""

#: ../../reference/lexical_analysis.rst:504
msgid "``\\v``"
msgstr ""

#: ../../reference/lexical_analysis.rst:504
msgid "ASCII Vertical Tab (VT)"
msgstr ""

#: ../../reference/lexical_analysis.rst:506
msgid "``\\ooo``"
msgstr ""

#: ../../reference/lexical_analysis.rst:506
msgid "Character with octal value *ooo*"
msgstr ""

#: ../../reference/lexical_analysis.rst:506
msgid "(1,3)"
msgstr ""

#: ../../reference/lexical_analysis.rst:509
msgid "``\\xhh``"
msgstr ""

#: ../../reference/lexical_analysis.rst:509
msgid "Character with hex value *hh*"
msgstr ""

#: ../../reference/lexical_analysis.rst:509
msgid "(2,3)"
msgstr ""

#: ../../reference/lexical_analysis.rst:512
msgid "Escape sequences only recognized in string literals are:"
msgstr ""

#: ../../reference/lexical_analysis.rst:517
msgid "``\\N{name}``"
msgstr ""

#: ../../reference/lexical_analysis.rst:517
msgid "Character named *name* in the Unicode database"
msgstr ""

#: ../../reference/lexical_analysis.rst:517
msgid "\\(4)"
msgstr ""

#: ../../reference/lexical_analysis.rst:520
msgid "``\\uxxxx``"
msgstr ""

#: ../../reference/lexical_analysis.rst:520
msgid "Character with 16-bit hex value *xxxx*"
msgstr ""

#: ../../reference/lexical_analysis.rst:520
msgid "\\(5)"
msgstr ""

#: ../../reference/lexical_analysis.rst:523
msgid "``\\Uxxxxxxxx``"
msgstr ""

#: ../../reference/lexical_analysis.rst:523
msgid "Character with 32-bit hex value *xxxxxxxx*"
msgstr ""

#: ../../reference/lexical_analysis.rst:523
msgid "\\(6)"
msgstr ""

#: ../../reference/lexical_analysis.rst:527
msgid "Notes:"
msgstr ""

#: ../../reference/lexical_analysis.rst:530
msgid "As in Standard C, up to three octal digits are accepted."
msgstr ""

#: ../../reference/lexical_analysis.rst:533
msgid "Unlike in Standard C, exactly two hex digits are required."
msgstr ""

#: ../../reference/lexical_analysis.rst:536
msgid ""
"In a bytes literal, hexadecimal and octal escapes denote the byte with the "
"given value. In a string literal, these escapes denote a Unicode character "
"with the given value."
msgstr ""

#: ../../reference/lexical_analysis.rst:541
msgid "Support for name aliases [#]_ has been added."
msgstr ""

#: ../../reference/lexical_analysis.rst:545
msgid "Exactly four hex digits are required."
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid ""
"Any Unicode character can be encoded this way.  Exactly eight hex digits are"
" required."
msgstr ""

#: ../../reference/lexical_analysis.rst:554
msgid ""
"Unlike Standard C, all unrecognized escape sequences are left in the string "
"unchanged, i.e., *the backslash is left in the result*.  (This behavior is "
"useful when debugging: if an escape sequence is mistyped, the resulting "
"output is more easily recognized as broken.)  It is also important to note "
"that the escape sequences only recognized in string literals fall into the "
"category of unrecognized escapes for bytes literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:561
msgid ""
"Unrecognized escape sequences produce a DeprecationWarning.  In some future "
"version of Python they will be a SyntaxError."
msgstr ""

#: ../../reference/lexical_analysis.rst:565
msgid ""
"Even in a raw literal, quotes can be escaped with a backslash, but the "
"backslash remains in the result; for example, ``r\"\\\"\"`` is a valid "
"string literal consisting of two characters: a backslash and a double quote;"
" ``r\"\\\"`` is not a valid string literal (even a raw string cannot end in "
"an odd number of backslashes).  Specifically, *a raw literal cannot end in a"
" single backslash* (since the backslash would escape the following quote "
"character).  Note also that a single backslash followed by a newline is "
"interpreted as those two characters as part of the literal, *not* as a line "
"continuation."
msgstr ""

#: ../../reference/lexical_analysis.rst:578
msgid "String literal concatenation"
msgstr ""

#: ../../reference/lexical_analysis.rst:580
msgid ""
"Multiple adjacent string or bytes literals (delimited by whitespace), "
"possibly using different quoting conventions, are allowed, and their meaning"
" is the same as their concatenation.  Thus, ``\"hello\" 'world'`` is "
"equivalent to ``\"helloworld\"``.  This feature can be used to reduce the "
"number of backslashes needed, to split long strings conveniently across long"
" lines, or even to add comments to parts of strings, for example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:591
msgid ""
"Note that this feature is defined at the syntactical level, but implemented "
"at compile time.  The '+' operator must be used to concatenate string "
"expressions at run time.  Also note that literal concatenation can use "
"different quoting styles for each component (even mixing raw strings and "
"triple quoted strings), and formatted string literals may be concatenated "
"with plain string literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:607
msgid "Formatted string literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:611
msgid ""
"A :dfn:`formatted string literal` or :dfn:`f-string` is a string literal "
"that is prefixed with ``'f'`` or ``'F'``.  These strings may contain "
"replacement fields, which are expressions delimited by curly braces ``{}``. "
"While other string literals always have a constant value, formatted strings "
"are really expressions evaluated at run time."
msgstr ""

#: ../../reference/lexical_analysis.rst:617
msgid ""
"Escape sequences are decoded like in ordinary string literals (except when a"
" literal is also marked as a raw string).  After decoding, the grammar for "
"the contents of the string is:"
msgstr ""

#: ../../reference/lexical_analysis.rst:631
msgid ""
"The parts of the string outside curly braces are treated literally, except "
"that any doubled curly braces ``'{{'`` or ``'}}'`` are replaced with the "
"corresponding single curly brace.  A single opening curly bracket ``'{'`` "
"marks a replacement field, which starts with a Python expression.  After the"
" expression, there may be a conversion field, introduced by an exclamation "
"point ``'!'``.  A format specifier may also be appended, introduced by a "
"colon ``':'``.  A replacement field ends with a closing curly bracket "
"``'}'``."
msgstr ""

#: ../../reference/lexical_analysis.rst:640
msgid ""
"Expressions in formatted string literals are treated like regular Python "
"expressions surrounded by parentheses, with a few exceptions. An empty "
"expression is not allowed, and a :keyword:`lambda` expression must be "
"surrounded by explicit parentheses.  Replacement expressions can contain "
"line breaks (e.g. in triple-quoted strings), but they cannot contain "
"comments.  Each expression is evaluated in the context where the formatted "
"string literal appears, in order from left to right."
msgstr ""

#: ../../reference/lexical_analysis.rst:648
msgid ""
"If a conversion is specified, the result of evaluating the expression is "
"converted before formatting.  Conversion ``'!s'`` calls :func:`str` on the "
"result, ``'!r'`` calls :func:`repr`, and ``'!a'`` calls :func:`ascii`."
msgstr ""

#: ../../reference/lexical_analysis.rst:652
msgid ""
"The result is then formatted using the :func:`format` protocol.  The format "
"specifier is passed to the :meth:`__format__` method of the expression or "
"conversion result.  An empty string is passed when the format specifier is "
"omitted.  The formatted result is then included in the final value of the "
"whole string."
msgstr ""

#: ../../reference/lexical_analysis.rst:658
msgid ""
"Top-level format specifiers may include nested replacement fields. These "
"nested fields may include their own conversion fields and :ref:`format "
"specifiers <formatspec>`, but may not include more deeply-nested replacement"
" fields. The :ref:`format specifier mini-language <formatspec>` is the same "
"as that used by the string .format() method."
msgstr ""

#: ../../reference/lexical_analysis.rst:664
msgid ""
"Formatted string literals may be concatenated, but replacement fields cannot"
" be split across literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:667
msgid "Some examples of formatted string literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:686
msgid ""
"A consequence of sharing the same syntax as regular string literals is that "
"characters in the replacement fields must not conflict with the quoting used"
" in the outer formatted string literal::"
msgstr ""

#: ../../reference/lexical_analysis.rst:693
msgid ""
"Backslashes are not allowed in format expressions and will raise an error::"
msgstr ""

#: ../../reference/lexical_analysis.rst:698
msgid ""
"To include a value in which a backslash escape is required, create a "
"temporary variable."
msgstr ""

#: ../../reference/lexical_analysis.rst:705
msgid ""
"Formatted string literals cannot be used as docstrings, even if they do not "
"include expressions."
msgstr ""

#: ../../reference/lexical_analysis.rst:716
msgid ""
"See also :pep:`498` for the proposal that added formatted string literals, "
"and :meth:`str.format`, which uses a related format string mechanism."
msgstr ""

#: ../../reference/lexical_analysis.rst:723
msgid "Numeric literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:729
msgid ""
"There are three types of numeric literals: integers, floating point numbers,"
" and imaginary numbers.  There are no complex literals (complex numbers can "
"be formed by adding a real number and an imaginary number)."
msgstr ""

#: ../../reference/lexical_analysis.rst:733
msgid ""
"Note that numeric literals do not include a sign; a phrase like ``-1`` is "
"actually an expression composed of the unary operator '``-``' and the "
"literal ``1``."
msgstr ""

#: ../../reference/lexical_analysis.rst:741
msgid "Integer literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:743
msgid "Integer literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:757
msgid ""
"There is no limit for the length of integer literals apart from what can be "
"stored in available memory."
msgstr ""

#: ../../reference/lexical_analysis.rst:760
msgid ""
"Underscores are ignored for determining the numeric value of the literal.  "
"They can be used to group digits for enhanced readability.  One underscore "
"can occur between digits, and after base specifiers like ``0x``."
msgstr ""

#: ../../reference/lexical_analysis.rst:764
msgid ""
"Note that leading zeros in a non-zero decimal number are not allowed. This "
"is for disambiguation with C-style octal literals, which Python used before "
"version 3.0."
msgstr ""

#: ../../reference/lexical_analysis.rst:768
msgid "Some examples of integer literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:774
#: ../../reference/lexical_analysis.rst:802
msgid "Underscores are now allowed for grouping purposes in literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:781
msgid "Floating point literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:783
msgid ""
"Floating point literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:793
msgid ""
"Note that the integer and exponent parts are always interpreted using radix "
"10. For example, ``077e010`` is legal, and denotes the same number as "
"``77e10``. The allowed range of floating point literals is implementation-"
"dependent.  As in integer literals, underscores are supported for digit "
"grouping."
msgstr ""

#: ../../reference/lexical_analysis.rst:798
msgid "Some examples of floating point literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:809
msgid "Imaginary literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:811
msgid "Imaginary literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:816
msgid ""
"An imaginary literal yields a complex number with a real part of 0.0.  "
"Complex numbers are represented as a pair of floating point numbers and have"
" the same restrictions on their range.  To create a complex number with a "
"nonzero real part, add a floating point number to it, e.g., ``(3+4j)``.  "
"Some examples of imaginary literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:828
msgid "Operators"
msgstr ""

#: ../../reference/lexical_analysis.rst:832
msgid "The following tokens are operators:"
msgstr ""

#: ../../reference/lexical_analysis.rst:845
msgid "Delimiters"
msgstr ""

#: ../../reference/lexical_analysis.rst:849
msgid "The following tokens serve as delimiters in the grammar:"
msgstr ""

#: ../../reference/lexical_analysis.rst:858
msgid ""
"The period can also occur in floating-point and imaginary literals.  A "
"sequence of three periods has a special meaning as an ellipsis literal. The "
"second half of the list, the augmented assignment operators, serve lexically"
" as delimiters, but also perform an operation."
msgstr ""

#: ../../reference/lexical_analysis.rst:863
msgid ""
"The following printing ASCII characters have special meaning as part of "
"other tokens or are otherwise significant to the lexical analyzer:"
msgstr ""

#: ../../reference/lexical_analysis.rst:870
msgid ""
"The following printing ASCII characters are not used in Python.  Their "
"occurrence outside string literals and comments is an unconditional error:"
msgstr ""

#: ../../reference/lexical_analysis.rst:879
msgid "Footnotes"
msgstr "脚注"

#: ../../reference/lexical_analysis.rst:880
msgid "http://www.unicode.org/Public/11.0.0/ucd/NameAliases.txt"
msgstr ""
